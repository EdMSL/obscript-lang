{
  "source": "OBSE",
  "elements": [
    {
      "name": "IsRefEssential",
      "description": "returns whether the referenced actor is essential",
      "example": {
        "raw": "IsRefEssential - returns whether the referenced actor is essential\n\n(isEssential:bool) reference.IsRefEssential",
        "return": [
          "isEssential",
          "bool"
        ],
        "params": [
          "reference.IsRefEssential"
        ]
      }
    },
    {
      "name": "SetRefEssential",
      "description": "sets the calling ref to be essential or not",
      "example": {
        "raw": "SetRefEssential - sets the calling ref to be essential or not\n\nNote: Although used on a reference, this function changes the Essential flag on the Base Object, thus affecting all references from that Base Object.\n\nreference.SetRefEssential isEssential:bool",
        "return": [
          "eference.SetRefEssentia"
        ],
        "params": []
      }
    },
    {
      "name": "GetActorLightAmount",
      "description": "returns a float describing the amount of light falling on an actor, or 100 if the actor is not in high/medium-high process.",
      "example": {
        "raw": "GetActorLightAmount - returns a float describing the amount of light falling on an actor, or 100 if the actor is not in high/medium-high process.\n\nNote: The values appear to range from 0.00 for complete darkness to 100.00 for very bright light.\n\nNote: Without EngineBugFixes, some creatures (like horses and trolls) will always report a light level of 0.\n\n(lightAmount:float) reference.GetActorLightAmount",
        "return": [
          "lightAmount",
          "float"
        ],
        "params": [
          "reference.GetActorLightAmount"
        ]
      }
    },
    {
      "name": "CanCorpseCheck",
      "description": "returns 1 if the Can Corpse Check flag is set on the actor",
      "example": {
        "raw": "CanCorpseCheck - returns 1 if the Can Corpse Check flag is set on the actor\n\n(canCorpseCheck:bool) reference.CanCorpseCheck actor:ref",
        "return": [
          "canCorpseCheck",
          "bool"
        ],
        "params": [
          "reference.CanCorpseCheck"
        ]
      }
    },
    {
      "name": "SetCanCorpseCheck",
      "description": "changes the Can Corpse Check flag on the actor",
      "example": {
        "raw": "SetCanCorpseCheck - changes the Can Corpse Check flag on the actor\n\n(nothing) reference.SetCanCorpseCheck flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCanCorpseCheck"
        ]
      }
    },
    {
      "name": "GetActorMinLevel",
      "description": "returns the minimum level of the actor if the PC Level Offset flag is set",
      "example": {
        "raw": "GetActorMinLevel - returns the minimum level of the actor if the PC Level Offset flag is set\n\n(minLevel:int) reference.GetActorMinLevel actor:ref\n\n(minLevel:int) reference.GetMinLevel actor:ref",
        "return": [
          "minLevel",
          "int"
        ],
        "params": [
          "reference.GetActorMinLevel"
        ]
      }
    },
    {
      "name": "GetActorMaxLevel",
      "description": "returns the maximum level of the actor if the PC Level Offset flag is set",
      "example": {
        "raw": "GetActorMaxLevel - returns the maximum level of the actor if the PC Level Offset flag is set\n\n(maxLevel:int) reference.GetActorMaxLevel actor:ref\n\n(maxLevel:int) reference.GetMaxLevel actor:ref",
        "return": [
          "maxLevel",
          "int"
        ],
        "params": [
          "reference.GetActorMaxLevel"
        ]
      }
    },
    {
      "name": "GetNumFactions",
      "description": "returns the number of factions to which the actor belongs",
      "example": {
        "raw": "GetNumFactions - returns the number of factions to which the actor belongs\n\n(numFactions:int) reference.GetNumFactions actor:ref",
        "return": [
          "numFactions",
          "int"
        ],
        "params": [
          "reference.GetNumFactions"
        ]
      }
    },
    {
      "name": "GetNthFaction",
      "description": "returns the nth faction to which the actor belongs",
      "example": {
        "raw": "GetNthFaction - returns the nth faction to which the actor belongs\n\n(faction:ref) reference.GetNthFaction  whichFaction:short actor:ref",
        "return": [
          "faction",
          "ref"
        ],
        "params": [
          "reference.GetNthFaction"
        ]
      }
    },
    {
      "name": "GetActorSoulLevel",
      "description": "returns the soul level of any actor. If an NPC it returns Grand, otherwise if a creature it returns the creature's soul level.",
      "example": {
        "raw": "GetActorSoulLevel - returns the soul level of any actor. If an NPC it returns Grand, otherwise if a creature it returns the creature's soul level.\n\n(soulLevel:int) reference.GetActorSoulLevel actor:ref",
        "return": [
          "soulLevel",
          "int"
        ],
        "params": [
          "reference.GetActorSoulLevel"
        ]
      }
    },
    {
      "name": "HasLowLevelProcessing",
      "description": "returns 1 if the actor has low level processing enabled",
      "example": {
        "raw": "HasLowLevelProcessing - returns 1 if the actor has low level processing enabled\n\n(hasLowProc:bool) reference.HasLowLevelProcessing actor:ref",
        "return": [
          "hasLowProc",
          "bool"
        ],
        "params": [
          "reference.HasLowLevelProcessing"
        ]
      }
    },
    {
      "name": "HasNoPersuasion",
      "description": "returns 1 if the No Persuasion flag is set on the actor",
      "example": {
        "raw": "HasNoPersuasion - returns 1 if the No Persuasion flag is set on the actor\n\n(hasNoPers:bool) reference.HasNoPersuasion actor:ref",
        "return": [
          "hasNoPers",
          "bool"
        ],
        "params": [
          "reference.HasNoPersuasion"
        ]
      }
    },
    {
      "name": "SetNoPersuasion",
      "description": "changes the No Persuasion flag on the actor",
      "example": {
        "raw": "SetNoPersuasion - changes the No Persuasion flag on the actor\n\n(nothing) reference.SetNoPersuasion flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetNoPersuasion"
        ]
      }
    },
    {
      "name": "IsActorRespawning",
      "description": "returns 1 if the Respawn flag is set on the actor",
      "example": {
        "raw": "IsActorRespawning - returns 1 if the Respawn flag is set on the actor\n\n(respawns:bool) reference.IsActorRespawning actor:ref",
        "return": [
          "respawns",
          "bool"
        ],
        "params": [
          "reference.IsActorRespawning"
        ]
      }
    },
    {
      "name": "IsPCLevelOffset",
      "description": "returns 1 if the actor's level is calculated relative to the player's level",
      "example": {
        "raw": "IsPCLevelOffset - returns 1 if the actor's level is calculated relative to the player's level\n\n(isLevOffset:bool) reference.IsPCLevelOffset actor:ref",
        "return": [
          "isLevOffset",
          "bool"
        ],
        "params": [
          "reference.IsPCLevelOffset"
        ]
      }
    },
    {
      "name": "GetActorBaseLevel",
      "description": "returns the level of the base actor. In the editor, for creatures this is the \"Level Offset\" field; for NPCs it is the \"Level\" field. For either, the meaning of the return value depends on whether or not the PC Level Offset flag is set for the base actor.",
      "example": {
        "raw": "GetActorBaseLevel - returns the level of the base actor. In the editor, for creatures this is the \"Level Offset\" field; for NPCs it is the \"Level\" field. For either, the meaning of the return value depends on whether or not the PC Level Offset flag is set for the base actor.\n\n(level:int) reference.GetActorBaseLevel actorBase:ref",
        "return": [
          "level",
          "int"
        ],
        "params": [
          "reference.GetActorBaseLevel"
        ]
      }
    },
    {
      "name": "IsSummonable",
      "description": "returns 1 if the Summonable flag is set on the actor",
      "example": {
        "raw": "IsSummonable - returns 1 if the Summonable flag is set on the actor\n\n(isSummonable:bool) reference.IsSummonable actor:ref",
        "return": [
          "isSummonable",
          "bool"
        ],
        "params": [
          "reference.IsSummonable"
        ]
      }
    },
    {
      "name": "SetSummonable",
      "description": "changes the Summonable flag on the actor",
      "example": {
        "raw": "SetSummonable - changes the Summonable flag on the actor\n\n(nothing) reference.SetSummonable flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetSummonable"
        ]
      }
    },
    {
      "name": "SetActorRespawns",
      "description": "changes the Respawn flag on the actor",
      "example": {
        "raw": "SetActorRespawns - changes the Respawn flag on the actor\n\n(nothing) reference.SetActorRespawns flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetActorRespawns"
        ]
      }
    },
    {
      "name": "SetFemale",
      "description": "changes the Female flag on the actor. Changes are saved but may not be immediately visible.",
      "example": {
        "raw": "SetFemale - changes the Female flag on the actor. Changes are saved but may not be immediately visible.\n\n(nothing) reference.SetFemale flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetFemale"
        ]
      }
    },
    {
      "name": "SetLowLevelProcessing",
      "description": "turns low level processing on or off for the actor. Note that this sets the No Low Level Processing flag to the opposite of the passed value.",
      "example": {
        "raw": "SetLowLevelProcessing - turns low level processing on or off for the actor. Note that this sets the No Low Level Processing flag to the opposite of the passed value.\n\n(nothing) reference.SetLowLevelProcessing flag:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetLowLevelProcessing"
        ]
      }
    },
    {
      "name": "SetPCLevelOffset",
      "description": "changes the PC Level Offset flag on the actor, and optionally specifies the minimum andmaximum levels. If minLevel or maxLevel is omitted or passed as -1, the existing value will be retained.",
      "example": {
        "raw": "SetPCLevelOffset - changes the PC Level Offset flag on the actor, and optionally specifies the minimum andmaximum levels. If minLevel or maxLevel is omitted or passed as -1, the existing value will be retained.\n\nNote: Changes to the min/max levels are not saved in the savegame.\n\n(nothing) reference.SetPCLevelOffset flag:int minLevel:int maxLevel:int actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetPCLevelOffset"
        ]
      }
    },
    {
      "name": "GetNumPackages",
      "description": "returns the number of AI packages in the actor's package list",
      "example": {
        "raw": "GetNumPackages - returns the number of AI packages in the actor's package list\n\n(numPackages:int) reference.GetNumPackages actor:ref",
        "return": [
          "numPackages",
          "int"
        ],
        "params": [
          "reference.GetNumPackages"
        ]
      }
    },
    {
      "name": "GetNthPackage",
      "description": "returns the Nth AI package in the NPC's package list, in the order in which they were added in the editor.",
      "example": {
        "raw": "GetNthPackage - returns the Nth AI package in the NPC's package list, in the order in which they were added in the editor.\n\n(package:ref) reference.GetNthPackage whichPackage:short actor:ref",
        "return": [
          "package",
          "ref"
        ],
        "params": [
          "reference.GetNthPackage"
        ]
      }
    },
    {
      "name": "GetSpellEffectiveness",
      "description": "returns the actor's spell effectiveness based on the armor he or she has equipped as a floating point value from 0 to 1.0. The return value is always 1.0 for creatures and NPCs other than the player. When calledon the player, this command returns the player's base spell effectiveness as calculated by the game plus any script modifier applied by ModPCSpellEffectiveness.",
      "example": {
        "raw": "GetSpellEffectiveness - returns the actor's spell effectiveness based on the armor he or she has equipped as a floating point value from 0 to 1.0. The return value is always 1.0 for creatures and NPCs other than the player. When calledon the player, this command returns the player's base spell effectiveness as calculated by the game plus any script modifier applied by ModPCSpellEffectiveness.\n\n(spellEffectiveness:float) reference.GetSpellEffectiveness",
        "return": [
          "spellEffectiveness",
          "float"
        ],
        "params": [
          "reference.GetSpellEffectiveness"
        ]
      }
    },
    {
      "name": "CanCastPower",
      "description": "returns false if the calling actor has already used the specified greater power within the last 24 hours. This command does not check for the presence of the greater power in the actor's spellbook.",
      "example": {
        "raw": "CanCastPower - returns false if the calling actor has already used the specified greater power within the last 24 hours. This command does not check for the presence of the greater power in the actor's spellbook.\n\n(CanCast:bool) ref.CanCastPower spell:ref",
        "return": [
          "CanCast",
          "bool"
        ],
        "params": [
          "ref.CanCastPower"
        ]
      }
    },
    {
      "name": "SetCanCastPower",
      "description": "indicates whether the calling actor can cast the specified greater power. Passing 1 allows the actor to cast the power even if he has already used it within the past 24 hours. Passing 0 disallows the actor from casting the spell for the next 24 hours, unless the actor has already cast the power, in which case the power will become usable as normal 24 hours after the last casting.",
      "example": {
        "raw": "SetCanCastPower - indicates whether the calling actor can cast the specified greater power. Passing 1 allows the actor to cast the power even if he has already used it within the past 24 hours. Passing 0 disallows the actor from casting the spell for the next 24 hours, unless the actor has already cast the power, in which case the power will become usable as normal 24 hours after the last casting.\n\n(nothing) ref.SetCanCastPower spell:ref allowCasting:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "ref.SetCanCastPower"
        ]
      }
    },
    {
      "name": "SetPowerTimer",
      "description": "sets the amount of time that must pass until the calling actor can cast the specified power. The time is a float representing the number of real-time seconds until the power becomes usable. When an actor uses a power, the game calculates the 24-hour timer as ",
      "example": {
        "raw": "SetPowerTimer - sets the amount of time that must pass until the calling actor can cast the specified power. The time is a float representing the number of real-time seconds until the power becomes usable. When an actor uses a power, the game calculates the 24-hour timer as 3600 / TimeScale 24 where TimeScale is a global variable representing the number of game-time minutes which elapse per real-tme minute. The timer value passed to this function should similarly take TimeScale into account. Passing a value of zero or less will cause the power to become usable the very next frame.\n\n(nothing) ref.SetPowerTimer spell:ref timer:float",
        "return": [
          "nothing"
        ],
        "params": [
          "ref.SetPowerTimer"
        ]
      }
    },
    {
      "name": "GetUsedPowers",
      "description": "returns an Array containing information about all greater powers which the calling actor has used. This includes powers cast by the actor within the last 24 hours as well as any powers flagged as used by SetCanCastPower and SetPowerTimer. The return value is an Array of StringMaps:",
      "example": {
        "raw": "GetUsedPowers - returns an Array containing information about all greater powers which the calling actor has used. This includes powers cast by the actor within the last 24 hours as well as any powers flagged as used by SetCanCastPower and SetPowerTimer. The return value is an Array of StringMaps:\n\nGetUsedPowers[n][\"power\"] := ref ; the greater power\n\nGetUsedPowers[n][\"timer\"] := float ; number of real-time seconds until the power becomes usable again\n\n(powers:Array) ref.GetUsedPowers",
        "return": [
          "powers",
          "Array"
        ],
        "params": [
          "ref.GetUsedPowers"
        ]
      }
    },
    {
      "name": "HasSpell",
      "description": "returns whether the actor has the specified spell",
      "example": {
        "raw": "HasSpell - returns whether the actor has the specified spell\n\nNotes: Before xOBSE 21.5 return always 0 on Creatures. \n\n(hasSpell:bool) reference.HasSpell spell:ref",
        "return": [
          "hasSpell",
          "bool"
        ],
        "params": [
          "reference.HasSpell"
        ]
      }
    },
    {
      "name": "IsDiseased",
      "description": "returns whether the actor has a disease",
      "example": {
        "raw": "IsDiseased - returns whether the actor has a disease\n\n(isDiseased:bool) reference.IsDiseased",
        "return": [
          "isDiseased",
          "bool"
        ],
        "params": [
          "reference.IsDiseased"
        ]
      }
    },
    {
      "name": "RemoveBaseSpell",
      "description": "the game's RemoveSpell removes a spell from a base actor but must be called on a reference. This command does the same thing as RemoveSpell but takes a base object as an argument, returning 1 if the spell was removed.",
      "example": {
        "raw": "RemoveBaseSpell - the game's RemoveSpell removes a spell from a base actor but must be called on a reference. This command does the same thing as RemoveSpell but takes a base object as an argument, returning 1 if the spell was removed.\n\n(bRemoved:bool) RemoveBaseSpell actor:ref",
        "return": [
          "bRemoved",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetLeveledSpells",
      "description": "returns an Array containing all of the leveled spells in the base actor's spell list.",
      "example": {
        "raw": "GetLeveledSpells - returns an Array containing all of the leveled spells in the base actor's spell list.\n\n(spells:Array) reference.GetLeveledSpells actorBase:ref",
        "return": [
          "spells",
          "Array"
        ],
        "params": [
          "reference.GetLeveledSpells"
        ]
      }
    },
    {
      "name": "GetActorPackages",
      "description": "returns an Array containing the AI packages defined in the base actor's package list, in the order in which they are listed in the editor.",
      "example": {
        "raw": "GetActorPackages - returns an Array containing the AI packages defined in the base actor's package list, in the order in which they are listed in the editor.\n\n(packages:Array) reference.GetActorPackages actorBase:ref",
        "return": [
          "packages",
          "Array"
        ],
        "params": [
          "reference.GetActorPackages"
        ]
      }
    },
    {
      "name": "GetCurrentPackage",
      "description": "returns the actor ref's currently executing package",
      "example": {
        "raw": "GetCurrentPackage - returns the actor ref's currently executing package\n\n(package:ref) reference.GetCurrentPackage",
        "return": [
          "package",
          "ref"
        ],
        "params": [
          "reference.GetCurrentPackage"
        ]
      }
    },
    {
      "name": "GetCurrentPackageProcedure",
      "description": "returns the name of the ",
      "example": {
        "raw": "GetCurrentPackageProcedure - returns the name of the AI procedure currently being executed by the calling actor, or \"NONE\".\n\n(procedure:string) reference.GetCurrentPackageProcedure",
        "return": [
          "procedure",
          "string"
        ],
        "params": [
          "reference.GetCurrentPackageProcedure"
        ]
      }
    },
    {
      "name": "GetCurrentEditorPackage",
      "description": "returns the actor ref's executing non-dynamic package",
      "example": {
        "raw": "GetCurrentEditorPackage - returns the actor ref's executing non-dynamic package\n\n(package:ref) reference.GetCurrentEditorPackage",
        "return": [
          "package",
          "ref"
        ],
        "params": [
          "reference.GetCurrentEditorPackage"
        ]
      }
    },
    {
      "name": "EquipItem2",
      "description": "duplicates the behavior of the vanilla ",
      "example": {
        "raw": "EquipItem2 - duplicates the behavior of the vanilla EquipItem command, but also causes the object's OnEquip script block to run if one exists\n\n(nothing) ref.EquipItem2 item:ref lockEquip:bool",
        "return": [
          "quipIte"
        ],
        "params": []
      }
    },
    {
      "name": "EquipItem2NS",
      "description": "behaves identically to ",
      "example": {
        "raw": "EquipItem2NS - behaves identically to EquipItem2, but suppresses the UI message generated by that command\n\n(nothing) ref.EquipItem2NS item:ref lockEquip:bool",
        "return": [
          "quipItem"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpecialAnims",
      "description": "returns an Array containing the filenames of any special animations for the actor. Animations for creatures, and those in the SpecialAnims folder for NPCs, can be toggled on and off in the actor's animation list in the editor.",
      "example": {
        "raw": "GetSpecialAnims - returns an Array containing the filenames of any special animations for the actor. Animations for creatures, and those in the SpecialAnims folder for NPCs, can be toggled on and off in the actor's animation list in the editor.\n\n(anims:Array) reference.GetSpecialAnims actorBase:ref",
        "return": [
          "anims",
          "Array"
        ],
        "params": [
          "reference.GetSpecialAnims"
        ]
      }
    },
    {
      "name": "ToggleSpecialAnim",
      "description": "adds or removes an animation from the base actor's animation list. For creatures, the animations must appear in the creature's model folder; for NPCs they must be located in the Special Anims folder. Changes made using this command have no effect on the animations of reference's to the base actor which are currently in middle-high or high process.",
      "example": {
        "raw": "ToggleSpecialAnim - adds or removes an animation from the base actor's animation list. For creatures, the animations must appear in the creature's model folder; for NPCs they must be located in the Special Anims folder. Changes made using this command have no effect on the animations of reference's to the base actor which are currently in middle-high or high process.\n\n(bSucceeded:bool) reference.ToggleSpecialAnim animFileName:string toggleOn:bool actorBase:ref",
        "return": [
          "bSucceeded",
          "bool"
        ],
        "params": [
          "reference.ToggleSpecialAnim"
        ]
      }
    },
    {
      "name": "GetGroundSurfaceMaterial",
      "description": "returns the ",
      "example": {
        "raw": "GetGroundSurfaceMaterial - returns the surface type that the actor ref is currently standing on. Returns -1 if the ref is not in middle-high or high process.\n\n(surfaceType:int) reference.GetGroundSurfaceMaterial",
        "return": [
          "surfaceType",
          "int"
        ],
        "params": [
          "reference.GetGroundSurfaceMaterial"
        ]
      }
    },
    {
      "name": "GetFactions",
      "description": "returns an array containing the factions the calling ref or base actor is a member of.",
      "example": {
        "raw": "GetFactions - returns an array containing the factions the calling ref or base actor is a member of.\n\n(factions:Array) reference.GetFactions actorBase:ref",
        "return": [
          "factions",
          "Array"
        ],
        "params": [
          "reference.GetFactions"
        ]
      }
    },
    {
      "name": "GetActorSwimBreath",
      "description": "returns the calling high process actor's swimming breath level in seconds.",
      "example": {
        "raw": "GetActorSwimBreath - returns the calling high process actor's swimming breath level in seconds.\n\n(breathLevel:float) reference.GetActorSwimBreath",
        "return": [
          "breathLevel",
          "float"
        ],
        "params": [
          "reference.GetActorSwimBreath"
        ]
      }
    },
    {
      "name": "SetActorSwimBreath",
      "description": "sets the calling high process actor's swimming breath level.",
      "example": {
        "raw": "SetActorSwimBreath - sets the calling high process actor's swimming breath level.\n\n(nothing) reference.SetActorSwimBreath newBreath:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetActorSwimBreath"
        ]
      }
    },
    {
      "name": "GetActorMaxSwimBreath",
      "description": "returns the calling high process actor's maximum swimming breath level  in seconds.",
      "example": {
        "raw": "GetActorMaxSwimBreath - returns the calling high process actor's maximum swimming breath level  in seconds.\n\n(breathLevel:float) reference.GetActorMaxSwimBreath",
        "return": [
          "breathLevel",
          "float"
        ],
        "params": [
          "reference.GetActorMaxSwimBreath"
        ]
      }
    },
    {
      "name": "SetActorMaxSwimBreath",
      "description": "sets the calling high process actor's maximum swimming breath level. Overrides are automatically cleared when the actor leaves the high process AI processing band.",
      "example": {
        "raw": "SetActorMaxSwimBreath - sets the calling high process actor's maximum swimming breath level. Overrides are automatically cleared when the actor leaves the high process AI processing band.\n\n(nothing) reference.SetActorMaxSwimBreath newBreath:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetActorMaxSwimBreath"
        ]
      }
    },
    {
      "name": "OverrideActorSwimBreath",
      "description": "overrides the ",
      "example": {
        "raw": "OverrideActorSwimBreath - overrides the swimming breath behaviour of the calling high process actor. Overridden actors will revert to their normal behaviour when they leave the high process AI processing band.\n\n(nothing) reference.OverrideActorSwimBreath override:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.OverrideActorSwimBreath"
        ]
      }
    },
    {
      "name": "GetAVMod",
      "description": "returns one of the calling actor's modifiers for the specified actor value. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the ",
      "example": {
        "raw": "GetAVMod - returns one of the calling actor's modifiers for the specified actor value. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the script versions of ModAV and ForceAV; \"max\" refers to the modifier applied by magic effects like feather, drain, and fortify; and \"damage\" refers to that applied by effects like damage and restore, and by the console version of ModAV/ForceAV as well as ModAV2.\n\n(modifierValue:float) ref.GetAVMod actorValueName:string whichModifier:string\n\n(modifierValue:float) ref.GetAVModC actorValueCode:int whichModifier:string",
        "return": [
          "modifierValue",
          "float"
        ],
        "params": [
          "ref.GetAVMod"
        ]
      }
    },
    {
      "name": "SetAVMod",
      "description": "sets the value of one of the calling actor's modifiers for the specified actor value. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the ",
      "example": {
        "raw": "SetAVMod - sets the value of one of the calling actor's modifiers for the specified actor value. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the script versions of ModAV and ForceAV; \"max\" refers to the modifier applied by magic effects like feather, drain, and fortify; and \"damage\" refers to that applied by effects like damage and restore, and by the console version of ModAV/ForceAV as well as ModAV2. To encourage compatibility between mods, prefer using ModAVMod over SetAVMod.\n\n(nothing) ref.SetAVMod actorValueName:string whichModifier:string amount:float\n\n(nothing) ref.SetAVModC actorValueCode:int whichModifier:string amount:float",
        "return": [
          "nothing"
        ],
        "params": [
          "ref.SetAVMod"
        ]
      }
    },
    {
      "name": "ModAVMod",
      "description": "modifies the value of one of the calling actor's modifiers for the specified actor value by the specified amount. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the ",
      "example": {
        "raw": "ModAVMod - modifies the value of one of the calling actor's modifiers for the specified actor value by the specified amount. The modifier is specified as a string: \"script\" refers to the script (or \"offset\") modifier applied by the script versions of ModAV and ForceAV; \"max\" refers to the modifier applied by magic effects like feather, drain, and fortify; and \"damage\" refers to that applied by effects like damage and restore, and by the console version of ModAV/ForceAV as well as ModAV2.\n\n(nothing) ref.ModAVMod actorValueName:string whichModifier:string amount:float\n\n(nothing) ref.ModAVModC actorValueCode:int whichModifier:string amount:float",
        "return": [
          "nothing"
        ],
        "params": [
          "ref.ModAVMod"
        ]
      }
    },
    {
      "name": "GetMaxAV",
      "description": "returns the maximum possible value of the specified actor value for the calling actor.",
      "example": {
        "raw": "GetMaxAV - returns the maximum possible value of the specified actor value for the calling actor.\n\n(maxValue:float) ref.GetMaxAV actorValueName:string\n\n(maxValue:float) ref.GetMaxAVC actorValueCode:int",
        "return": [
          "maxValue",
          "float"
        ],
        "params": [
          "ref.GetMaxAV"
        ]
      }
    },
    {
      "name": "GetAVForBaseActor",
      "description": "returns the value of the specified actor value as defined for the base actor. If the second argument is omitted, the base object for the calling actor is used. Note that not all actor values are defined for base actors, in which case this command returns 0.",
      "example": {
        "raw": "GetAVForBaseActor - returns the value of the specified actor value as defined for the base actor. If the second argument is omitted, the base object for the calling actor is used. Note that not all actor values are defined for base actors, in which case this command returns 0.\n\n(value:int) ref.GetAVForBaseActor actorValueName:string actorBase:ref\n\n(value:int) ref.GetAVForBaseActorC actorValueCode:int actorBase:ref",
        "return": [
          "value",
          "int"
        ],
        "params": [
          "ref.GetAVForBaseActor"
        ]
      }
    },
    {
      "name": "GetActorValueC",
      "description": "returns the actor value specified by the actor value code",
      "example": {
        "raw": "GetActorValueC - returns the actor value specified by the actor value code\n\n(actorValue:int) reference.GetActorValueC actorValueCode:int\n\n(actorValue:int) reference.GetAVC actorValueCode:int",
        "return": [
          "actorValue",
          "int"
        ],
        "params": [
          "reference.GetActorValueC"
        ]
      }
    },
    {
      "name": "ModActorValueC",
      "description": "modifies the actor value without changing the base value. Acts like a spell: a negative number reduces the value which can be restored and a positive value restores values without exceeding the maximum of the stat.",
      "example": {
        "raw": "ModActorValueC - modifies the actor value without changing the base value. Acts like a spell: a negative number reduces the value which can be restored and a positive value restores values without exceeding the maximum of the stat.\n\n(nothing) reference.ModActorValueC actorValueCode:int value:int\n\n(nothing) reference.ModAVC actorValueCode:int value:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModActorValueC"
        ]
      }
    },
    {
      "name": "SetActorValueC",
      "description": "sets the actor value specified by the actor value code",
      "example": {
        "raw": "SetActorValueC - sets the actor value specified by the actor value code\n\n(nothing) reference.SetActorValueC actorValueCode:int value:int\n\n(nothing) reference.SetAVC actorValueCode:int value:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetActorValueC"
        ]
      }
    },
    {
      "name": "ModActorValue2",
      "description": "modifies the current value without changing the base value. Acts like a spell: a negative number reduces the value which can be restored and a positive value restores values without exceeding the maximum of the stat.",
      "example": {
        "raw": "ModActorValue2 - modifies the current value without changing the base value. Acts like a spell: a negative number reduces the value which can be restored and a positive value restores values without exceeding the maximum of the stat.\n\nNote: The value is an unrounded integer; ModAV2 StatName 3.9 would result in a 3 point change.\n\nNote: Attempting to mod a positive-only stat like health and attributes to negative values will crash the game. (TODO: Verify)\n\n(nothing) reference.ModActorValue2 actorValueName:string value:int\n\n(nothing) reference.ModAV2 actorValueName:string value:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModActorValue2"
        ]
      }
    },
    {
      "name": "GetLuckModifiedSkill",
      "description": "the game applies a modifier to all skills based on an actor's luck attribute. This command takes an actual skill value and a luck attribute value and calculates the effective level of the skill after the luck modifier has been applied. The third parameter can be used to return an uncapped value - The result is capped at 100 by default.",
      "example": {
        "raw": "GetLuckModifiedSkill - the game applies a modifier to all skills based on an actor's luck attribute. This command takes an actual skill value and a luck attribute value and calculates the effective level of the skill after the luck modifier has been applied. The third parameter can be used to return an uncapped value - The result is capped at 100 by default.\n\n(modifiedSkill:int) GetLuckModifiedSkill skillLevel:int luck:int capped:bool",
        "return": [
          "modifiedSkill",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetAVSkillMasteryLevel",
      "description": "returns the current mastery level of an actor's skill. The mastery level is an integer from 0 (Novice) to 4 (Master).",
      "example": {
        "raw": "GetAVSkillMasteryLevel - returns the current mastery level of an actor's skill. The mastery level is an integer from 0 (Novice) to 4 (Master).\n\n(masteryLevel:int) reference.GetAVSkillMasteryLevel skill:actorValue ",
        "return": [
          "masteryLevel",
          "int"
        ],
        "params": [
          "reference.GetAVSkillMasteryLevel"
        ]
      }
    },
    {
      "name": "GetAVSkillMasteryLevelC",
      "description": "alternate version of GetAVSkillMasteryLevel taking an actor value for the skill.",
      "example": {
        "raw": "GetAVSkillMasteryLevelC - alternate version of GetAVSkillMasteryLevel taking an actor value for the skill.\n\n(masteryLevel:int) reference.GetAVSkillMasteryLevelC skillCode:int ",
        "return": [
          "masteryLevel",
          "int"
        ],
        "params": [
          "reference.GetAVSkillMasteryLevelC"
        ]
      }
    },
    {
      "name": "GetAttackDamage",
      "description": "returns the base attack damage",
      "example": {
        "raw": "GetAttackDamage - returns the base attack damage\n\n(damage:int) reference.GetAttackDamage objectID:ref",
        "return": [
          "damage",
          "int"
        ],
        "params": [
          "reference.GetAttackDamage"
        ]
      }
    },
    {
      "name": "SetAttackDamage",
      "description": "sets the base attack damage",
      "example": {
        "raw": "SetAttackDamage - sets the base attack damage\n\n(nothing) reference.SetAttackDamage nuDamage:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetAttackDamage"
        ]
      }
    },
    {
      "name": "ModAttackDamage",
      "description": "modifies the base attack damage up or down",
      "example": {
        "raw": "ModAttackDamage - modifies the base attack damage up or down\n\n(nothing) reference.ModAttackDamage modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModAttackDamage"
        ]
      }
    },
    {
      "name": "GetWeaponSpeed",
      "description": "returns the weapon speed",
      "example": {
        "raw": "GetWeaponSpeed - returns the weapon speed\n\n(speed:float) reference.GetWeaponSpeed objectID:ref",
        "return": [
          "speed",
          "float"
        ],
        "params": [
          "reference.GetWeaponSpeed"
        ]
      }
    },
    {
      "name": "SetWeaponSpeed",
      "description": "sets the weapon speed",
      "example": {
        "raw": "SetWeaponSpeed - sets the weapon speed\n\n(nothing) reference.SetWeaponSpeed nuSpeed:float obejctID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetWeaponSpeed"
        ]
      }
    },
    {
      "name": "ModWeaponSpeed",
      "description": "modifies the weapon speed up or down",
      "example": {
        "raw": "ModWeaponSpeed - modifies the weapon speed up or down\n\n(nothing) reference.ModWeaponSpeed modifyBy:float obejctID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModWeaponSpeed"
        ]
      }
    },
    {
      "name": "GetIgnoresResistance",
      "description": "returns whether the object ignores normal damage resistance",
      "example": {
        "raw": "GetIgnoresResistance - returns whether the object ignores normal damage resistance\n\n(ignores:bool) reference.GetIgnoresResistance objectID:ref",
        "return": [
          "ignores",
          "bool"
        ],
        "params": [
          "reference.GetIgnoresResistance"
        ]
      }
    },
    {
      "name": "SetIgnoresResistance",
      "description": "sets whether the object ignores normal damage resistance",
      "example": {
        "raw": "SetIgnoresResistance - sets whether the object ignores normal damage resistance\n\n(nothing) reference.SetIgnoresResistance shouldIgnore:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIgnoresResistance"
        ]
      }
    },
    {
      "name": "GetOpenSound",
      "description": "Returns the \"open\" sound",
      "example": {
        "raw": "GetOpenSound - Returns the \"open\" sound\n\n(sound:ref) reference.GetOpenSound baseObject:ref",
        "return": [
          "sound",
          "ref"
        ],
        "params": [
          "reference.GetOpenSound"
        ]
      }
    },
    {
      "name": "GetCloseSound",
      "description": "Returns the \"close\" sound",
      "example": {
        "raw": "GetCloseSound - Returns the \"close\" sound\n\n(sound:ref) reference.GetCloseSound baseObject:ref",
        "return": [
          "sound",
          "ref"
        ],
        "params": [
          "reference.GetCloseSound"
        ]
      }
    },
    {
      "name": "GetLoopSound",
      "description": "Returns the looping sound",
      "example": {
        "raw": "GetLoopSound - Returns the looping sound\n\n(sound:ref) reference.GetLoopSound baseObject:ref",
        "return": [
          "sound",
          "ref"
        ],
        "params": [
          "reference.GetLoopSound"
        ]
      }
    },
    {
      "name": "SetOpenSound",
      "description": "Sets the \"open\" sound",
      "example": {
        "raw": "SetOpenSound - Sets the \"open\" sound\n\n(nothing) reference.SetOpenSound sound:ref baseObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetOpenSound"
        ]
      }
    },
    {
      "name": "SetCloseSound",
      "description": "Sets the \"close\" sound",
      "example": {
        "raw": "SetCloseSound - Sets the \"close\" sound\n\n(nothing) reference.SetCloseSound sound:ref baseObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCloseSound"
        ]
      }
    },
    {
      "name": "SetLoopSound",
      "description": "Sets the looping sound",
      "example": {
        "raw": "SetLoopSound - Sets the looping sound\n\n(nothing) reference.SetLoopSound sound:ref baseObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetLoopSound"
        ]
      }
    },
    {
      "name": "GetObjectHealth",
      "description": "returns the base object health",
      "example": {
        "raw": "GetObjectHealth - returns the base object health\n\n(health:int) reference.GetObjectHealth objectID:ref",
        "return": [
          "health",
          "int"
        ],
        "params": [
          "reference.GetObjectHealth"
        ]
      }
    },
    {
      "name": "SetObjectHealth",
      "description": "sets the base object health",
      "example": {
        "raw": "SetObjectHealth - sets the base object health\n\n(nothing) reference.SetObjectHealth nuHealth:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetObjectHealth"
        ]
      }
    },
    {
      "name": "ModObjectHealth",
      "description": "modifies the base object health up or down",
      "example": {
        "raw": "ModObjectHealth  - modifies the base object health up or down\n\n(nothing) reference.ModObjectHealth modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModObjectHealth"
        ]
      }
    },
    {
      "name": "GetCurrentHealth",
      "description": "returns the current health of the calling reference",
      "example": {
        "raw": "GetCurrentHealth - returns the current health of the calling reference\n\n(health:float) reference.GetCurrentHealth",
        "return": [
          "health",
          "float"
        ],
        "params": [
          "reference.GetCurrentHealth"
        ]
      }
    },
    {
      "name": "SetCurrentHealth",
      "description": "sets the current health of the calling reference",
      "example": {
        "raw": "SetCurrentHealth - sets the current health of the calling reference\n\n(nothing) reference.SetCurrentHealth nuHealth:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCurrentHealth"
        ]
      }
    },
    {
      "name": "GetEquippedCurrentHealth",
      "description": "gets the current health of the object in the specified equipment slot",
      "example": {
        "raw": "GetEquippedCurrentHealth -  gets the current health of the object in the specified equipment slot\n\n(health:float) reference.GetEquippedCurrentHealth slot:int",
        "return": [
          "health",
          "float"
        ],
        "params": [
          "reference.GetEquippedCurrentHealth"
        ]
      }
    },
    {
      "name": "SetEquippedCurrentHealth",
      "description": "sets the current health of the object in the specified equipment slot",
      "example": {
        "raw": "SetEquippedCurrentHealth - sets the current health of the object in the specified equipment slot\n\n(nothing) reference.SetEquippedCurrentHealth nuHealth:int slot:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetEquippedCurrentHealth"
        ]
      }
    },
    {
      "name": "ModEquippedCurrentHealth",
      "description": "modifies the current health of the object in the specified equipment slot up or down ",
      "example": {
        "raw": "ModEquippedCurrentHealth - modifies the current health of the object in the specified equipment slot up or down \n\n(nothing) reference.ModEquippedCurrentHealth modifyBy:float slot:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModEquippedCurrentHealth"
        ]
      }
    },
    {
      "name": "GetClass",
      "description": "returns the class of the NPC ",
      "example": {
        "raw": "GetClass - returns the class of the NPC \n\n(class:ref) reference.GetClass npc:ref",
        "return": [
          "class",
          "ref"
        ],
        "params": [
          "reference.GetClass"
        ]
      }
    },
    {
      "name": "GetClassAttribute",
      "description": "returns the Nth attribute of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.",
      "example": {
        "raw": "GetClassAttribute - returns the Nth attribute of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.\n\n(attribute:int) reference.GetClassAttribute whichAttribute:int class:ref",
        "return": [
          "attribute",
          "int"
        ],
        "params": [
          "reference.GetClassAttribute"
        ]
      }
    },
    {
      "name": "GetClassSkill",
      "description": "returns the Nth skill of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.",
      "example": {
        "raw": "GetClassSkill - returns the Nth skill of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.\n\n(skill:int) reference.GetClassSkill whichSkill:int class:ref",
        "return": [
          "skill",
          "int"
        ],
        "params": [
          "reference.GetClassSkill"
        ]
      }
    },
    {
      "name": "GetClassSpecialization",
      "description": "returns the class specialization. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.",
      "example": {
        "raw": "GetClassSpecialization - returns the class specialization. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.\n\n(specialization:int) reference.GetClassSpecialization class:ref",
        "return": [
          "specialization",
          "int"
        ],
        "params": [
          "reference.GetClassSpecialization"
        ]
      }
    },
    {
      "name": "IsClassSkill",
      "description": "returns whether the passed skill is a skill of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.",
      "example": {
        "raw": "IsClassSkill - returns whether the passed skill is a skill of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence.\n\n(isClassSkill:bool) reference.IsClassSkill skill:string class:ref\n\n(isClassSkill:bool) reference.IsMajor skill:string class:ref",
        "return": [
          "isClassSkill",
          "bool"
        ],
        "params": [
          "reference.IsClassSkill"
        ]
      }
    },
    {
      "name": "IsMajorRef",
      "description": "returns whether the passed skill is a skill of the class of the called on a reference.",
      "example": {
        "raw": "IsMajorRef - returns whether the passed skill is a skill of the class of the called on a reference.\n\n(isClassSkill:bool) reference.IsMajorRef skill:string",
        "return": [
          "isClassSkill",
          "bool"
        ],
        "params": [
          "reference.IsMajorRef"
        ]
      }
    },
    {
      "name": "IsClassSkillC",
      "description": "alternate version of IsClassSkill taking a skill code instead of the name of a skill.",
      "example": {
        "raw": "IsClassSkillC - alternate version of IsClassSkill taking a skill code instead of the name of a skill.\n\n(isClassSkill:bool) reference.IsClassSkillC skill:int class:ref\n\n(isClassSkill:bool) reference.IsMajorC skill:int class:ref",
        "return": [
          "isClassSkill",
          "bool"
        ],
        "params": [
          "reference.IsClassSkillC"
        ]
      }
    },
    {
      "name": "IsClassAttribute",
      "description": "returns whether the passed attribute is an attribute of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence. (available in v0011)",
      "example": {
        "raw": "IsClassAttribute - returns whether the passed attribute is an attribute of the class. If called on a reference it will attempt to find the class from that referenced NPC and use that. If a class FormID is passed, that takes precedence. (available in v0011)\n\n(isClassAttribute:bool) reference.IsClassAttribute attribute:int class:ref",
        "return": [
          "isClassAttribute",
          "bool"
        ],
        "params": [
          "reference.IsClassAttribute"
        ]
      }
    },
    {
      "name": "IsClassAttributeC",
      "description": "alternate version of ",
      "example": {
        "raw": "IsClassAttributeC - alternate version of IsClassAttribute taking an actor value code instead of the name of an actor value\n\n(isClassAttribute:bool) reference.IsClassAttributeC actorValueCode:int class:ref",
        "return": [
          "sClassAttribut"
        ],
        "params": []
      }
    },
    {
      "name": "GetClassSkills",
      "description": "returns an Array containing the seven major skills associated with the class. If the parameter is omitted, the class of the calling NPC is used.",
      "example": {
        "raw": "GetClassSkills - returns an Array containing the seven major skills associated with the class. If the parameter is omitted, the class of the calling NPC is used.\n\n(skills:Array) reference.GetClassSkills class:ref",
        "return": [
          "skills",
          "Array"
        ],
        "params": [
          "reference.GetClassSkills"
        ]
      }
    },
    {
      "name": "SetClassSkills",
      "description": "accepts an Array of seven different skill codes and sets them as the class's major skills. If fewer or more than seven skills are found in the array or duplicate skills are found, the function will return zero with no changes made to the class. If the class argument is omitted, the calling NPC's class is used.",
      "example": {
        "raw": "SetClassSkills - accepts an Array of seven different skill codes and sets them as the class's major skills. If fewer or more than seven skills are found in the array or duplicate skills are found, the function will return zero with no changes made to the class. If the class argument is omitted, the calling NPC's class is used.\n\n(bSkillsSet:bool) reference.SetClassSkills skills:Array class:ref",
        "return": [
          "bSkillsSet",
          "bool"
        ],
        "params": [
          "reference.SetClassSkills"
        ]
      }
    },
    {
      "name": "SetClassSkills2",
      "description": "Identical to SetClassSkills, except it allows duplicate skills.",
      "example": {
        "raw": "SetClassSkills2 - Identical to SetClassSkills, except it allows duplicate skills.\n\n(bSkillsSet:bool) reference.SetClassSkills2 skills:Array class:ref",
        "return": [
          "bSkillsSet",
          "bool"
        ],
        "params": [
          "reference.SetClassSkills2"
        ]
      }
    },
    {
      "name": "SetClassSpecialization",
      "description": "sets the class specialization. If the class argument is omitted thecalling NPC's class is used.",
      "example": {
        "raw": "SetClassSpecialization - sets the class specialization. If the class argument is omitted thecalling NPC's class is used.\n\n(nothing) reference.SetClassSpecialization specialization:int class:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetClassSpecialization"
        ]
      }
    },
    {
      "name": "SetClassAttribute",
      "description": "sets one of the two favored attributes for the class. Both class attributes must be unique. If the class argument is omitted the calling NPC's class is used.",
      "example": {
        "raw": "SetClassAttribute - sets one of the two favored attributes for the class. Both class attributes must be unique. If the class argument is omitted the calling NPC's class is used.\n\n(bAttributeSet:bool) reference.SetClassAttribute which:int attribute:string class:ref",
        "return": [
          "bAttributeSet",
          "bool"
        ],
        "params": [
          "reference.SetClassAttribute"
        ]
      }
    },
    {
      "name": "SetClassAttributeC",
      "description": "as SetClassAttribute but takes an actor value code instead of an actor value string.",
      "example": {
        "raw": "SetClassAttributeC - as SetClassAttribute but takes an actor value code instead of an actor value string.\n\n(bAttributeSet:bool) reference.SetClassAttributeC which:int attribute:int class:ref",
        "return": [
          "bAttributeSet",
          "bool"
        ],
        "params": [
          "reference.SetClassAttributeC"
        ]
      }
    },
    {
      "name": "GetNumItems",
      "description": "returns the number of different object types in the container or actor's inventory.",
      "example": {
        "raw": "GetNumItems - returns the number of different object types in the container or actor's inventory.\n\nNote: This function can be used to check if a container is empty.\n\nNote: Keep in mind that gold counts as an item.\n\n(count:int) reference.GetNumItems",
        "return": [
          "count",
          "int"
        ],
        "params": [
          "reference.GetNumItems"
        ]
      }
    },
    {
      "name": "GetInventoryObject",
      "description": "returns the objectID of the Nth item type in the container or actor's inventory",
      "example": {
        "raw": "GetInventoryObject - returns the objectID of the Nth item type in the container or actor's inventory\n\nNote: For most use cases, this function is deprecated. If you need to find all objects in a certain container, check out Inventory References.\n\n(objectID:ref) reference.GetInventoryObject whichObject:int",
        "return": [
          "objectID",
          "ref"
        ],
        "params": [
          "reference.GetInventoryObject"
        ]
      }
    },
    {
      "name": "IsContainer",
      "description": "returns whether the reference or passed objectID is a container.",
      "example": {
        "raw": "IsContainer - returns whether the reference or passed objectID is a container.\n\nNote: Actors do not count as containers.\n\n(isContainer:bool) reference.IsContainer objectID:ref",
        "return": [
          "isContainer",
          "bool"
        ],
        "params": [
          "reference.IsContainer"
        ]
      }
    },
    {
      "name": "GetContainerRespawns",
      "description": "returns whether the container's contents repawn.",
      "example": {
        "raw": "GetContainerRespawns - returns whether the container's contents repawn.\n\n(respawns:bool) reference.GetContainerRespawns objectID:ref\n\n(respawns:bool) reference.IsUnsafeRespawns objectID:ref",
        "return": [
          "respawns",
          "bool"
        ],
        "params": [
          "reference.GetContainerRespawns"
        ]
      }
    },
    {
      "name": "SetContainerRespawns",
      "description": "sets whether the container's contents respawn.",
      "example": {
        "raw": "SetContainerRespawns - sets whether the container's contents respawn.\n\nNote: This change is not persisted in the save game.\n\n(nothing) reference.SetContainerRespawns respawns:bool objectID:ref\n\n(nothing) reference.SetUnsafeContainer respawns:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetContainerRespawns"
        ]
      }
    },
    {
      "name": "GetItems",
      "description": "returns an Array containing all of the items in a container's or actor's inventory. Up to 10 form types may be passed in to restrict the returned items to only include items matching those type(s).",
      "example": {
        "raw": "GetItems - returns an Array containing all of the items in a container's or actor's inventory. Up to 10 form types may be passed in to restrict the returned items to only include items matching those type(s).\n\n(items:Array) reference.GetItems type1:int type2:int ... type10:int",
        "return": [
          "items",
          "Array"
        ],
        "params": [
          "reference.GetItems",
          "..."
        ]
      }
    },
    {
      "name": "GetBaseItems",
      "description": "returns an Array of StringMaps containing the items present in a base container or actor's inventory and the quantity of each. These are the items added to the base object in the editor and may include leveled items. Some, all, or none of the items may be present in the inventory of a specific reference to the base object. Each element of the returned Array is a StringMap with two elements:",
      "example": {
        "raw": "GetBaseItems - returns an Array of StringMaps containing the items present in a base container or actor's inventory and the quantity of each. These are the items added to the base object in the editor and may include leveled items. Some, all, or none of the items may be present in the inventory of a specific reference to the base object. Each element of the returned Array is a StringMap with two elements:\n\n\"item\"  : ref ; the item\n\n\"count\" : short ; the quantity of this item\n\n(items:Array) reference.GetBaseItems baseContainer:ref",
        "return": [
          "items",
          "Array"
        ],
        "params": [
          "reference.GetBaseItems"
        ]
      }
    },
    {
      "name": "GetDescription",
      "description": "returns the text of the description for the object. In the case of skills, an optional second parameter indicates the skill rank (0-3); if omitted, the skill's general description is returned.",
      "example": {
        "raw": "GetDescription - returns the text of the description for the object. In the case of skills, an optional second parameter indicates the skill rank (0-3); if omitted, the skill's general description is returned.\n\n(description:string) ref.GetDescription object:ref skillrank:int",
        "return": [
          "description",
          "string"
        ],
        "params": [
          "ref.GetDescription"
        ]
      }
    },
    {
      "name": "SetDescription",
      "description": "modifies the text of a TESDescription (e.g. book, class, skill, skill level, etc). The modified description will be used for the remainder of the game session. To modify the text displayed when achieving a new level of mastery (Apprentice, Journeyman, etc) in a skill, pass the skill as the second argument and a skill level as the third, where skill level ranges from 0 (Apprentice) to 3 (Master)",
      "example": {
        "raw": "SetDescription - modifies the text of a TESDescription (e.g. book, class, skill, skill level, etc). The modified description will be used for the remainder of the game session. To modify the text displayed when achieving a new level of mastery (Apprentice, Journeyman, etc) in a skill, pass the skill as the second argument and a skill level as the third, where skill level ranges from 0 (Apprentice) to 3 (Master)\n\nNote: Calling SetDescription on a skill while omitting the optional skillLevel argument sets the general description of the skill as well as all 4 mastery levels. Currently there is no way to only set the general skill description.\n\nNote: For books, setting a description longer than 65535 characters crashes the game when the book is opened in game. (TODO: Verify)\n\n(success:bool) reference.SetDescription description:string form:ref skillLevel:int",
        "return": [
          "etDescriptio"
        ],
        "params": []
      }
    },
    {
      "name": "IsFood",
      "description": "returns whether the object is considered to be food",
      "example": {
        "raw": "IsFood - returns whether the object is considered to be food\n\n(isFood:bool) reference.IsFood objectID:ref",
        "return": [
          "isFood",
          "bool"
        ],
        "params": [
          "reference.IsFood"
        ]
      }
    },
    {
      "name": "SetIsFood",
      "description": "sets whether the object is considered to be food",
      "example": {
        "raw": "SetIsFood - sets whether the object is considered to be food\n\n(nothing) reference.SetIsFood isFood:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsFood"
        ]
      }
    },
    {
      "name": "GetEnchantment",
      "description": "returns the specific enchantment on the object",
      "example": {
        "raw": "GetEnchantment - returns the specific enchantment on the object\n\n(enchantment:ref) reference.GetEnchantment objectID:ref",
        "return": [
          "enchantment",
          "ref"
        ],
        "params": [
          "reference.GetEnchantment"
        ]
      }
    },
    {
      "name": "SetEnchantment",
      "description": "sets the specific enchantment on the object and returns any previous enchantment",
      "example": {
        "raw": "SetEnchantment - sets the specific enchantment on the object and returns any previous enchantment\n\nNote: For equipped armor and clothing, the new enchantment will only take affect after the actor unequips and re-equips the item.\n\nNote: Changes to weapon enchantments occur immediately, but the shader will not update until the actor unequips and re-equips the weapon.\n\nNote: Doesn't work on arrows.\n\n(oldEnchantment:ref) reference.SetEnchantment nuEnchantment:ref objectID:ref",
        "return": [
          "oldEnchantment",
          "ref"
        ],
        "params": [
          "reference.SetEnchantment"
        ]
      }
    },
    {
      "name": "RemoveEnchantment",
      "description": "removes the enchantment from the object and returns any previous enchantment",
      "example": {
        "raw": "RemoveEnchantment - removes the enchantment from the object and returns any previous enchantment\n\n(oldEnchantment:ref) reference.RemoveEnchantment objectID:ref",
        "return": [
          "oldEnchantment",
          "ref"
        ],
        "params": [
          "reference.RemoveEnchantment"
        ]
      }
    },
    {
      "name": "GetObjectCharge",
      "description": "returns the max charge of the object",
      "example": {
        "raw": "GetObjectCharge - returns the max charge of the object\n\n(charge:int) reference.GetObjectCharge objectID:ref",
        "return": [
          "charge",
          "int"
        ],
        "params": [
          "reference.GetObjectCharge"
        ]
      }
    },
    {
      "name": "SetObjectCharge",
      "description": "sets the max charge of the object",
      "example": {
        "raw": "SetObjectCharge - sets the max charge of the object\n\n(nothing) reference.SetObjectCharge nuCharge:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetObjectCharge"
        ]
      }
    },
    {
      "name": "ModObjectCharge",
      "description": "modifies the max charge of the object up or down",
      "example": {
        "raw": "ModObjectCharge - modifies the max charge of the object up or down\n\n(nothing) reference.ModObjectCharge modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModObjectCharge"
        ]
      }
    },
    {
      "name": "GetCurrentCharge",
      "description": "returns the current charge of the calling reference",
      "example": {
        "raw": "GetCurrentCharge - returns the current charge of the calling reference\n\n(charge:float) reference.GetCurrentCharge",
        "return": [
          "charge",
          "float"
        ],
        "params": [
          "reference.GetCurrentCharge"
        ]
      }
    },
    {
      "name": "GetEquippedCurrentCharge",
      "description": "returns the current charge of the object in the specified slot",
      "example": {
        "raw": "GetEquippedCurrentCharge - returns the current charge of the object in the specified slot\n\n(charge:float) reference.GetEquippedCurrentCharge slot:int",
        "return": [
          "charge",
          "float"
        ],
        "params": [
          "reference.GetEquippedCurrentCharge"
        ]
      }
    },
    {
      "name": "SetEquippedCurrentCharge",
      "description": "sets the current charge of the object in the specified slot",
      "example": {
        "raw": "SetEquippedCurrentCharge - sets the current charge of the object in the specified slot\n\n(nothing) reference.SetEquippedCurrentCharge nuCharge:int slot:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetEquippedCurrentCharge"
        ]
      }
    },
    {
      "name": "ModEquippedCurrentCharge",
      "description": "modifies the current charge of the object in the specified slot up or down",
      "example": {
        "raw": "ModEquippedCurrentCharge - modifies the current charge of the object in the specified slot up or down\n\n(nothing) reference.ModEquippedCurrentCharge modifyBy:float slot:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModEquippedCurrentCharge"
        ]
      }
    },
    {
      "name": "SetCurrentCharge",
      "description": "sets the current charge of the calling reference if it is less than or equal to the maximum charge",
      "example": {
        "raw": "SetCurrentCharge - sets the current charge of the calling reference if it is less than or equal to the maximum charge\n\n(nothing) reference.SetCurrentCharge newCharge:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCurrentCharge"
        ]
      }
    },
    {
      "name": "ModCurrentCharge",
      "description": "modifies the current charge of the calling reference by the specified amount. Will not modify the charge past its maximum or below zero.",
      "example": {
        "raw": "ModCurrentCharge - modifies the current charge of the calling reference by the specified amount. Will not modify the charge past its maximum or below zero.\n\n(nothing) reference.ModCurrentCharge modBy:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModCurrentCharge"
        ]
      }
    },
    {
      "name": "GetEquipmentSlot",
      "description": "returns the equipment slot or slots taken by the object",
      "example": {
        "raw": "GetEquipmentSlot - returns the equipment slot or slots taken by the object\n\nNote: For multiple-slot items, use GetBipedSlotMask to determine which slots are covered by the item.\n\n(slot:int) reference.GetEquipentSlot objectID:ref",
        "return": [
          "etBipedSlotMas"
        ],
        "params": []
      }
    },
    {
      "name": "SetEquipmentSlot",
      "description": "sets the equipment slot or slots taken by the object.",
      "example": {
        "raw": "SetEquipmentSlot - sets the equipment slot or slots taken by the object.\n\nNote: If you need to set a slot combination not covered by the possible values, use SetBipedSlotMask instead.\n\n(nothing) reference.SetEquipmentSlot slot:int objectID:ref",
        "return": [
          "etBipedSlotMas"
        ],
        "params": []
      }
    },
    {
      "name": "EquipMe",
      "description": "when called on an object in an actor's inventory, attempts to equip the object on the actor and runs the object's ",
      "example": {
        "raw": "EquipMe - when called on an object in an actor's inventory, attempts to equip the object on the actor and runs the object's OnEquip script block if applicable. If called on an inventory reference with a count greater than one, equips only one unless the item is a stack of arrows, in which case the entire stack is equipped.\n\nNote: This function will not work on non-playable items. (TODO: Verify. Also not on NPCs?)\n\n(nothing) ref.EquipMe",
        "return": [
          "nEqui"
        ],
        "params": []
      }
    },
    {
      "name": "UnequipMe",
      "description": "when called on an object in an actor's inventory, attempts to unequip the object on the actor and runs the object's ",
      "example": {
        "raw": "UnequipMe - when called on an object in an actor's inventory, attempts to unequip the object on the actor and runs the object's OnUnequip script block if applicable\n\n(nothing) ref.UnequipMe",
        "return": [
          "nUnequi"
        ],
        "params": []
      }
    },
    {
      "name": "GetBaseObject",
      "description": "returns the base object of the reference.",
      "example": {
        "raw": "GetBaseObject - returns the base object of the reference.\n\nNote: If Ref is a base object already, then calling BaseObjectRef.GetBaseObject will halt the script (quest scripts will show as still running but won't execute any more). (TODO: Verify)\n\n(objectID:ref) reference.GetBaseObject",
        "return": [
          "objectID",
          "ref"
        ],
        "params": [
          "reference.GetBaseObject"
        ]
      }
    },
    {
      "name": "GetObjectType",
      "description": "returns a type code for each type of object.",
      "example": {
        "raw": "GetObjectType - returns a type code for each type of object.\n\n(type:int) reference.GetObjectType objectID:ref",
        "return": [
          "type",
          "int"
        ],
        "params": [
          "reference.GetObjectType"
        ]
      }
    },
    {
      "name": "IsWeapon",
      "description": "returns whether the object is a weapon.",
      "example": {
        "raw": "IsWeapon - returns whether the object is a weapon.\n\n(isWeapon:bool) reference.IsWeapon objectID:ref",
        "return": [
          "isWeapon",
          "bool"
        ],
        "params": [
          "reference.IsWeapon"
        ]
      }
    },
    {
      "name": "IsAmmo",
      "description": "returns whether the object is ammunition.",
      "example": {
        "raw": "IsAmmo - returns whether the object is ammunition.\n\n(isAmmo:bool) reference.IsAmmo objectID:ref",
        "return": [
          "isAmmo",
          "bool"
        ],
        "params": [
          "reference.IsAmmo"
        ]
      }
    },
    {
      "name": "IsArmor",
      "description": "returns whether the object is armor.",
      "example": {
        "raw": "IsArmor - returns whether the object is armor.\n\n(isArmor:bool) reference.IsArmor objectID:ref",
        "return": [
          "isArmor",
          "bool"
        ],
        "params": [
          "reference.IsArmor"
        ]
      }
    },
    {
      "name": "IsBook",
      "description": "returns whether the object is a book.",
      "example": {
        "raw": "IsBook - returns whether the object is a book.\n\n(isBook:bool) reference.IsBook objectID:ref",
        "return": [
          "isBook",
          "bool"
        ],
        "params": [
          "reference.IsBook"
        ]
      }
    },
    {
      "name": "IsClothing",
      "description": "returns whether the object is clothing.",
      "example": {
        "raw": "IsClothing - returns whether the object is clothing.\n\n(isClothing:bool) reference.IsClothing objectID:ref",
        "return": [
          "isClothing",
          "bool"
        ],
        "params": [
          "reference.IsClothing"
        ]
      }
    },
    {
      "name": "IsIngredient",
      "description": "returns whether the object is an ingredient.",
      "example": {
        "raw": "IsIngredient - returns whether the object is an ingredient.\n\n(isIngredient:bool) reference.IsIngredient objectID:ref",
        "return": [
          "isIngredient",
          "bool"
        ],
        "params": [
          "reference.IsIngredient"
        ]
      }
    },
    {
      "name": "IsKey",
      "description": "returns whether the object is a key.",
      "example": {
        "raw": "IsKey - returns whether the object is a key.\n\n(isKey:bool) reference.IsKey objectID:ref",
        "return": [
          "isKey",
          "bool"
        ],
        "params": [
          "reference.IsKey"
        ]
      }
    },
    {
      "name": "IsAlchemyItem",
      "description": "returns whether the object is an alchemy item (potion).",
      "example": {
        "raw": "IsAlchemyItem - returns whether the object is an alchemy item (potion).\n\n(isAlchemyItem:bool) reference.IsAlchemyItem objectID:ref\n\n(isPotion:bool) reference.IsPotion objectID:ref",
        "return": [
          "isAlchemyItem",
          "bool"
        ],
        "params": [
          "reference.IsAlchemyItem"
        ]
      }
    },
    {
      "name": "IsApparatus",
      "description": "returns whether the object is an alchemy apparatus.",
      "example": {
        "raw": "IsApparatus - returns whether the object is an alchemy apparatus.\n\n(isApparatus:bool) reference.IsApparatus objectID:ref",
        "return": [
          "isApparatus",
          "bool"
        ],
        "params": [
          "reference.IsApparatus"
        ]
      }
    },
    {
      "name": "IsSoulGem",
      "description": "returns whether the object is a soul gem.",
      "example": {
        "raw": "IsSoulGem - returns whether the object is a soul gem.\n\n(isSoulGem:bool) reference.IsSoulGem objectID:ref",
        "return": [
          "isSoulGem",
          "bool"
        ],
        "params": [
          "reference.IsSoulGem"
        ]
      }
    },
    {
      "name": "IsSigilStone",
      "description": "returns whether the object is a sigil stone.",
      "example": {
        "raw": "IsSigilStone - returns whether the object is a sigil stone.\n\n(isSigilStone:bool) reference.IsSigilStone objectID:ref",
        "return": [
          "isSigilStone",
          "bool"
        ],
        "params": [
          "reference.IsSigilStone"
        ]
      }
    },
    {
      "name": "IsMiscItem",
      "description": "returns whether the object is a miscellaneous item.",
      "example": {
        "raw": "IsMiscItem - returns whether the object is a miscellaneous item.\n\n(isMiscItem:bool) reference.IsMiscItem objectID:ref\n\n(isMisc:bool) reference.IsMisc objectID:ref",
        "return": [
          "isMiscItem",
          "bool"
        ],
        "params": [
          "reference.IsMiscItem"
        ]
      }
    },
    {
      "name": "IsLight",
      "description": "returns whether the object is a light source.",
      "example": {
        "raw": "IsLight - returns whether the object is a light source.\n\n(isLight:bool) reference.IsLight objectID:ref",
        "return": [
          "isLight",
          "bool"
        ],
        "params": [
          "reference.IsLight"
        ]
      }
    },
    {
      "name": "IsFlora",
      "description": "returns 1 if the object is a harvestable plant.",
      "example": {
        "raw": "IsFlora - returns 1 if the object is a harvestable plant.\n\n(isFlora:bool) reference.IsFlora objectID:ref",
        "return": [
          "isFlora",
          "bool"
        ],
        "params": [
          "reference.IsFlora"
        ]
      }
    },
    {
      "name": "GetWeight",
      "description": "returns the weight of the type.",
      "example": {
        "raw": "GetWeight - returns the weight of the type.\n\n(weight:float) reference.GetWeight objectID:ref",
        "return": [
          "weight",
          "float"
        ],
        "params": [
          "reference.GetWeight"
        ]
      }
    },
    {
      "name": "SetWeight",
      "description": "sets the weight of the type.",
      "example": {
        "raw": "SetWeight - sets the weight of the type.\n\nNote: If you change the weight of an item while the player has it in their inventory, their encumbrance won't be updated automatically. They have to pick up another item, or you can add/remove another item to force an update.\n\n(nothing) reference.SetWeight nuWeight:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetWeight"
        ]
      }
    },
    {
      "name": "ModWeight",
      "description": "modifies the weight of the type up or down.",
      "example": {
        "raw": "ModWeight - modifies the weight of the type up or down.\n\n(nothing) reference.ModWeight modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModWeight"
        ]
      }
    },
    {
      "name": "GetGoldValue",
      "description": "returns the base gold value of the type.",
      "example": {
        "raw": "GetGoldValue - returns the base gold value of the type.\n\n(goldValue:int) reference.GetGoldValue objectID:ref",
        "return": [
          "goldValue",
          "int"
        ],
        "params": [
          "reference.GetGoldValue"
        ]
      }
    },
    {
      "name": "GetFullGoldValue",
      "description": "returns the full gold value of an item, including the value added by enchantments.",
      "example": {
        "raw": "GetFullGoldValue - returns the full gold value of an item, including the value added by enchantments.\n\n(goldValue:int) reference.GetFullGoldValue objectID:ref",
        "return": [
          "goldValue",
          "int"
        ],
        "params": [
          "reference.GetFullGoldValue"
        ]
      }
    },
    {
      "name": "SetGoldValue",
      "description": "sets the base gold value of the type.",
      "example": {
        "raw": "SetGoldValue - sets the base gold value of the type.\n\n(nothing) reference.SetGoldValue nuGoldValue:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetGoldValue"
        ]
      }
    },
    {
      "name": "ModGoldValue",
      "description": "modifies the base gold value of the type up or down.",
      "example": {
        "raw": "ModGoldValue - modifies the base gold value of the type up or down.\n\n(nothing) reference.ModGoldValue modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModGoldValue"
        ]
      }
    },
    {
      "name": "IsQuestItem",
      "description": "returns whether the type is a quest item.",
      "example": {
        "raw": "IsQuestItem - returns whether the type is a quest item.\n\n(isQuestItem:bool) reference.IsQuestItem objectID:ref",
        "return": [
          "isQuestItem",
          "bool"
        ],
        "params": [
          "reference.IsQuestItem"
        ]
      }
    },
    {
      "name": "SetQuestItem",
      "description": "sets whether the type is a quest item.",
      "example": {
        "raw": "SetQuestItem - sets whether the type is a quest item.\n\n(nothing) reference.SetQuestItem isQuestItem:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetQuestItem"
        ]
      }
    },
    {
      "name": "SetCurrentSoulLevel",
      "description": "sets the current soul level of the calling soulgem reference.",
      "example": {
        "raw": "SetCurrentSoulLevel - sets the current soul level of the calling soulgem reference.\n\n(nothing) reference.SetCurrentSoulLevel newLevel:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCurrentSoulLevel"
        ]
      }
    },
    {
      "name": "GetOpenKey",
      "description": "returns the key used to unlock the calling reference.",
      "example": {
        "raw": "GetOpenKey - returns the key used to unlock the calling reference.\n\nNote: The key reference is only set on one side of the door. If a reference isn't returned, then check its linked door with GetLinkedDoor. (TODO: Verify, request)\n\n(key:ref) reference.GetOpenKey",
        "return": [
          "etLinkedDoo"
        ],
        "params": []
      }
    },
    {
      "name": "SetOpenKey",
      "description": "sets the key used to unlock the reference to the specified key.",
      "example": {
        "raw": "SetOpenKey - sets the key used to unlock the reference to the specified key.\n\nNote: Normally, doors only have the key set on one side of the door. Setting the key on both sides of a linked door may produce odd results, so use with caution and check the other side of the door first with GetLinkedDoor.\n\n(nothing) reference.SetOpenKey key:ref",
        "return": [
          "etLinkedDoo"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicItemType",
      "description": "returns the magic item type.",
      "example": {
        "raw": "GetMagicItemType - returns the magic item type.\n\n(magicItemType:int) GetMagicItemType magicItem:ref\n\n(magicItemType:int) GetMIType magicItem:ref",
        "return": [
          "magicItemType",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicItemEffectCount",
      "description": "returns the number of magic effect items.",
      "example": {
        "raw": "GetMagicItemEffectCount -  returns the number of magic effect items.\n\n(count:int) GetMagicItemEffectCount magicItem:ref\n\n(count:int) GetMIEffectCount magicItem:ref",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "MagicItemHasEffect",
      "description": "returns whether the magic item has an effect item with the specifed effect. Uses the 4 letter codes for the magic effects listed in the CS. Uses an optional actor value name for use with effects like fortify skill and fortify attribute.",
      "example": {
        "raw": "MagicItemHasEffect - returns whether the magic item has an effect item with the specifed effect. Uses the 4 letter codes for the magic effects listed in the CS. Uses an optional actor value name for use with effects like fortify skill and fortify attribute.\n\n(hasEffect:bool) MagicItemHasEffect effect:chars magicItem:ref actorValue:chars\n\n(hasEffect:bool) MagicHasEffect effect:chars magicItem:ref actorValue:chars",
        "return": [
          "hasEffect",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicItemHasEffectCode",
      "description": "returns whether the magic item has an effect item with the specified effect code. Uses a long value returned from ",
      "example": {
        "raw": "MagicItemHasEffectCode - returns whether the magic item has an effect item with the specified effect code. Uses a long value returned from GetNthEffectItemCode or GetMagicEffectCode. Uses an optional actor value code for use with effects like fortify skill and fortify attribute.\n\n(hasEffect:bool) MagicItemHasEffectCode effectCode:int magicItem:ref actorValueCode:int\n\n(hasEffect:bool) MagicHasEffectC effectCode:int magicItem:ref  actorValueCode:int",
        "return": [
          "etNthEffectItemCod"
        ],
        "params": []
      }
    },
    {
      "name": "MagicItemHasEffectCount",
      "description": "returns the count of the specified effects on the magic item. Has an optional actorValue name for use with effects like fortify skill and fortify attribute.",
      "example": {
        "raw": "MagicItemHasEffectCount - returns the count of the specified effects on the magic item. Has an optional actorValue name for use with effects like fortify skill and fortify attribute.\n\n(effectCount:int) MagicItemHasEffectCount effect:chars magicItem:ref actorValueName:chars",
        "return": [
          "effectCount",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "MagicItemHasEffectCountCode",
      "description": "returns the count of effects with the specified effect code on the magic item. Uses a long value returned from ",
      "example": {
        "raw": "MagicItemHasEffectCountCode -  returns the count of effects with the specified effect code on the magic item. Uses a long value returned from GetNthEffectItemCode or GetMagicEffectCode. Has an optional actorValueCode for use with effects like fortify skill and fortify attribute.\n\n(effectCount:int) MagicItemHasEffectCountCode effectCode:int magicItem:ref actorValueCode:int\n\n(effectCount:int) MagicItemHasEffectCountC effectCode:int magicItem:ref actorValueCode:int",
        "return": [
          "etNthEffectItemCod"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemCode",
      "description": "returns the magic effect code of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemCode - returns the magic effect code of the specified effect item.\n\n(code:int) GetNthEffectItemCode magicItem:ref whichEffect:int\n\n(code:int) GetNthEICode magicItem:ref whichEffect:int",
        "return": [
          "code",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemMagnitude",
      "description": "returns the magnitude of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemMagnitude - returns the magnitude of the specified effect item.\n\nNote: Some magic effects will return a negative magnitude, even if the magnitude is unmodified. Frost Damage is confimed to return a negative magnitude.\n\n(magnitude:int) GetNthEffectItemMagnitude magicItem:ref whichEffect:int\n\n(magnitude:int) GetNthEIMagnitude magicItem:ref whichEffect:int",
        "return": [
          "magnitude",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemMagnitude",
      "description": "sets the magnitude of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemMagnitude - sets the magnitude of the specified effect item.\n\nNote: You can set the magnitude of a spell to a negative number. The spell will have the opposite effect. Results may vary depending on the spell effect and are not verified.\n\nNote: Frost Damage is confirmed to heal when set to a reversed magnitude, but note that an unmodified Frost Damage magnitude returns a negative number from GetNthEffectItemMagnitude, so setting it to a negative value will still deal damage. To make a Frost Damage effect heal, you must set it to a positive magnitude. This is believed to be true for Fire Damage and Shock Damage as well) (TODO: Verify).\n\n(nothing) SetNthEffectItemMagnitude nuMagnitude:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEIMagnitude nuMagnitude:int magicItem:ref whichEffect:int",
        "return": [
          "etNthEffectItemMagnitud"
        ],
        "params": []
      }
    },
    {
      "name": "ModNthEffectItemMagnitude",
      "description": "modifies the magnitude of the specified effect item up or down.",
      "example": {
        "raw": "ModNthEffectItemMagnitude - modifies the magnitude of the specified effect item up or down.\n\n(nothing) ModNthEffectItemMagnitude modifyBy:float magicItem:ref whichEffect:int\n\n(nothing) ModNthEIMagnitude modifyBy:float magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemArea",
      "description": "returns the area of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemArea - returns the area of the specified effect item.\n\n(area:int) GetNthEffectItemArea magicItem:ref whichEffect:int\n\n(area:int) GetNthEIArea magicItem:ref whichEffect:int",
        "return": [
          "area",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemArea",
      "description": "sets the area of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemArea - sets the area of the specified effect item.\n\n(nothing) SetNthEffectItemArea nuArea:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEIArea nuArea:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModNthEffectItemArea",
      "description": "modifies the effect area of the specified effect item up or down.",
      "example": {
        "raw": "ModNthEffectItemArea - modifies the effect area of the specified effect item up or down.\n\n(nothing) ModNthEffectItemArea modifyBy:float magicItem:ref whichEffect:int\n\n(nothing) ModNthEIArea modifyBy:float magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemDuration",
      "description": "returns the duration of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemDuration - returns the duration of the specified effect item.\n\n(duration:int) GetNthEffectItemDuration magicItem:ref whichEffect:int\n\n(duration:int) GetNthEIDuration magicItem:ref whichEffect:int",
        "return": [
          "duration",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemDuration",
      "description": "sets the duration of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemDuration - sets the duration of the specified effect item.\n\nNote: It is not recommended to set the duration to negative values. A normal spell has no effect, while a scripted spell will still run. If cast on the player, the spell icon(s) will briefly apear.\n\n(nothing) SetNthEffectItemDuration nuDuration:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEIDuration nuDuration:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModNthEffectItemDuration",
      "description": "modifies the duration of the specified effect item up or down.",
      "example": {
        "raw": "ModNthEffectItemDuration - modifies the duration of the specified effect item up or down.\n\n(nothing) ModNthEffectItemDuration modifyBy:float magicItem:ref whichEffect:int\n\n(nothing) ModNthEIDuration modifyBy:float magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemRange",
      "description": "gets the range of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemRange - gets the range of the specified effect item.\n\n(range:int) GetNthEffectItemrange magicItem:ref whichEffect:int\n\n(range:int) GetNthEIRange magicItem:ref whichEffect:int",
        "return": [
          "range",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemRange",
      "description": "sets the range of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemRange - sets the range of the specified effect item.\n\nNote: If you set the range of a weapon enchantment item (which are always 1:Touch ranged in the CS) to 0:Self, the effect will apply as a Self-ranged effect, but will still be listed as 'On Strike' in the game UI. The effect will still only trigger on a successful hit with the weapon, and will not work as a constant effect.\n\n(nothing) SetNthEffectItemRange nuRange:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEIRange nuRange:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemActorValue",
      "description": "gets the actor value of the specified effect item.",
      "example": {
        "raw": "GetNthEffectItemActorValue - gets the actor value of the specified effect item.\n\n(actorValueCode:int) GetNthEffectItemActorValue magicItem:ref whichEffect:int\n\n(actorValueCode:int) GetNthEIAV magicItem:ref whichEffect:int",
        "return": [
          "actorValueCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemActorValue",
      "description": "sets the actor value of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemActorValue - sets the actor value of the specified effect item.\n\n(nothing) SetNthEffectItemActorValue actorValue:string magicItem:ref whichEffect:int\n\n(nothing) SetNthEIAV actorValue:string magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemActorValueC",
      "description": "sets the actor value of the specified effect item.",
      "example": {
        "raw": "SetNthEffectItemActorValueC - sets the actor value of the specified effect item.\n\n(nothing) SetNthEffectItemActorValueC nuActorValue:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEIAVC nuActorValue:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveNthEffectItem",
      "description": "removesthe specified effect item.",
      "example": {
        "raw": "RemoveNthEffectItem - removesthe specified effect item.\n\nNote: If a hostile effect is removed from a Spell so that it does not have any left, the Spell will not automatically become non-hostile. Use SetSpellHostile to update the hostility.\n\n(nothing) RemoveNthEffectItem magicItem:ref whichEffect:int\n\n(nothing) RemoveNthEffect magicItem:ref whichEffect:int",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveAllEffectItems",
      "description": "removes all effect items from the magic item.",
      "example": {
        "raw": "RemoveAllEffectItems - removes all effect items from the magic item.\n\nNote: If a hostile effect is removed from a Spell so that it does not have any left, the Spell will not automatically become non-hostile. Use SetSpellHostile to update the hostility.\n\n(nothing) RemoveAllEffectItems magicItem:ref",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "CopyNthEffectItem",
      "description": "copies the specified effect item from one magic item to another.",
      "example": {
        "raw": "CopyNthEffectItem - copies the specified effect item from one magic item to another.\n\nNote: When copying a scripted effect, the script, hostility flag, and school will copy, but not the visuals. Copied scripted effects are completely independent of the original scripted effect. \n\nNote: Adding a hostile effect to a Spell which previously had none will not make the Spell hostile. Use SetSpellHostile to update the hostility.\n\nNote: Effects will be added to copied-to magic item, even if that effect is already on the magic item, possibly resulting in two (or more) of the same effects.\n\n(index:int) CopyNthEffectItem fromObjectID:ref toObjectID:ref whichEffect:int",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "CopyAllEffectItems",
      "description": "copies all effect items from one magic item to another.",
      "example": {
        "raw": "CopyAllEffectItems - copies all effect items from one magic item to another.\n\nNote: When copying a scripted effect, the script, hostility flag, and school will copy, but not the visuals. Copied scripted effects are completely independent of the original scripted effect. \n\nNote: Adding a hostile effect to a Spell which previously had none will not make the Spell hostile. Use SetSpellHostile to update the hostility.\n\nNote: Effects will be added to copied-to magic item, even if that effect is already on the magic item, possibly resulting in two (or more) of the same effects.\n\n(nothing) CopyAllEffectItems fromObjectID:ref toObjectId:ref",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "AddEffectItem",
      "description": "adds a basic, empty EffectItem of the specified MagicEffect to the magic item.",
      "example": {
        "raw": "AddEffectItem - adds a basic, empty EffectItem of the specified MagicEffect to the magic item.\n\nNote: Adding a hostile effect to a Spell which previously had none will not make the Spell hostile. Use SetSpellHostile to update the hostility.\n\n(index:int) AddEffectItem nuEffect:chars magicItem:ref\n\n(index:int) AddEffectItemC nuEffectCode:int magicItem:ref",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "AddFullEffectItem",
      "description": "adds a fully defined EffectItem to the magic item with the specified MagicEffect, magnitude, area, duration and range.",
      "example": {
        "raw": "AddFullEffectItem - adds a fully defined EffectItem to the magic item with the specified MagicEffect, magnitude, area, duration and range.\n\nNote: Adding a hostile effect to a Spell which previously had none will not make the Spell hostile. Use SetSpellHostile to update the hostility.\n\n(index:int) AddFullEffectItem nuEffect:chars magnitude:int area:int duration:int range:int magicItem:ref\n\n(index:int) AddFullEffectItemC nuEffectCode:int magnitude:int area:int duration:int range:int magicItem:ref",
        "return": [
          "etSpellHostil"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicItemAutoCalc",
      "description": "returns 1 if the MagicItem determines magicka cost by autocalculation. Now works on all Magic Items (Spells, Alchemy, Ingredients, Enchantments).",
      "example": {
        "raw": "IsMagicItemAutoCalc - returns 1 if the MagicItem determines magicka cost by autocalculation. Now works on all Magic Items (Spells, Alchemy, Ingredients, Enchantments).\n\n(isAutocalc:bool) IsMagicItemAutoCalc magicItem:ref",
        "return": [
          "isAutocalc",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetMagicItemAutoCalc",
      "description": "sets whether the Magic Item determines cost by autocalculation. Currently works for Spells, AlchemyItems, Ingredients and Enchantments.",
      "example": {
        "raw": "SetMagicItemAutoCalc - sets whether the Magic Item determines cost by autocalculation. Currently works for Spells, AlchemyItems, Ingredients and Enchantments.\n\n(nothing) SetMagicItemAutoCalc isAutocalc:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsNthEffectItemScripted",
      "description": "returns whether the specified effect item is scripted.",
      "example": {
        "raw": "IsNthEffectItemScripted - returns whether the specified effect item is scripted.\n\nNote: This will return true if the effect is a scripted effect, even if no script has been attached to the effect. Use GetNthEffectItemScript to determine if there is a script on the effect.\n\n(isScriptEffect:bool) IsNthEffectItemScripted magicItem:ref whichEffect:int",
        "return": [
          "etNthEffectItemScrip"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemScript",
      "description": "returns the refID of the script associated with the specified scripted effect.",
      "example": {
        "raw": "GetNthEffectItemScript - returns the refID of the script associated with the specified scripted effect.\n\n(script:ref) GetNthEffectItemScript objectID:ref whichEffect:int\n\n(script:ref) GetNthEIScript objectID:ref whichEffect:int",
        "return": [
          "script",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScript",
      "description": "sets the script for the specified scripted effect item. Note that the CS doesn't have a variable type for a script, so you must assign the script editor id to a ref variable to use this function.",
      "example": {
        "raw": "SetNthEffectItemScript - sets the script for the specified scripted effect item. Note that the CS doesn't have a variable type for a script, so you must assign the script editor id to a ref variable to use this function.\n\n(nothing) SetNthEffectItemScript scriptObjectID:ref magicItem:ref whichEffect:int\n\n(nothing) SetNthEIScript scriptObjectID:ref magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemScriptVisualEffect",
      "description": "returns the magic effect code for the scripted effect item's visual effect.",
      "example": {
        "raw": "GetNthEffectItemScriptVisualEffect - returns the magic effect code for the scripted effect item's visual effect.\n\n(magicEffectCode:int) GetNthEffectItemScriptVisualEffect magicItem:ref whichEffect:int\n\n(magicEffectCode:int) GetNthEISVisualEffect magicItem:ref whichEffect:int",
        "return": [
          "magicEffectCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScriptVisualEffect",
      "description": "sets the scrited effect item's visual effect.",
      "example": {
        "raw": "SetNthEffectItemScriptVisualEffect - sets the scrited effect item's visual effect.\n\n(nothing) SetNthEffectItemScriptVisualEffect magicEffect:chars magicItem:ref whichEffect:int\n\n(nothing) SetNthEISVisualEffect magicEffect:chars magicItem:ref whichEffect:int\n\n(nothing) SetNthEffectItemScriptVisualEffectC magicEffectCode:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEISVisualEffectC magicEffectCode:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemScriptSchool",
      "description": "returns the school of the scripted effect item.",
      "example": {
        "raw": "GetNthEffectItemScriptSchool - returns the school of the scripted effect item.\n\n(magicSchool:int) GetNthEffectItemScriptSchool magicItem:ref whichEffect:int\n\n(magicSchool:int) GetNthEISSchool magicItem:ref whichEffect:int",
        "return": [
          "magicSchool",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScriptSchool",
      "description": "sets the school of the scripted effect item.",
      "example": {
        "raw": "SetNthEffectItemScriptSchool - sets the school of the scripted effect item.\n\n(nothing) SetNthEffectItemScriptSchool magicSchool:int magicItem:ref whichEffect:int\n\n(nothing) SetNthEISSchool magicSchool:int magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsNthEffectItemScriptHostile",
      "description": "returns whether the scripted effect is hostile.",
      "example": {
        "raw": "IsNthEffectItemScriptHostile - returns whether the scripted effect is hostile.\n\n(isHostile:bool) IsNthEffectItemScriptHostile magicItem:ref whichEffect:int\n\n(isHostile:bool) IsNthEISHostile magicItem:ref whichEffect:int",
        "return": [
          "isHostile",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScriptHostile",
      "description": "sets whether the scripted effect is hostile.",
      "example": {
        "raw": "SetNthEffectItemScriptHostile - sets whether the scripted effect is hostile.\n\n(nothing) SetNthEffectItemScriptHostile isHostile:bool magicItem:ref whichEffect:int\n\n(nothing) SetNthEISHostile isHostile:bool magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemScriptName",
      "description": "returns the name of the nth effect item, provided that effect item is a script effect.",
      "example": {
        "raw": "GetNthEffectItemScriptName - returns the name of the nth effect item, provided that effect item is a script effect.\n\n(name:string_var) GetNthEffectItemScriptName magicItem:ref whichEffect:int",
        "return": [
          "name",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScriptName",
      "description": "sets the name of the scripted effect.",
      "example": {
        "raw": "SetNthEffectItemScriptName - sets the name of the scripted effect.\n\n(nothing) SetNthEffectItemScriptName name:string magicItem:ref whichEffect:int\n\n(nothing) SetNthEISName name:string magicItem:ref whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthEffectItemScriptNameEX",
      "description": "sets the name of the scripted effect.",
      "example": {
        "raw": "SetNthEffectItemScriptNameEX - sets the name of the scripted effect.\n\n(nothing)SetNthEffectItemScriptNameEX name:formatString magicItem:ref whichEffect:int",
        "return": [
          "nothing)SetNthEffectItemScriptNameE"
        ],
        "params": []
      }
    },
    {
      "name": "ModNthEffectItemScriptName",
      "description": "modifies the name of the scripted effect. The ",
      "example": {
        "raw": "ModNthEffectItemScriptName - modifies the name of the scripted effect. The toReplaceAndReplaceWith string has the following format: \"toReplace|replaceWith\". We will do a case insensitve search for the toReplace portion and if found will replace it with the replaceWith portion. The | character is used to separate the portions of the string. If there is nothing before the | character, the replaceWith string is prepended to the name. If called from the console, use @ instead of |.\n\n(nothing) ModNthEffectItemScriptName toReplaceAndReplaceWith:string magicItem:ref whichEffect:int\n\n(nothing) ModNthEISName toReplaceAndReplaceWith:string magicItem:ref whichEffect:int",
        "return": [
          "oReplaceAndReplaceWit"
        ],
        "params": []
      }
    },
    {
      "name": "MagicItemHasEffectItemScript",
      "description": "returns 1 if the magic effect has a scripted item with the specified script.",
      "example": {
        "raw": "MagicItemHasEffectItemScript - returns 1 if the magic effect has a scripted item with the specified script.\n\n(hasScript:bool) MagicItemHasEffectItemScript script:ref magicItem:ref",
        "return": [
          "hasScript",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItemName",
      "description": "returns the name of the specified active effect, i.e. \"Fortify Strength\".",
      "example": {
        "raw": "GetNthEffectItemName - returns the name of the specified active effect, i.e. \"Fortify Strength\".\n\n(name:string_var) GetNthEffectItemName magicItem:ref whichEffect:int\n\n(name:string_var) GetNthEIName magicItem:ref whichEffect:int",
        "return": [
          "name",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthEffectItem",
      "description": "returns a StringMap fully describing the specified effect item. The StringMap has the following key-value pairs:",
      "example": {
        "raw": "GetNthEffectItem - returns a StringMap fully describing the specified effect item. The StringMap has the following key-value pairs:\n\n\n\t\t(numeric) effectCode, area, magnitude, duration, range, cost\n\t\t(string) name\n\t\t(numeric) actorValue - an actor value code, if applicable to the effect\n\t\t(StringMap) SEFF - for script effects, additional data about the effect:\n\t\t\t(numeric) school, visualEffectCode - \"school\" is a magic skill actor value code\n\t\t\t(ref) script\n\t\t\t(bool) hostile\n\n\n(effectItem:StringMap) GetNthEffectItem magicItem:ref whichEffect:int",
        "return": [
          "effectItem",
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveEffectCount",
      "description": "returns the number of ActiveEffects on the target",
      "example": {
        "raw": "GetActiveEffectCount - returns the number of ActiveEffects on the target\n\n(count:int) reference.GetActiveEffectCount",
        "return": [
          "count",
          "int"
        ],
        "params": [
          "reference.GetActiveEffectCount"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectCode",
      "description": "returns the effect of the Nth ActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectCode - returns the effect of the Nth ActiveEffect on the target\n\n(effectCode:int) reference.GetNthActiveEffectCode whichEffect:int\n\n(effectCode:int) reference.GetNthAECode whichEffect:int",
        "return": [
          "effectCode",
          "int"
        ],
        "params": [
          "reference.GetNthActiveEffectCode"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectMagnitude",
      "description": "returns the magnitude of the Nth ActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectMagnitude - returns the magnitude of the Nth ActiveEffect on the target\n\nNote: This returns the magnitude applied to the actor, but not the original from the spell (may or may not include resistances, weaknesses and spell effectiveness).\n\n(magnitude:int) reference.GetNthActiveEffectMagnitude whichEffect:int\n\n(magnitude:int) reference.GetNthAEMagnitude whichEffect:int",
        "return": [
          "magnitude",
          "int"
        ],
        "params": [
          "reference.GetNthActiveEffectMagnitude"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectDuration",
      "description": "returns the total duration of the Nth ActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectDuration - returns the total duration of the Nth ActiveEffect on the target\n\n(duration:float) reference.GetNthActiveEffectDuration whichEffect:int\n\n(duration:float) reference.GetNthAEDuration whichEffect:int",
        "return": [
          "duration",
          "float"
        ],
        "params": [
          "reference.GetNthActiveEffectDuration"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectTimeElapsed",
      "description": "returns the time that the Nth ActiveEffect has been applied to the target",
      "example": {
        "raw": "GetNthActiveEffectTimeElapsed - returns the time that the Nth ActiveEffect has been applied to the target\n\nNote: On the very first frame of an effect, this appears to always return 0.1 regardless of framerate.\n\n(timeElapsed:float) reference.GetNthActiveEffectTimeElapsed whichEffect:int\n\n(timeElapsed:float) reference.GetNthAETime whichEffect:int",
        "return": [
          "timeElapsed",
          "float"
        ],
        "params": [
          "reference.GetNthActiveEffectTimeElapsed"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectMagicItem",
      "description": "returns the magic item which applied theNth ActiveEffect to the target",
      "example": {
        "raw": "GetNthActiveEffectMagicItem - returns the magic item which applied theNth ActiveEffect to the target\n\n(magicItem:ref) reference.GetNthActiveEffectMagicItem whichEffect:int\n\n(magicItem:ref) reference.GetNthAEMagicItem whichEffect:int",
        "return": [
          "magicItem",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectMagicItem"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectCaster",
      "description": "return the caster of the Nth ActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectCaster - return the caster of the Nth ActiveEffect on the target\n\n(caster:ref) reference.GetNthActiveEffectCaster whichEffect:int\n\n(caster:ref) reference.GetNthAECaster whichEffect:int",
        "return": [
          "caster",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectCaster"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectData",
      "description": "return the data of the NthActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectData - return the data of the NthActiveEffect on the target\n\n(data:ref) reference.GetNthActiveEffectData whichEffect:int\n\n(data:ref) reference.GetNthAEData whichEffect:int",
        "return": [
          "data",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectData"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectMagicItemIndex",
      "description": "returns the index on its magic item of the Nth ActiveEffect on the target",
      "example": {
        "raw": "GetNthActiveEffectMagicItemIndex - returns the index on its magic item of the Nth ActiveEffect on the target\n\n(index:int) reference.GetNthActiveEffectMagicItemIndex whichEffect:int\n\n(index:int) reference.GetNthAEIndex whichEffect:int",
        "return": [
          "index",
          "int"
        ],
        "params": [
          "reference.GetNthActiveEffectMagicItemIndex"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectEnchantObject",
      "description": "returns the equipped enchanted object, if any, responsible for the specified active effect",
      "example": {
        "raw": "GetNthActiveEffectEnchantObject - returns the equipped enchanted object, if any, responsible for the specified active effect\n\n(object:ref) reference.GetNthActiveEffectMagicEnchantObject whichEffect:int\n\n(object:ref) reference.GetNthAEMagicEnchantObject whichEffect:int",
        "return": [
          "object",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectMagicEnchantObject"
        ]
      }
    },
    {
      "name": "SetNthActiveEffectMagnitude",
      "description": "sets the magnitude of the corresponding ActiveEffect",
      "example": {
        "raw": "SetNthActiveEffectMagnitude - sets the magnitude of the corresponding ActiveEffect\n\n(nothing) SetNthActiveEffectMagnitude magnitude:float whichEffect:int\n\n(nothing) SetNthAEMagnitude magnitude:float whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModNthActiveEffectMagnitude",
      "description": "modifies the magnitude of the corresponding ActiveEffect",
      "example": {
        "raw": "ModNthActiveEffectMagnitude - modifies the magnitude of the corresponding ActiveEffect\n\n(nothing) ModNthActiveEffectMagnitude magnitude:float whichEffect:int\n\n(nothing) ModNthAEMagnitude magnitude:float whichEffect:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetTotalActiveEffectMagnitude",
      "description": "returns the total magnitude of all ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalActiveEffectMagnitude - returns the total magnitude of all ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalActiveEffectMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalActiveEffectMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalActiveEffectMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAENonAbilityMagnitude",
      "description": "returns the total magnitude of all non-ability ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalAENonAbilityMagnitude - returns the total magnitude of all non-ability ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalAENonAbilityMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAENonAbilityMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAENonAbilityMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEAbilityMagnitude",
      "description": "returns the total magnitude of all ability ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalAEAbilityMagnitude - returns the total magnitude of all ability ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalAEAbilityMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEAbilityMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEAbilityMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAESpellMagnitude",
      "description": "returns the total magniude of all spell ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalAESpellMagnitude - returns the total magniude of all spell ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalAESpellMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAESpellMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAESpellMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEDiseaseMagnitude",
      "description": "returns the total magnitude of all disease ActiveEffects with a given code on the target.",
      "example": {
        "raw": "GetTotalAEDiseaseMagnitude - returns the total magnitude of all disease ActiveEffects with a given code on the target.\n\n(totalMag:int) reference.GetTotalAEDiseaseMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEDiseaseMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEDiseaseMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAELesserPowerMagnitude",
      "description": "returns the total magnitude of all lesser power ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalAELesserPowerMagnitude - returns the total magnitude of all lesser power ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalAELesserPowerMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAELesserPowerMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAELesserPowerMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEPowerMagnitude",
      "description": "retuns the total magnidue of all greater power ActiveEffects with a given code on the target",
      "example": {
        "raw": "GetTotalAEPowerMagnitude - retuns the total magnidue of all greater power ActiveEffects with a given code on the target\n\n(totalMag:int) reference.GetTotalAEPowerMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEPowerMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEPowerMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEAllSpellsMagnitude",
      "description": "returns the total magnitude of all spells (Spell, Ability, Disease, Lesser Power, Power) with a given code on the target.",
      "example": {
        "raw": "GetTotalAEAllSpellsMagnitude - returns the total magnitude of all spells (Spell, Ability, Disease, Lesser Power, Power) with a given code on the target.\n\n(totalMag:int) reference.GetTotalAEAllSpellsMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEAllSpellsMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEAllSpellsMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEEnchantmentMagnitude",
      "description": "retuns the total magnitude of all enchantments with a given code on the target.",
      "example": {
        "raw": "GetTotalAEEnchantmentMagnitude - retuns the total magnitude of all enchantments with a given code on the target.\n\n(totalMag:int) reference.GetTotalAEEnchantmentMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEEnchantmentMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEEnchantmentMagnitude"
        ]
      }
    },
    {
      "name": "GetTotalAEAlchemyMagnitude",
      "description": "returns the total magnitude of all potions with a given code on the target.",
      "example": {
        "raw": "GetTotalAEAlchemyMagnitude - returns the total magnitude of all potions with a given code on the target.\n\n(totalMag:int) reference.GetTotalAEAlchemyMagnitude effectCode:chars actorValue:chars ignoreUnappliedEffects:bool\n\n(totalMag:int) reference.GetTotalAEAlchemyMagnitudeC effectCode:int actorValueCode:int ignoreUnappliedEffects:bool",
        "return": [
          "totalMag",
          "int"
        ],
        "params": [
          "reference.GetTotalAEAlchemyMagnitude"
        ]
      }
    },
    {
      "name": "GetScriptActiveEffectIndex",
      "description": "returns the index of the corresponding ActiveEffect for the running script effect. Prior to OBSE 0019, this command returned 0 if the script effect could not be found, and could not distinguish between multiple instances of the same script effect. As of 0019, the command returns -1 on failure, and otherwise returns the index corresponding to the unique active effect associated with the calling script.",
      "example": {
        "raw": "GetScriptActiveEffectIndex - returns the index of the corresponding ActiveEffect for the running script effect. Prior to OBSE 0019, this command returned 0 if the script effect could not be found, and could not distinguish between multiple instances of the same script effect. As of 0019, the command returns -1 on failure, and otherwise returns the index corresponding to the unique active effect associated with the calling script.\n\n(index:int) GetScriptActiveEffectIndex",
        "return": [
          "index",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "DispelNthActiveEffect",
      "description": "dispels the effects of the specified active effect and removes it from the actor's active effect list. Note that the effect will not be removed until the next gamemode frame, so the indexes into an actor's effect list do not change immediately.",
      "example": {
        "raw": "DispelNthActiveEffect - dispels the effects of the specified active effect and removes it from the actor's active effect list. Note that the effect will not be removed until the next gamemode frame, so the indexes into an actor's effect list do not change immediately.\n\n(effectWasRemoved:bool) reference.DispelNthActiveEffect whichEffect:int\n\n(effectWasRemoved:bool) reference.DispelNthAE whichEffect:int",
        "return": [
          "effectWasRemoved",
          "bool"
        ],
        "params": [
          "reference.DispelNthActiveEffect"
        ]
      }
    },
    {
      "name": "GetActiveEffectCodes",
      "description": "returns an Array containing the effect code of each of the calling actor's active effects, in the order in which they appear in his active effect list. An effect code's index in the returned Array can therefore be passed to the Get/SetNthActiveEffectXXX functions to operate on its associated active effect.",
      "example": {
        "raw": "GetActiveEffectCodes - returns an Array containing the effect code of each of the calling actor's active effects, in the order in which they appear in his active effect list. An effect code's index in the returned Array can therefore be passed to the Get/SetNthActiveEffectXXX functions to operate on its associated active effect.\n\n(codes:Array) reference.GetActiveEffectCodes",
        "return": [
          "codes",
          "Array"
        ],
        "params": [
          "reference.GetActiveEffectCodes"
        ]
      }
    },
    {
      "name": "GetActiveEffectCasters",
      "description": "returns an Array containing the casters of each of the calling actor's active effects, in the order in which they appear in his active effect list. A caster's index in the returned Array can therefore be passed to the Get/SetNthActiveEffectXXX functions to operate on its associated active effect. If an active effect has no caster its associated value will be zero.",
      "example": {
        "raw": "GetActiveEffectCasters - returns an Array containing the casters of each of the calling actor's active effects, in the order in which they appear in his active effect list. A caster's index in the returned Array can therefore be passed to the Get/SetNthActiveEffectXXX functions to operate on its associated active effect. If an active effect has no caster its associated value will be zero.\n\n(casters:Array) reference.GetActiveEffectCasters",
        "return": [
          "casters",
          "Array"
        ],
        "params": [
          "reference.GetActiveEffectCasters"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectSummonRef",
      "description": "returns a reference to the creature associated with the specified Summon Creature active effect",
      "example": {
        "raw": "GetNthActiveEffectSummonRef - returns a reference to the creature associated with the specified Summon Creature active effect\n\n(creature:ref) reference.GetNthActiveEffectSummonRef whichEffect:int\n\n(creature:ref) reference.GetNthAESummonRef whichEffect:int",
        "return": [
          "creature",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectSummonRef"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectBoundItem",
      "description": "returns the base object associated with the specified Bound Item active effect",
      "example": {
        "raw": "GetNthActiveEffectBoundItem - returns the base object associated with the specified Bound Item active effect\n\n(object:ref) reference.GetNthActiveEffectBoundItem whichEffect:int\n\n(object:ref) reference.GetNthAEBoundItem whichEffect:int",
        "return": [
          "object",
          "ref"
        ],
        "params": [
          "reference.GetNthActiveEffectBoundItem"
        ]
      }
    },
    {
      "name": "IsNthActiveEffectApplied",
      "description": "returns 1 if the active effect at the specified index is currently applied to the target. An active effect may exist on the target before its effects are applied (typically for one frame after a spell is cast), in which case this command would return zero.",
      "example": {
        "raw": "IsNthActiveEffectApplied - returns 1 if the active effect at the specified index is currently applied to the target. An active effect may exist on the target before its effects are applied (typically for one frame after a spell is cast), in which case this command would return zero.\n\n(isApplied:bool) reference.IsNthActiveEffectApplied whichEffect:short",
        "return": [
          "isApplied",
          "bool"
        ],
        "params": [
          "reference.IsNthActiveEffectApplied"
        ]
      }
    },
    {
      "name": "GetNthActiveEffectActorValue",
      "description": "returns the actor value associated with the active effect, if any.",
      "example": {
        "raw": "GetNthActiveEffectActorValue - returns the actor value associated with the active effect, if any.\n\n(actorValueCode:int) reference.GetNthActiveEffectActorValue whichEffect:int\n\n(actorValueCode:int) reference.GetNthAEAV whichEffect:int",
        "return": [
          "actorValueCode",
          "int"
        ],
        "params": [
          "reference.GetNthActiveEffectActorValue"
        ]
      }
    },
    {
      "name": "SetName",
      "description": "sets the display name of the type. SetName is a special function. It is defined to work on Inventory items, but it can be used with any form. To use with a non-Inventory item you must first assign the objectID to a ref. For most forms the name is part of the base form and changing the name will change it for all instances of the type. (TODO: AddLink)",
      "example": {
        "raw": "SetName - sets the display name of the type. SetName is a special function. It is defined to work on Inventory items, but it can be used with any form. To use with a non-Inventory item you must first assign the objectID to a ref. For most forms the name is part of the base form and changing the name will change it for all instances of the type. (TODO: AddLink)\n\n(nothing) reference.SetName name:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetName"
        ]
      }
    },
    {
      "name": "GetName",
      "description": "returns the name of an object.",
      "example": {
        "raw": "GetName - returns the name of an object.\n\n(name:string_var) reference.GetName object:ref",
        "return": [
          "name",
          "string_var"
        ],
        "params": [
          "reference.GetName"
        ]
      }
    },
    {
      "name": "CompareName",
      "description": "returns 1 if stringToFindInName is found in the name of the object",
      "example": {
        "raw": "CompareName - returns 1 if stringToFindInName is found in the name of the object\n\n(nameContainsString) reference.CompareName toFindInName:string objectID:ref\n\n(nameContainsString) reference.NameIncludes toFindInName:string objectID:ref",
        "return": [
          "nameContainsString"
        ],
        "params": [
          "reference.CompareName"
        ]
      }
    },
    {
      "name": "CompareNames",
      "description": "compares the names of two objects and returns -1 if the first occurs alphabetically before the second, 1 if the first occurs after the second, or 0 for equality. Comparison is case-insensitive.",
      "example": {
        "raw": "CompareNames - compares the names of two objects and returns -1 if the first occurs alphabetically before the second, 1 if the first occurs after the second, or 0 for equality. Comparison is case-insensitive.\n\n(comparison:int) reference.CompareNames compareTo:ref compare:ref",
        "return": [
          "comparison",
          "int"
        ],
        "params": [
          "reference.CompareNames"
        ]
      }
    },
    {
      "name": "CopyName",
      "description": "copies the name from the source to the target. It is defined to work on Inventory items, but it can be used with any form. To use with a non-Inventory item you must first assign the objectID to a ref. For most forms the name is part of the base form and changing the name will change it for all instances of the type.",
      "example": {
        "raw": "CopyName - copies the name from the source to the target. It is defined to work on Inventory items, but it can be used with any form. To use with a non-Inventory item you must first assign the objectID to a ref. For most forms the name is part of the base form and changing the name will change it for all instances of the type.\n\n(nothing) CopyName srcObjectID:ref targetObjectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModName",
      "description": "modifies the name of the calling reference or passed objectID. The toReplaceAndReplaceWith string has the following format: \"toReplace|replaceWith\". We will do a case insensitve search for the toReplace portion and if found will replace it with the replaceWith portion. The | character is used to separate the portions of the string. If there is nothing before the | character, the replaceWith string is prepended to the name. In the console, use @ instead of |.",
      "example": {
        "raw": "ModName - modifies the name of the calling reference or passed objectID. The toReplaceAndReplaceWith string has the following format: \"toReplace|replaceWith\". We will do a case insensitve search for the toReplace portion and if found will replace it with the replaceWith portion. The | character is used to separate the portions of the string. If there is nothing before the | character, the replaceWith string is prepended to the name. In the console, use @ instead of |.\n\n(nothing) reference.ModName toReplaceAndReplaceWith:string toObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModName"
        ]
      }
    },
    {
      "name": "AppendToName",
      "description": "appends the passed string to the end of the name of the calling reference or passed objectID.",
      "example": {
        "raw": "AppendToName - appends the passed string to the end of the name of the calling reference or passed objectID.\n\n(nothing) reference.AppendToName toAppend:string toObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.AppendToName"
        ]
      }
    },
    {
      "name": "HasName",
      "description": "returns 1 if the object has a id consisting of at least one character.",
      "example": {
        "raw": "HasName - returns 1 if the object has a id consisting of at least one character.\n\n(hasName:bool) reference.HasName objectID:ref",
        "return": [
          "hasName",
          "bool"
        ],
        "params": [
          "reference.HasName"
        ]
      }
    },
    {
      "name": "SetNameEx",
      "description": "sets the name of the base object. The new name is a string constructed from a format string using the same format specifiers used by OBSE's ",
      "example": {
        "raw": "SetNameEx - sets the name of the base object. The new name is a string constructed from a format string using the same format specifiers used by OBSE's output functions.\n\n(nothing) reference.SetNameEx formatString:string var1 var2 ... var20 object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetNameEx",
          "..."
        ]
      }
    },
    {
      "name": "GetOwner",
      "description": "returns the NPC or faction which owns the calling reference.",
      "example": {
        "raw": "GetOwner - returns the NPC or faction which owns the calling reference.\n\nNote: Does not appear to work on activators such as switches and doors. (TODO: Verify)\n\nNote: If a cell has a set Owner NPC, all items in the cell that do not have specific ownership set are owned by the NPC. In that case, this function may return 0, but GetParentCellOwner will return the true owner.\n\nNote: The returned ownerID is a base ObjectID.\n\n(owner:ref) reference.GetOwner",
        "return": [
          "etParentCellOwne"
        ],
        "params": []
      }
    },
    {
      "name": "GetParentCellOwner",
      "description": "returns the NPC or faction which owns the calling reference's parent cell.",
      "example": {
        "raw": "GetParentCellOwner - returns the NPC or faction which owns the calling reference's parent cell.\n\n(owner:ref) reference.GetParentCellOwner",
        "return": [
          "owner",
          "ref"
        ],
        "params": [
          "reference.GetParentCellOwner"
        ]
      }
    },
    {
      "name": "GetOwningFactionRequiredRank",
      "description": "returns the rank in the owning faction required to legally activate the calling reference.",
      "example": {
        "raw": "GetOwningFactionRequiredRank - returns the rank in the owning faction required to legally activate the calling reference.\n\n(rank:int) reference.GetOwningFactionRequiredRank\n\n(rank:int) reference.GetOwningFactionRank",
        "return": [
          "rank",
          "int"
        ],
        "params": [
          "reference.GetOwningFactionRequiredRank"
        ]
      }
    },
    {
      "name": "GetParentCellOwningFactionRequiredRank",
      "description": "returns the rank required for ownership of the calling reference's parent cell.",
      "example": {
        "raw": "GetParentCellOwningFactionRequiredRank - returns the rank required for ownership of the calling reference's parent cell.\n\n(rank:int) reference.GetParentCellOwningFactionRequiredRank\n\n(rank:int) reference.GetCellFactionRank",
        "return": [
          "rank",
          "int"
        ],
        "params": [
          "reference.GetParentCellOwningFactionRequiredRank"
        ]
      }
    },
    {
      "name": "SetOwningFactionRequiredRank",
      "description": "set the rank in the owning faction required to legally activate the calling reference.",
      "example": {
        "raw": "SetOwningFactionRequiredRank - set the rank in the owning faction required to legally activate the calling reference.\n\nreference.SetOwningFactionRequiredRank rank:int\n\nreference.SetOwningFactionRank rank:int",
        "return": [
          "eference.SetOwningFactionRequiredRan"
        ],
        "params": []
      }
    },
    {
      "name": "SetParentCellOwningFactionRequiredRank",
      "description": "set the rank required for ownership of the calling reference's parent cell.",
      "example": {
        "raw": "SetParentCellOwningFactionRequiredRank - set the rank required for ownership of the calling reference's parent cell.\n\nreference.SetParentCellOwningFactionRequiredRank  rank:int\n\nreference.SetCellFactionRank   rank:int",
        "return": [
          "eference.SetParentCellOwningFactionRequiredRan"
        ],
        "params": []
      }
    },
    {
      "name": "IsOffLimits",
      "description": "returns 1 if it is illegal for the specified actor to activate the calling reference, based on the calling reference's ownership. If the argument is omitted, the player is used by default.",
      "example": {
        "raw": "IsOffLimits - returns 1 if it is illegal for the specified actor to activate the calling reference, based on the calling reference's ownership. If the argument is omitted, the player is used by default.\n\n(isOffLimits:bool) reference.IsOffLimits actor:ref",
        "return": [
          "isOffLimits",
          "bool"
        ],
        "params": [
          "reference.IsOffLimits"
        ]
      }
    },
    {
      "name": "GetRaceAttribute",
      "description": "returns the specified base attribute value. If passed a raceFormID you must also pass whether you want the female value or not. If called directly on a reference the function will determine the race and sex of the reference and the raceFormID and isFemale are not needed. The C version of the function takes a number rather than the actorvalue name (ie. 0 instead of Strength).",
      "example": {
        "raw": "GetRaceAttribute - returns the specified base attribute value. If passed a raceFormID you must also pass whether you want the female value or not. If called directly on a reference the function will determine the race and sex of the reference and the raceFormID and isFemale are not needed. The C version of the function takes a number rather than the actorvalue name (ie. 0 instead of Strength).\n\n(value:int) reference.GetRaceAttribute attributeActorValue:chars raceFormID:ref isFemale:bool\n\n(value:int) reference.GetRaceAttributeC attributeActorValueCode:int raceFormID:ref isFemale:bool",
        "return": [
          "value",
          "int"
        ],
        "params": [
          "reference.GetRaceAttribute"
        ]
      }
    },
    {
      "name": "GetRaceSkillBonus",
      "description": "returns the bonus for the specified skill for the race. If called on a reference the function will determine the race of the reference. Returns 0 if there is no bonus for that skill. The C version specifies the specific skill by number rather than by name.",
      "example": {
        "raw": "GetRaceSkillBonus - returns the bonus for the specified skill for the race. If called on a reference the function will determine the race of the reference. Returns 0 if there is no bonus for that skill. The C version specifies the specific skill by number rather than by name.\n\n(value:int) reference.GetRaceSkillBonus skillActorValue:chars raceFormID:ref\n\n(value:int) reference.GetRaceSkillBonusC skillActorValueCode:int raceFormID:ref",
        "return": [
          "value",
          "int"
        ],
        "params": [
          "reference.GetRaceSkillBonus"
        ]
      }
    },
    {
      "name": "IsRaceBonusSkill",
      "description": "returns whether the specified skill is a bonus for the race. If called on a reference the function will determine the race of the reference. The C version specifies the skill by number rather than by name.",
      "example": {
        "raw": "IsRaceBonusSkill - returns whether the specified skill is a bonus for the race. If called on a reference the function will determine the race of the reference. The C version specifies the skill by number rather than by name.\n\n(isBonusSkill:bool) reference.IsRaceBonusSkill skillActorValue:chars raceFormID:ref\n\n(isBonusSkill:bool) reference.IsRaceBonusSkillC skillActorValueCode:int raceFormID:ref",
        "return": [
          "isBonusSkill",
          "bool"
        ],
        "params": [
          "reference.IsRaceBonusSkill"
        ]
      }
    },
    {
      "name": "GetNthRaceBonusSkill",
      "description": "returns the actor value code for the specified index into the bonus skills. Can be followed up with a call to GetRaceSkillBonusC to determine the actual bonus to the skill. If called on a reference the function will determine the race of the reference.",
      "example": {
        "raw": "GetNthRaceBonusSkill - returns the actor value code for the specified index into the bonus skills. Can be followed up with a call to GetRaceSkillBonusC to determine the actual bonus to the skill. If called on a reference the function will determine the race of the reference.\n\n(skill:int) reference.GetNthRaceBonusSkill whichSkill:int raceFormID:ref",
        "return": [
          "skill",
          "int"
        ],
        "params": [
          "reference.GetNthRaceBonusSkill"
        ]
      }
    },
    {
      "name": "GetRaceSpellCount",
      "description": "returns the number of spells provided by the race. If no race is specified, the race of the calling NPC is used.",
      "example": {
        "raw": "GetRaceSpellCount - returns the number of spells provided by the race. If no race is specified, the race of the calling NPC is used.\n\n(numSpells:int) reference.GetRaceSpellCount race:ref",
        "return": [
          "numSpells",
          "int"
        ],
        "params": [
          "reference.GetRaceSpellCount"
        ]
      }
    },
    {
      "name": "GetNthRaceSpell",
      "description": "returns the nth spell provided by the race, using the race of the calling NPC if none is specified.",
      "example": {
        "raw": "GetNthRaceSpell - returns the nth spell provided by the race, using the race of the calling NPC if none is specified.\n\n(spell:ref) reference.GetNthRaceSpell whichSpell:int race:ref",
        "return": [
          "spell",
          "ref"
        ],
        "params": [
          "reference.GetNthRaceSpell"
        ]
      }
    },
    {
      "name": "SetRaceAlias",
      "description": "creates an alias for a race. If a race has an alias, then calling ",
      "example": {
        "raw": "SetRaceAlias - creates an alias for a race. If a race has an alias, then calling GetIsRace aliasRace will return true for any actor of that race. For example, SetRaceAlias Nord Argonian will cause GetIsRace to recognize Nords as Argonians. However, Argonians will not be recognized as Nords. The third argument defaults to 1; pass 0 to clear a previously created alias.\n\n(nothing) SetRaceAlias actualRace:ref aliasRace:ref enableAlias:bool",
        "return": [
          "etIsRac"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceVoice",
      "description": "returns the race which is used to provide the voice of the specified race and gender. Pass 0 for male or 1 for female. ",
      "example": {
        "raw": "GetRaceVoice - returns the race which is used to provide the voice of the specified race and gender. Pass 0 for male or 1 for female. \n\n(voiceRace:ref) GetRaceVoice race:ref whichGender:int",
        "return": [
          "voiceRace",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": " ",
      "description": "SetRaceVoice",
      "example": {
        "raw": " SetRaceVoice - changes the voice of a race to the specified race. Specify 0 for male, 1 for female, or 2 for both genders.\n\n(nothing) SetRaceVoice actualRace:ref voiceRace:ref whichGender:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetRacePlayable",
      "description": "flags a race as playable or unplayable. Unplayable races cannot speak most of the dialog defined in the game.",
      "example": {
        "raw": "SetRacePlayable - flags a race as playable or unplayable. Unplayable races cannot speak most of the dialog defined in the game.\n\n(nothing) SetRacePlayable race:ref isPlayable:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsRacePlayable",
      "description": "returns 1 if the specified race is flagged as playable in the editor.",
      "example": {
        "raw": "IsRacePlayable - returns 1 if the specified race is flagged as playable in the editor.\n\n(isPlayable:bool) IsRacePlayable race:ref",
        "return": [
          "isPlayable",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceReaction",
      "description": "returns the race reaction between the target NPC/Race and the calling NPC reference or passed race. The target and from races are declared as NPCs, but you can also place a Race name into a ref variable and pass those in.",
      "example": {
        "raw": "GetRaceReaction - returns the race reaction between the target NPC/Race and the calling NPC reference or passed race. The target and from races are declared as NPCs, but you can also place a Race name into a ref variable and pass those in.\n\n(reaction:int) reference.GetRaceReaction targetNPC:ref fromNPC:ref",
        "return": [
          "reaction",
          "int"
        ],
        "params": [
          "reference.GetRaceReaction"
        ]
      }
    },
    {
      "name": "GetRaceScale",
      "description": "returns the default scale of the male or female members of the specified race.",
      "example": {
        "raw": "GetRaceScale - returns the default scale of the male or female members of the specified race.\n\n(scale:float) GetRaceScale race:ref forFemale:bool",
        "return": [
          "scale",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetRaceScale",
      "description": "sets the scale for male or female members of the specified race.",
      "example": {
        "raw": "SetRaceScale - sets the scale for male or female members of the specified race.\n\n(nothing) SetRaceScale race:ref forFemale:bool scale:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceWeight",
      "description": "returns the default weight for male or female members of the specified race as defined in the editor.",
      "example": {
        "raw": "GetRaceWeight - returns the default weight for male or female members of the specified race as defined in the editor.\n\n(weight:float) GetRaceWeight race:ref forFemale:bool",
        "return": [
          "weight",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetRaceWeight",
      "description": "sets the weight for male or female members of the specified race.",
      "example": {
        "raw": "SetRaceWeight - sets the weight for male or female members of the specified race.\n\n(nothing) SetRaceWeight race:ref forFemale:bool weight:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceDefaultHair",
      "description": "returns the default hair for male or female members of the specified race.",
      "example": {
        "raw": "GetRaceDefaultHair - returns the default hair for male or female members of the specified race.\n\n(hair:ref) GetRaceDefaultHair race:ref forFemale:bool",
        "return": [
          "hair",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceHairs",
      "description": "returns an Array of all hairs (male and female) available to actors of the specified race as defined in the editor.",
      "example": {
        "raw": "GetRaceHairs - returns an Array of all hairs (male and female) available to actors of the specified race as defined in the editor.\n\n(hairs:Array) GetRaceHairs race:ref",
        "return": [
          "hairs",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetRaceEyes",
      "description": "returns an Array of all eyes available to actors of the specified race as defined in the editor.",
      "example": {
        "raw": "GetRaceEyes - returns an Array of all eyes available to actors of the specified race as defined in the editor.\n\n(eyes:Array) GetRaceEyes race:ref",
        "return": [
          "eyes",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "HasTail",
      "description": "returns true if the specified race or the race of the calling npc ref or specified base npc has a tail.",
      "example": {
        "raw": "HasTail - returns true if the specified race or the race of the calling npc ref or specified base npc has a tail.\n\n(hasTail:bool) reference.HasTail raceOrNPC:ref ",
        "return": [
          "hasTail",
          "bool"
        ],
        "params": [
          "reference.HasTail"
        ]
      }
    },
    {
      "name": "GetTailModelPath",
      "description": "returns the path to the tail model used by the specified gender of the specified race or the race of the specified NPC or calling reference, if the race has a tail.",
      "example": {
        "raw": "GetTailModelPath - returns the path to the tail model used by the specified gender of the specified race or the race of the specified NPC or calling reference, if the race has a tail.\n\n(tailPath:string) reference.GetTailModelPath female:bool raceOrNPC:ref ",
        "return": [
          "tailPath",
          "string"
        ],
        "params": [
          "reference.GetTailModelPath"
        ]
      }
    },
    {
      "name": "IsScripted",
      "description": "returns whether the scriptable object has a script attached to it or not.",
      "example": {
        "raw": "IsScripted - returns whether the scriptable object has a script attached to it or not.\n\nNote: This is not intended for use on spells, for which you should use IsNthEffectItemScripted instead. \n\n(isScripted:bool) reference.IsScripted targetObjectID:ref",
        "return": [
          "sNthEffectItemScripte"
        ],
        "params": []
      }
    },
    {
      "name": "GetScript",
      "description": "returns the refID of the script attached to the object",
      "example": {
        "raw": "GetScript - returns the refID of the script attached to the object\n\n(script:refID) reference.GetScript targetObjectID:ref",
        "return": [
          "script",
          "refID"
        ],
        "params": [
          "reference.GetScript"
        ]
      }
    },
    {
      "name": "RemoveScript",
      "description": "removes and returns the script attached to the object. The object is no longer scripted",
      "example": {
        "raw": "RemoveScript - removes and returns the script attached to the object. The object is no longer scripted\n\n(script:refID) reference.RemoveScript targetObjectID:ref",
        "return": [
          "script",
          "refID"
        ],
        "params": [
          "reference.RemoveScript"
        ]
      }
    },
    {
      "name": "SetScript",
      "description": "sets the specified script onto the calling object and returns any previous script. Note that Oblivion doesn't have a script variable type so you must assign the script to a ref variable for this to work.",
      "example": {
        "raw": "SetScript - sets the specified script onto the calling object and returns any previous script. Note that Oblivion doesn't have a script variable type so you must assign the script to a ref variable for this to work.\n\nNote: If the specified object already has a script attached to it, after changing the script the stored values of local variables for references to that object will not match the variables in the new script. If called on a reference, the variable list for the calling reference will be updated to match the new script, but other references to the same base object will not be updated.\n\nNote: SetScript is safe to use with quests, with previously unscripted objects, and on unique references (for which no other references exist to the same base object). Using the command on base objects for which non-unique references exist may result in undefined behavior.\n\nNote: \n\nNote: \n\nNote: \n\n(script:refID) reference.SetScript scriptID:ref targetObjectID:ref",
        "return": [
          "script",
          "refID"
        ],
        "params": [
          "reference.SetScript"
        ]
      }
    },
    {
      "name": "IsFormValid",
      "description": "returns 1 if the specified ref variable contains a valid object or reference.",
      "example": {
        "raw": "IsFormValid - returns 1 if the specified ref variable contains a valid object or reference.\n\nNote: If you reload the game after picking up a non dynamic (= not mod index 0xFF) reference, IsFormValid will return false if the object was non-persistent and true if the object was persistent. (TODO: Verify)\n\nNote: If you want to check for a reference originating in an esm file that has been deleted by an esp, use IsRefDeleted instead, as IsFormValid will return true.\n\n(valid:bool) IsFormValid refVar:var",
        "return": [
          "sFormVali"
        ],
        "params": []
      }
    },
    {
      "name": "IsReference",
      "description": "returns 1 if the specified ref variable contains a reference, as opposed to a base object.",
      "example": {
        "raw": "IsReference - returns 1 if the specified ref variable contains a reference, as opposed to a base object.\n\n(isReference:bool) IsReference refVar:var",
        "return": [
          "isReference",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "HasVariable",
      "description": "returns 1 if the calling reference or specified quest has a variable with the specified name.",
      "example": {
        "raw": "HasVariable - returns 1 if the calling reference or specified quest has a variable with the specified name.\n\n(hasVariable:bool) reference.HasVariable varName:string questID:ref",
        "return": [
          "hasVariable",
          "bool"
        ],
        "params": [
          "reference.HasVariable"
        ]
      }
    },
    {
      "name": "GetVariable",
      "description": "returns the value of a numeric variable by name, either from the calling reference's script or the specified quest.",
      "example": {
        "raw": "GetVariable - returns the value of a numeric variable by name, either from the calling reference's script or the specified quest.\n\n(variableValue:float) reference.GetVariable varName:string questID:ref",
        "return": [
          "variableValue",
          "float"
        ],
        "params": [
          "reference.GetVariable"
        ]
      }
    },
    {
      "name": "GetRefVariable",
      "description": "returns the reference stored in a ref variable by name, either from the calling reference's script or the specified quest.",
      "example": {
        "raw": "GetRefVariable - returns the reference stored in a ref variable by name, either from the calling reference's script or the specified quest.\n\n(reference:ref) reference.GetRefVariable varName:string questID:ref",
        "return": [
          "reference",
          "ref"
        ],
        "params": [
          "reference.GetRefVariable"
        ]
      }
    },
    {
      "name": "GetArrayVariable",
      "description": " (GetArrayVar) - returns the value of an array variable by name, either from the calling reference's script or the specified quest.",
      "example": {
        "raw": "GetArrayVariable (GetArrayVar) - returns the value of an array variable by name, either from the calling reference's script or the specified quest.\n\n(array) reference.GetArrayVariable varName:string questID:ref",
        "return": [
          "array"
        ],
        "params": [
          "reference.GetArrayVariable"
        ]
      }
    },
    {
      "name": "CompareScripts",
      "description": "compares the compiled code of two scripts and returns 1 if they are identical. Note that this doesn't mean the text of the scripts are identical, only that they call the same functions in the same order with the same parameters.",
      "example": {
        "raw": "CompareScripts - compares the compiled code of two scripts and returns 1 if they are identical. Note that this doesn't mean the text of the scripts are identical, only that they call the same functions in the same order with the same parameters.\n\n(scriptsAreIdentical:bool) CompareScripts script:ref script:ref",
        "return": [
          "scriptsAreIdentical",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ResetAllVariables",
      "description": "sets all variables in the calling script to zero.",
      "example": {
        "raw": "ResetAllVariables - sets all variables in the calling script to zero.\n\nNote: Don't use this in scripts with string_var or array_var, because they aren't cleaned up properly. (TODO: Verify)\n\n(numVars:int) ResetAllVariables",
        "return": [
          "numVars",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumExplicitRefs",
      "description": "returns the number of explicit references in the calling object's script or in the passed script object. Explicit references are any objects mentioned by name in the script; for instance, if a script contains an \"OnHit Player\" block or a \"Player.AddItem\" command, its explicit references will include the player.",
      "example": {
        "raw": "GetNumExplicitRefs -  returns the number of explicit references in the calling object's script or in the passed script object. Explicit references are any objects mentioned by name in the script; for instance, if a script contains an \"OnHit Player\" block or a \"Player.AddItem\" command, its explicit references will include the player.\n\n(numRefs:int) reference.GetNumExplicitRefs script:ref",
        "return": [
          "numRefs",
          "int"
        ],
        "params": [
          "reference.GetNumExplicitRefs"
        ]
      }
    },
    {
      "name": "GetNthExplicitRef",
      "description": "returns the ",
      "example": {
        "raw": "GetNthExplicitRef - returns the nth explicit ref in the calling object's script or the passed script object. See GetNumExplicitRefs are a description of explicit references.\n\n(object:ref) reference.GetNthExplicitRef index:int script:ref",
        "return": [
          "object",
          "ref"
        ],
        "params": [
          "reference.GetNthExplicitRef"
        ]
      }
    },
    {
      "name": "GetCurrentScript",
      "description": "returns the script which is currently executing.",
      "example": {
        "raw": "GetCurrentScript - returns the script which is currently executing.\n\n(script:ref) GetCurrentScript",
        "return": [
          "script",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetModelPath",
      "description": "sets the model path for the type.",
      "example": {
        "raw": "SetModelPath - sets the model path for the type.\n\nNote: This function alters the model for the base object, which means that objects of the same type which are subsequently loaded will share the new model.\n\nNote: This function is for simple objects with one model, it doesn't work on clothing or armor and using it on actors may lead to crashes.\n\nNote: The new model will not appear until the object is reloaded, i.e. unequipping and re-equipping for equipped objects and Update3d for world objects.\n\n(nothing) reference.SetModelPath modelPath:string objectID:ref",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "GetModelPath",
      "description": "returns the model path for the object.",
      "example": {
        "raw": "GetModelPath - returns the model path for the object.\n\n(path:string_var) reference.GetModelPath object:ref",
        "return": [
          "path",
          "string_var"
        ],
        "params": [
          "reference.GetModelPath"
        ]
      }
    },
    {
      "name": "SetIconPath",
      "description": "sets the icon path for the type.",
      "example": {
        "raw": "SetIconPath - sets the icon path for the type.\n\n(nothing) reference.SetIconPath iconPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIconPath"
        ]
      }
    },
    {
      "name": "GetIconPath",
      "description": "returns the icon path for the object.",
      "example": {
        "raw": "GetIconPath - returns the icon path for the object.\n\n(path:string_var) reference.GetIconPath object:Ref",
        "return": [
          "path",
          "string_var"
        ],
        "params": [
          "reference.GetIconPath"
        ]
      }
    },
    {
      "name": " ",
      "description": "CompareModelPath",
      "example": {
        "raw": " CompareModelPath - returns whether the passed string is part of the model path. This is a case insensitive search.\n\n(found:bool) reference.CompareModelPath toFind:string objectID:ref\n\n(found:bool) reference.ModelPathIncludes toFind:string objectID:ref",
        "return": [
          "found",
          "bool"
        ],
        "params": [
          "reference.CompareModelPath"
        ]
      }
    },
    {
      "name": "CompareIconPath",
      "description": "returns whether the passed string is part of the icon path. This is a case insensitive search.",
      "example": {
        "raw": "CompareIconPath - returns whether the passed string is part of the icon path. This is a case insensitive search.\n\n(found:bool) reference.CompareIconPath toFind:string objectID:ref\n\n(found:bool) reference.IconPathIncludes toFind:string objectID:ref",
        "return": [
          "found",
          "bool"
        ],
        "params": [
          "reference.CompareIconPath"
        ]
      }
    },
    {
      "name": "CopyModelPath",
      "description": "sets the model path of the calling reference or passed objectID to the model path offromObject",
      "example": {
        "raw": "CopyModelPath - sets the model path of the calling reference or passed objectID to the model path offromObject\n\n(nothing) reference.CopyModelPath fromObject:ref toObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.CopyModelPath"
        ]
      }
    },
    {
      "name": "CopyIconPath",
      "description": "sets the icon path of the calling reference or passed objectID to the icon path of fromObject",
      "example": {
        "raw": "CopyIconPath - sets the icon path of the calling reference or passed objectID to the icon path of fromObject\n\n(nothing) reference.CopyIconPath fromObject:ref toObject:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.CopyIconPath"
        ]
      }
    },
    {
      "name": "ModModelPath",
      "description": "modifies the model path of the calling reference or passed objectID. The ",
      "example": {
        "raw": "ModModelPath - modifies the model path of the calling reference or passed objectID. The toReplaceAndReplaceWith string has the following format: \"toReplace|replaceWith\". ModModelPath will do a case insensitve search for the toReplace portion and if found will replace it with the replaceWith portion. The | character is used to separate the portions of the string. If there is nothing before the | character, the replaceWith string is prepended to the model path. In the console, use @ instead of |.\n\n(nothing) reference.ModModelPath toReplaceAndReplaceWith:string toObject:ref",
        "return": [
          "oReplaceAndReplaceWit"
        ],
        "params": []
      }
    },
    {
      "name": "ModIconPath",
      "description": "modifies the icon path of the calling reference or passed objectID. The ",
      "example": {
        "raw": "ModIconPath - modifies the icon path of the calling reference or passed objectID. The toReplaceAndReplaceWith string has the following format: \"toReplace|replaceWith\". ModIconPath will do a case insensitve search for the toReplace portion and if found will replace it with the replaceWith portion. The | character is used to separate the portions of the string. If there is nothing before the | character, the replaceWith string is prepended to the icon path. In the console, use @ instead of |.\n\n(nothing) reference.ModIconPath toReplaceAndReplaceWith:string toObject:ref",
        "return": [
          "oReplaceAndReplaceWit"
        ],
        "params": []
      }
    },
    {
      "name": "IsModelPathValid",
      "description": "returns 1 if the model path for the object exists in the user's Data folder or within one of the BSA archives.",
      "example": {
        "raw": "IsModelPathValid - returns 1 if the model path for the object exists in the user's Data folder or within one of the BSA archives.\n\n(isPathValid:bool) reference.IsModelPathValid object:ref",
        "return": [
          "isPathValid",
          "bool"
        ],
        "params": [
          "reference.IsModelPathValid"
        ]
      }
    },
    {
      "name": "IsIconPathValid",
      "description": "returns 1 if the icon path for the object exists in the user's Data folder or within one of the BSA archives.",
      "example": {
        "raw": "IsIconPathValid - returns 1 if the icon path for the object exists in the user's Data folder or within one of the BSA archives.\n\n(isPathValid:bool) reference.IsIconPathValid object:ref",
        "return": [
          "isPathValid",
          "bool"
        ],
        "params": [
          "reference.IsIconPathValid"
        ]
      }
    },
    {
      "name": "GetTexturePath",
      "description": "returns the texture path of an object. This command is identical to GetIconPath, but also works for other object types such as skills, classes, and miscellaneous objects.",
      "example": {
        "raw": "GetTexturePath - returns the texture path of an object. This command is identical to GetIconPath, but also works for other object types such as skills, classes, and miscellaneous objects.\n\n(string) reference.GetTexturePath object:ref",
        "return": [
          "string"
        ],
        "params": [
          "reference.GetTexturePath"
        ]
      }
    },
    {
      "name": "SetTexturePath",
      "description": "sets the texture path of an object. This command works for a broader set of objects than SetIconPathEX.",
      "example": {
        "raw": "SetTexturePath - sets the texture path of an object. This command works for a broader set of objects than SetIconPathEX.\n\n(nothing) reference.SetTexturePath path:string object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetTexturePath"
        ]
      }
    },
    {
      "name": "GetEditorSize",
      "description": "returns the value contained in the hidden 'size' field of the editor's object window for the specified object. This is a rough scalar approximation of the dimensions of the object. Return value is typically similar to that of ",
      "example": {
        "raw": "GetEditorSize - returns the value contained in the hidden 'size' field of the editor's object window for the specified object. This is a rough scalar approximation of the dimensions of the object. Return value is typically similar to that of GetBoundingRadius. The game only calculates and stores this value for objects for which at least one reference exists in the game world.\n\n(size:float) reference.GetEditorSize object:ref",
        "return": [
          "size",
          "float"
        ],
        "params": [
          "reference.GetEditorSize"
        ]
      }
    },
    {
      "name": "SetMaleBipedPath",
      "description": "sets the male NIF model path when worn",
      "example": {
        "raw": "SetMaleBipedPath - sets the male NIF model path when worn\n\n(nothing) reference.SetMaleBipedPath modelPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMaleBipedPath"
        ]
      }
    },
    {
      "name": "SetFemaleBipedPath",
      "description": "sets the female NIF model path when worn",
      "example": {
        "raw": "SetFemaleBipedPath - sets the female NIF model path when worn\n\n(nothing) reference.SetFemaleBipedPath modelPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetFemaleBipedPath"
        ]
      }
    },
    {
      "name": "SetMaleGroundPath",
      "description": "sets the male model path when dropped",
      "example": {
        "raw": "SetMaleGroundPath - sets the male model path when dropped\n\n(nothing) reference.SetMaleGroundPath modelPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMaleGroundPath"
        ]
      }
    },
    {
      "name": "SetFemaleGroundPath",
      "description": "sets the female model path when dropped",
      "example": {
        "raw": "SetFemaleGroundPath - sets the female model path when dropped\n\n(nothing) reference.SetFemaleGroundPath modelPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetFemaleGroundPath"
        ]
      }
    },
    {
      "name": "SetMaleIconPath",
      "description": "sets the male icon texture",
      "example": {
        "raw": "SetMaleIconPath - sets the male icon texture\n\n(nothing) reference.SetMaleIconPath iconPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMaleIconPath"
        ]
      }
    },
    {
      "name": "SetFemaleIconPath",
      "description": "sets the female icon texture",
      "example": {
        "raw": "SetFemaleIconPath - sets the female icon texture\n\n(nothing) reference.SetFemaleIconPath iconPath:string objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetFemaleIconPath"
        ]
      }
    },
    {
      "name": "IsPlayable",
      "description": "returns whether the specified object is playable or not. Returns true only if the object is of a type which can be flagged as playable in the editor.",
      "example": {
        "raw": "IsPlayable - returns whether the specified object is playable or not. Returns true only if the object is of a type which can be flagged as playable in the editor.\n\n(isPlayable:bool) reference.IsPlayable objectID:ref",
        "return": [
          "isPlayable",
          "bool"
        ],
        "params": [
          "reference.IsPlayable"
        ]
      }
    },
    {
      "name": "IsPlayable2",
      "description": "returns whether the specified object is playable or not. If the object is of a type which cannot be flagged as playable in the editor, this function returns true.",
      "example": {
        "raw": "IsPlayable2 - returns whether the specified object is playable or not. If the object is of a type which cannot be flagged as playable in the editor, this function returns true.\n\n(isPlayable:bool) reference.IsPlayable2 objectID:ref",
        "return": [
          "isPlayable",
          "bool"
        ],
        "params": [
          "reference.IsPlayable2"
        ]
      }
    },
    {
      "name": "SetIsPlayable",
      "description": "specifies whether the object can be used by the player",
      "example": {
        "raw": "SetIsPlayable - specifies whether the object can be used by the player\n\n(nothing) reference.SetIsPlayable isPlayable:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsPlayable"
        ]
      }
    },
    {
      "name": "IsBipedIconPathValid",
      "description": "returns 1 if the icon path for the object exists in the user's Data folder or within one of the BSA archives.",
      "example": {
        "raw": "IsBipedIconPathValid - returns 1 if the icon path for the object exists in the user's Data folder or within one of the BSA archives.\n\n(isPathValid:bool) reference.IsBipedIconPathValid bipedPathCode:int object:ref",
        "return": [
          "isPathValid",
          "bool"
        ],
        "params": [
          "reference.IsBipedIconPathValid"
        ]
      }
    },
    {
      "name": "IsBipedModelPathValid",
      "description": "returns 1 if the model path for the object exists in the user's Data folder or within one of the BSA archives.",
      "example": {
        "raw": "IsBipedModelPathValid - returns 1 if the model path for the object exists in the user's Data folder or within one of the BSA archives.\n\n(isPathValid:bool) reference.IsBipedModelPathValid bipedPathCode:int object:ref",
        "return": [
          "isPathValid",
          "bool"
        ],
        "params": [
          "reference.IsBipedModelPathValid"
        ]
      }
    },
    {
      "name": "GetBipedModelPath",
      "description": "returns the file path of one of the models for the specified biped object.",
      "example": {
        "raw": "GetBipedModelPath - returns the file path of one of the models for the specified biped object.\n\n(path:string_var) reference.GetBipedModelPath bipedPathCode:int object:ref",
        "return": [
          "path",
          "string_var"
        ],
        "params": [
          "reference.GetBipedModelPath"
        ]
      }
    },
    {
      "name": "SetBipedModelPathEX",
      "description": "sets the file path of the male or female model for the specified biped object.",
      "example": {
        "raw": "SetBipedModelPathEX - sets the file path of the male or female model for the specified biped object.\n\n(nothing) reference.SetBipedModelPathEX path:formatString bipedPathCode:int object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBipedModelPathEX"
        ]
      }
    },
    {
      "name": "GetBipedIconPath",
      "description": "returns the file path of one of the icons for the specified biped object.",
      "example": {
        "raw": "GetBipedIconPath - returns the file path of one of the icons for the specified biped object.\n\n(path:string_var) reference.GetBipedIconPath bipedPathCode:int object:ref",
        "return": [
          "path",
          "string_var"
        ],
        "params": [
          "reference.GetBipedIconPath"
        ]
      }
    },
    {
      "name": "SetBipedIconPathEX",
      "description": "sets the file path of the male or female icon for the specified biped object.",
      "example": {
        "raw": "SetBipedIconPathEX - sets the file path of the male or female icon for the specified biped object.\n\n(nothing) reference.SetBipedIconPathEX path:formatString bipedPathCode:int object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBipedIconPathEX"
        ]
      }
    },
    {
      "name": "GetHidesRings",
      "description": "returns 1 if the \"hides rings\" flag is set for the biped object.",
      "example": {
        "raw": "GetHidesRings - returns 1 if the \"hides rings\" flag is set for the biped object.\n\n(hidesRings:bool) reference.GetHidesRings object:ref",
        "return": [
          "hidesRings",
          "bool"
        ],
        "params": [
          "reference.GetHidesRings"
        ]
      }
    },
    {
      "name": "GetHidesAmulet",
      "description": "returns 1 if the \"hides amulet\" flag is set for the biped object.",
      "example": {
        "raw": "GetHidesAmulet - returns 1 if the \"hides amulet\" flag is set for the biped object.\n\n(hidesAmulet:bool) reference.GetHidesAmulet object:Ref",
        "return": [
          "hidesAmulet",
          "bool"
        ],
        "params": [
          "reference.GetHidesAmulet"
        ]
      }
    },
    {
      "name": "SetHidesRings",
      "description": "modifies the \"hides rings\" flag.",
      "example": {
        "raw": "SetHidesRings - modifies the \"hides rings\" flag.\n\n(nothing) reference.SetHidesRings hidesRings:bool object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetHidesRings"
        ]
      }
    },
    {
      "name": "SetHidesAmulet",
      "description": "modifies the \"hides amulet\" flag.",
      "example": {
        "raw": "SetHidesAmulet - modifies the \"hides amulet\" flag.\n\n(nothing) reference.SetHidesAmulet hidesAmulet:bool object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetHidesAmulet"
        ]
      }
    },
    {
      "name": "GetBipedSlotMask",
      "description": "returns the slots occupied by a biped object.",
      "example": {
        "raw": "GetBipedSlotMask - returns the slots occupied by a biped object.\n\n(slotMask:int) reference.GetBipedSlotMask object:ref",
        "return": [
          "slotMask",
          "int"
        ],
        "params": [
          "reference.GetBipedSlotMask"
        ]
      }
    },
    {
      "name": "SetBipedSlotMask",
      "description": "sets the slots occupied by a biped object.",
      "example": {
        "raw": "SetBipedSlotMask - sets the slots occupied by a biped object.\n\n(nothing) reference.SetBipedSlotMask slotMask:int object:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBipedSlotMask"
        ]
      }
    },
    {
      "name": "GetNumDetectedActors",
      "description": "returns the number of other actors of which the calling actor may detect. This includes actors detected at \"Lost\" or \"Unseen\" level.",
      "example": {
        "raw": "GetNumDetectedActors - returns the number of other actors of which the calling actor may detect. This includes actors detected at \"Lost\" or \"Unseen\" level.\n\n(numDetectedActors:int) reference.GetNumDetectedActors",
        "return": [
          "numDetectedActors",
          "int"
        ],
        "params": [
          "reference.GetNumDetectedActors"
        ]
      }
    },
    {
      "name": "GetNthDetectedActor",
      "description": "returns the Nth actor in the calling actor's detection list",
      "example": {
        "raw": "GetNthDetectedActor - returns the Nth actor in the calling actor's detection list\n\n(actor:ref) reference.GetNthDetectedActor index:short",
        "return": [
          "actor",
          "ref"
        ],
        "params": [
          "reference.GetNthDetectedActor"
        ]
      }
    },
    {
      "name": "SetDetectionState",
      "description": "sets the ",
      "example": {
        "raw": "SetDetectionState - sets the detection state of the calling actor toward the specified actor reference. Note that Oblivion recalculates this value frequently for actors in high process; the function's main purpose is to reset the detection state of unconscious actors.\n\n(nothing) reference.SetDetectionState actor:ref detection state:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetDetectionState"
        ]
      }
    },
    {
      "name": "IsBlocking",
      "description": "returns 1 if the calling actor is blocking",
      "example": {
        "raw": "IsBlocking - returns 1 if the calling actor is blocking\n\n(isBlocking:bool) reference.IsBlocking",
        "return": [
          "isBlocking",
          "bool"
        ],
        "params": [
          "reference.IsBlocking"
        ]
      }
    },
    {
      "name": "IsAttacking",
      "description": "returns 1 if the calling actor is attacking",
      "example": {
        "raw": "IsAttacking - returns 1 if the calling actor is attacking\n\nNote: Will return 1 for a few frames while the player is power attacking as well. In cases where a normal and a power attack is to be differentiated, OnControlDown and IsControlPressed can be substituted for IsAttacking and IsPowerAttacking respectively, with appropriate checks. (TODO: Verify)\n\n(isAttacking:bool) reference.IsAttacking",
        "return": [
          "nControlDow"
        ],
        "params": []
      }
    },
    {
      "name": "IsRecoiling",
      "description": "returns 1 if the calling actor is recoiling",
      "example": {
        "raw": "IsRecoiling - returns 1 if the calling actor is recoiling\n\n(isRecoiling:bool) reference.IsRecoiling",
        "return": [
          "isRecoiling",
          "bool"
        ],
        "params": [
          "reference.IsRecoiling"
        ]
      }
    },
    {
      "name": "IsDodging",
      "description": "returns 1 if the calling actor is dodging",
      "example": {
        "raw": "IsDodging - returns 1 if the calling actor is dodging\n\n(isDodging:bool) reference.IsDodging",
        "return": [
          "isDodging",
          "bool"
        ],
        "params": [
          "reference.IsDodging"
        ]
      }
    },
    {
      "name": "IsStaggered",
      "description": "returns 1 if the calling actor is staggered",
      "example": {
        "raw": "IsStaggered - returns 1 if the calling actor is staggered\n\n(isStaggered:bool) reference.IsStaggered",
        "return": [
          "isStaggered",
          "bool"
        ],
        "params": [
          "reference.IsStaggered"
        ]
      }
    },
    {
      "name": "IsMovingForward",
      "description": "returns 1 if the calling actor is attempting to move forward, even if his path is blocked.",
      "example": {
        "raw": "IsMovingForward - returns 1 if the calling actor is attempting to move forward, even if his path is blocked.\n\n(isMovingForward:bool) reference.IsMovingForward",
        "return": [
          "isMovingForward",
          "bool"
        ],
        "params": [
          "reference.IsMovingForward"
        ]
      }
    },
    {
      "name": "IsMovingLeft",
      "description": "returns 1 if the calling actor is attempting to strafe left",
      "example": {
        "raw": "IsMovingLeft - returns 1 if the calling actor is attempting to strafe left\n\n(isMovingLeft:bool) reference.IsMovingLeft",
        "return": [
          "isMovingLeft",
          "bool"
        ],
        "params": [
          "reference.IsMovingLeft"
        ]
      }
    },
    {
      "name": "IsMovingRight",
      "description": "returns 1 if the calling actor is attempting to strafe right",
      "example": {
        "raw": "IsMovingRight - returns 1 if the calling actor is attempting to strafe right\n\n(isMovingRight:bool) reference.IsMovingRight",
        "return": [
          "isMovingRight",
          "bool"
        ],
        "params": [
          "reference.IsMovingRight"
        ]
      }
    },
    {
      "name": "IsMovingBackward",
      "description": "returns 1 if the calling actor is attempting to move backwards",
      "example": {
        "raw": "IsMovingBackward - returns 1 if the calling actor is attempting to move backwards\n\n(isMovingBackwards:bool) reference.IsMovingBackwards",
        "return": [
          "isMovingBackwards",
          "bool"
        ],
        "params": [
          "reference.IsMovingBackwards"
        ]
      }
    },
    {
      "name": "IsTurningLeft",
      "description": "returns 1 if the calling actor is turning left",
      "example": {
        "raw": "IsTurningLeft - returns 1 if the calling actor is turning left\n\n(isTurningLeft:bool) reference.IsTurningLeft",
        "return": [
          "isTurningLeft",
          "bool"
        ],
        "params": [
          "reference.IsTurningLeft"
        ]
      }
    },
    {
      "name": "IsTurningRight",
      "description": "returns 1 if the calling actor is turning right",
      "example": {
        "raw": "IsTurningRight - returns 1 if the calling actor is turning right\n\n(isTurningRight:bool) reference.IsTurningRight",
        "return": [
          "isTurningRight",
          "bool"
        ],
        "params": [
          "reference.IsTurningRight"
        ]
      }
    },
    {
      "name": "IsInAir",
      "description": "returns 1 if the calling actor is airborne, whether jumping or falling",
      "example": {
        "raw": "IsInAir - returns 1 if the calling actor is airborne, whether jumping or falling\n\n(isInAir:bool) reference.IsInAir",
        "return": [
          "isInAir",
          "bool"
        ],
        "params": [
          "reference.IsInAir"
        ]
      }
    },
    {
      "name": "IsJumping",
      "description": "returns 1 if the calling actor is beginning to jump (playing the JumpStart anim group)",
      "example": {
        "raw": "IsJumping - returns 1 if the calling actor is beginning to jump (playing the JumpStart anim group)\n\n(isJumping:bool) reference.IsJumping",
        "return": [
          "isJumping",
          "bool"
        ],
        "params": [
          "reference.IsJumping"
        ]
      }
    },
    {
      "name": "IsOnGround",
      "description": "returns 1 if the calling actor is on the ground",
      "example": {
        "raw": "IsOnGround - returns 1 if the calling actor is on the ground\n\n(isOnGround:bool) reference.IsOnGround",
        "return": [
          "isOnGround",
          "bool"
        ],
        "params": [
          "reference.IsOnGround"
        ]
      }
    },
    {
      "name": "IsFlying",
      "description": "returns 1 if the calling actor is flying. Only creatures can fly.",
      "example": {
        "raw": "IsFlying - returns 1 if the calling actor is flying. Only creatures can fly.\n\n(isFlying:bool) reference.IsFlying",
        "return": [
          "isFlying",
          "bool"
        ],
        "params": [
          "reference.IsFlying"
        ]
      }
    },
    {
      "name": "IsPowerAttacking",
      "description": "returns 1 if the calling actor is executing a power attack. See also the note on ",
      "example": {
        "raw": "IsPowerAttacking - returns 1 if the calling actor is executing a power attack. See also the note on IsAttacking.\n\n(isPowerAttacking:bool) reference.IsPowerAttacking",
        "return": [
          "sAttackin"
        ],
        "params": []
      }
    },
    {
      "name": "IsCasting",
      "description": "returns 1 if the calling actor is casting a spell",
      "example": {
        "raw": "IsCasting - returns 1 if the calling actor is casting a spell\n\n(isCasting:bool) reference.IsCasting",
        "return": [
          "isCasting",
          "bool"
        ],
        "params": [
          "reference.IsCasting"
        ]
      }
    },
    {
      "name": "GetFallTimer",
      "description": "returns the length of time for which the actor has been falling",
      "example": {
        "raw": "GetFallTimer - returns the length of time for which the actor has been falling\n\n(fallTimer:float) reference.GetFallTimer",
        "return": [
          "fallTimer",
          "float"
        ],
        "params": [
          "reference.GetFallTimer"
        ]
      }
    },
    {
      "name": "IsAnimGroupPlaying",
      "description": "returns 1 if the specified ",
      "example": {
        "raw": "IsAnimGroupPlaying - returns 1 if the specified animation group is currently being played by the calling actor\n\n(playing:bool) reference.IsAnimGroupPlaying animationGroup:chars",
        "return": [
          "playing",
          "bool"
        ],
        "params": [
          "reference.IsAnimGroupPlaying"
        ]
      }
    },
    {
      "name": "AnimPathIncludes",
      "description": "returns 1 if one of the calling actor's currently playing animation paths includes the specified substring",
      "example": {
        "raw": "AnimPathIncludes - returns 1 if one of the calling actor's currently playing animation paths includes the specified substring\n\n(includes:bool) reference.AnimPathIncludes pathString:string",
        "return": [
          "includes",
          "bool"
        ],
        "params": [
          "reference.AnimPathIncludes"
        ]
      }
    },
    {
      "name": "GetProcessLevel",
      "description": "returns the actor's current process level, or -1 if called on a non-actor. Process level determines how frequently the game updates an actor's AI. In general, high process actors are in the same cell as the player, while more distant actors are kept at a lower process level.",
      "example": {
        "raw": "GetProcessLevel - returns the actor's current process level, or -1 if called on a non-actor. Process level determines how frequently the game updates an actor's AI. In general, high process actors are in the same cell as the player, while more distant actors are kept at a lower process level.\n\n(processLevel:int) reference.GetProcessLevel",
        "return": [
          "processLevel",
          "int"
        ],
        "params": [
          "reference.GetProcessLevel"
        ]
      }
    },
    {
      "name": "GetEquippedItems",
      "description": "returns an array containing all items currently equipped by the calling actor",
      "example": {
        "raw": "GetEquippedItems - returns an array containing all items currently equipped by the calling actor\n\n(items:Array) reference.GetEquippedItems",
        "return": [
          "items",
          "Array"
        ],
        "params": [
          "reference.GetEquippedItems"
        ]
      }
    },
    {
      "name": "GetSpells",
      "description": "returns an array containing all of the spells in an actor's spell list.",
      "example": {
        "raw": "GetSpells - returns an array containing all of the spells in an actor's spell list.\n\n(spells:Array) reference.GetSpells baseActor:ref",
        "return": [
          "spells",
          "Array"
        ],
        "params": [
          "reference.GetSpells"
        ]
      }
    },
    {
      "name": "GetActorAlpha",
      "description": "actor references can be made more or less opaque or transparent by changing their alpha property via SetActorAlpha. This function returns the calling actor's current alpha as a floating point number between 0.0 and 1.0, with 0.0 corresponding to fully transparent and 1.0 to fully opaque.",
      "example": {
        "raw": "GetActorAlpha - actor references can be made more or less opaque or transparent by changing their alpha property via SetActorAlpha. This function returns the calling actor's current alpha as a floating point number between 0.0 and 1.0, with 0.0 corresponding to fully transparent and 1.0 to fully opaque.\n\n(alpha:float) reference.GetActorAlpha",
        "return": [
          "alpha",
          "float"
        ],
        "params": [
          "reference.GetActorAlpha"
        ]
      }
    },
    {
      "name": "GetBaseActorValueC",
      "description": "identical to the game's GetBaseAV command, but accepts an integer actor value code.",
      "example": {
        "raw": "GetBaseActorValueC - identical to the game's GetBaseAV command, but accepts an integer actor value code.\n\n(baseAV:int) reference.GetBaseActorValueC actorValueCode:int",
        "return": [
          "baseAV",
          "int"
        ],
        "params": [
          "reference.GetBaseActorValueC"
        ]
      }
    },
    {
      "name": "GetBaseAV3",
      "description": "returns the same value as the game's GetBaseAV command, but does not include the effects of Fortify abilities.",
      "example": {
        "raw": "GetBaseAV3 - returns the same value as the game's GetBaseAV command, but does not include the effects of Fortify abilities.\n\n(baseAV:int) reference.GetBaseAV3 actorValue:string",
        "return": [
          "baseAV",
          "int"
        ],
        "params": [
          "reference.GetBaseAV3"
        ]
      }
    },
    {
      "name": "GetBaseAV3C",
      "description": "as GetBaseAV3, but takes an actor value code instead of an actor value name.",
      "example": {
        "raw": "GetBaseAV3C - as GetBaseAV3, but takes an actor value code instead of an actor value name.\n\n(baseAV:int) reference.GetBaseAV3C actorValueCode:int",
        "return": [
          "baseAV",
          "int"
        ],
        "params": [
          "reference.GetBaseAV3C"
        ]
      }
    },
    {
      "name": "GetAllies",
      "description": "for an actor in combat, returns an Array of other actors which the game considers allies of the calling actor at that particular moment.",
      "example": {
        "raw": "GetAllies -  for an actor in combat, returns an Array of other actors which the game considers allies of the calling actor at that particular moment.\n\n(allies:Array) reference.GetAllies",
        "return": [
          "allies",
          "Array"
        ],
        "params": [
          "reference.GetAllies"
        ]
      }
    },
    {
      "name": "GetTargets",
      "description": "for an actor in combat, returns an Array of actors which the game considers potential targets of the calling actor at that particular moment.",
      "example": {
        "raw": "GetTargets - for an actor in combat, returns an Array of actors which the game considers potential targets of the calling actor at that particular moment.\n\n(targets:Array) reference.GetTargets",
        "return": [
          "targets",
          "Array"
        ],
        "params": [
          "reference.GetTargets"
        ]
      }
    },
    {
      "name": "GetSelectedSpells",
      "description": "for an actor in combat, returns an Array containing zero to seven spells which the actor has selected from his full spell list (including spells resolved from leveled spell lists) for use. The list contains a maximum of one spell from each of the following categories: bound armor, bound weapon, \"buff\", melee, ranged, restorative, and summon spells.",
      "example": {
        "raw": "GetSelectedSpells - for an actor in combat, returns an Array containing zero to seven spells which the actor has selected from his full spell list (including spells resolved from leveled spell lists) for use. The list contains a maximum of one spell from each of the following categories: bound armor, bound weapon, \"buff\", melee, ranged, restorative, and summon spells.\n\n(spells:Array) reference.GetSelectedSpells",
        "return": [
          "spells",
          "Array"
        ],
        "params": [
          "reference.GetSelectedSpells"
        ]
      }
    },
    {
      "name": "GetCombatSpells",
      "description": "for an actor in combat, returns an Array of all the spells in the actor's spellbook, including spells resolved from leveled spells lists (which are resolved into actual spells when the actor enters combat). The actor will use a subset of these spells during combat; use GetSelectedSpells to determine which of these spells have been selected for use.",
      "example": {
        "raw": "GetCombatSpells - for an actor in combat, returns an Array of all the spells in the actor's spellbook, including spells resolved from leveled spells lists (which are resolved into actual spells when the actor enters combat). The actor will use a subset of these spells during combat; use GetSelectedSpells to determine which of these spells have been selected for use.\n\n(spells:Array) reference.GetCombatSpells",
        "return": [
          "spells",
          "Array"
        ],
        "params": [
          "reference.GetCombatSpells"
        ]
      }
    },
    {
      "name": "PlayIdle",
      "description": "attempts to make the calling actor play the specified idle animation. The animation must be one defined in the editor's Gameplay > Idle Animations window. Pass 1 for the forceIdle parameter to force the actor to play the idle regardless of any other animations currently playing.",
      "example": {
        "raw": "PlayIdle - attempts to make the calling actor play the specified idle animation. The animation must be one defined in the editor's Gameplay &gt; Idle Animations window. Pass 1 for the forceIdle parameter to force the actor to play the idle regardless of any other animations currently playing.\n\nNote: Directly using an idleAnim EditorID gives a compiler error (when not using the compiler override). You must load the idleAnim form in a ref variable and use the ref in the function.\n\n(idlePlayed:bool) ref.PlayIdle idleAnim:ref forceIdle:bool",
        "return": [
          "idlePlayed",
          "bool"
        ],
        "params": [
          "ref.PlayIdle"
        ]
      }
    },
    {
      "name": "IsNaked",
      "description": "returns 1 if the calling actor is naked, 0 otherwise. Naked means without a lowerbody equipment. If requireUpperbody is 1 it also requires an upperbody equipment.",
      "example": {
        "raw": "IsNaked - returns 1 if the calling actor is naked, 0 otherwise. Naked means without a lowerbody equipment. If requireUpperbody is 1 it also requires an upperbody equipment.\n\n(isNaked:bool) reference.IsNaked requireUpperbody:bool",
        "return": [
          "isNaked",
          "bool"
        ],
        "params": [
          "reference.IsNaked"
        ]
      }
    },
    {
      "name": "SetPackageTarget",
      "description": "sets the target of the specified package. Target can be of several types, leading to several syntaxes for this command. The first listed usage sets the target to a specific reference. The second sets it to a particular base object with a specified quantity; when the package executes the actor will look for references to that base object to use as the target(s). The third usage sets the target to a ",
      "example": {
        "raw": "SetPackageTarget - sets the target of the specified package. Target can be of several types, leading to several syntaxes for this command. The first listed usage sets the target to a specific reference. The second sets it to a particular base object with a specified quantity; when the package executes the actor will look for references to that base object to use as the target(s). The third usage sets the target to a code representing the type(s) of objects to be used as targets, along with a quantity. This command does not change the targets of actor references currently executing the package unless they re-evaluate their package after the change has been made.\n\nNote: If the Package is of Follow type, the distance in feet (integer returned with \"Value\" key from the StringMap returned by GetPackageTargetData) to follow the Target will be automatically set to 1. So in this case, it will be better to use SetPackageTargetData instead.\n\n(nothing) SetPackageTarget package:ref targetReference:ref\n\n(nothing) SetPackageTarget package:ref baseObject:ref quantity:int\n\n(nothing) SetPackageTarget package:ref objectCode:int quantity:int",
        "return": [
          "etPackageTargetDat"
        ],
        "params": []
      }
    },
    {
      "name": "GetPackageData",
      "description": "returns a stringmap containing info about a package. The returned stringmap contains the following keys:",
      "example": {
        "raw": "GetPackageData - returns a stringmap containing info about a package. The returned stringmap contains the following keys:\n\n\n\t\"Type\" - a string indicating the type of the package (e.g. \"Eat\", \"Wander\")\n\t\"Schedule\" - a stringmap of the same format as the returned by GetPackageScheduleData\n\t\"Target\" - a stringmap of the same format as the returned by GetPackageTargetData\n\t\"Location\" - a stringmap of the same format as the returned by GetPackageLocationData\n(StringMap) GetPackageData package:ref",
        "return": [
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "GetPackageScheduleData",
      "description": "returns a stringmap containing info about a package schedule. The returned stringmap contains the following keys:",
      "example": {
        "raw": "GetPackageScheduleData - returns a stringmap containing info about a package schedule. The returned stringmap contains the following keys:\n\n\n\t\"Day\" - a string, e.g. \"Sunday\"\n\t\"Month\" - a string, e.g. \"January\"\n\t\"Date\" - integer, 1-30\n\t\"Time\" - integer, 0-23\n\t\"Duration\" - integer\n(StringMap) GetPackageScheduleData package:ref",
        "return": [
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "GetPackageLocationData",
      "description": "returns a stringmap containing info about a package location. The returned stringmap contains the following keys:",
      "example": {
        "raw": "GetPackageLocationData - returns a stringmap containing info about a package location. The returned stringmap contains the following keys:\n\n\n\t\"Type\" - string (\"Reference\", \"Cell\", \"Current\", \"Editor\", \"Object\", \"ObjectType\")\n\t\"Radius\" - int\n\t\"Object\" - form (for types Reference, Cell, and Object) OR\n\t\"ObjectType\" - string as in editor, e.g. \"Books\", \"Spells: School Illusion\" (for ObjectType)\n(StringMap) GetPackageLocationData package:ref",
        "return": [
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "GetPackageTargetData",
      "description": "returns a stringmap containing info about a package target. The returned stringmap contains the following keys:",
      "example": {
        "raw": "GetPackageTargetData - returns a stringmap containing info about a package target. The returned stringmap contains the following keys:\n\n\n\t\"Type\" - string (\"Reference\", \"Object\", \"ObjectType\")\n\t\"Value\" - integer\n\t\"Object\" - form (for types Reference and Object) OR\n\t\"ObjectType\" - string as in editor, e.g. \"Books\", \"Spells: School Illusion\" (for ObjectType)\n(StringMap) GetPackageTargetData package:ref",
        "return": [
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "SetPackageData",
      "description": "sets the target, schedule, and/or location of a package. It accepts a stringmap consisting of one or more stringmaps with keys \"Location\", \"Target\", or \"Schedule\", each following the formats listed above. If any data is omitted, the existing package data will be retained.",
      "example": {
        "raw": "SetPackageData - sets the target, schedule, and/or location of a package. It accepts a stringmap consisting of one or more stringmaps with keys \"Location\", \"Target\", or \"Schedule\", each following the formats listed above. If any data is omitted, the existing package data will be retained.\n\n(success:bool) SetPackageData package:ref data:StringMap",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetPackageTargetData",
      "description": "sets the target of a package. Accepts a stringmap of the same format as that returned by ",
      "example": {
        "raw": "SetPackageTargetData - sets the target of a package. Accepts a stringmap of the same format as that returned by GetPackageTargetData. Omitted fields retain their existing values.\n\n(success:bool) SetPackageTargetData package:ref data:StringMap",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetPackageLocationData",
      "description": "sets the location of a package based on the passed stringmap of the same format as that returned by ",
      "example": {
        "raw": "SetPackageLocationData - sets the location of a package based on the passed stringmap of the same format as that returned by GetPackageLocationData. Omitted fields retain their existing values.\n\nNote: Omitted fields might not actually retain their existing values, need to check. If true, TODO: Add example here. (TODO: Verify)\n\n(success:bool) SetPackageLocationData package:ref data:StringMap",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetPackageScheduleData",
      "description": "sets the schedule of a package. Accepts a stringmap of the same format as that returned by ",
      "example": {
        "raw": "SetPackageScheduleData - sets the schedule of a package. Accepts a stringmap of the same format as that returned by GetPackageScheduleData. Omitted fields retain their existing values.\n\nNote: TODO: Verify same thing as on function above.\n\n(success:bool) SetPackageScheduleData package:ref data:StringMap",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsPoison",
      "description": "returns whether the alchemy item is a poison.",
      "example": {
        "raw": "IsPoison - returns whether the alchemy item is a poison.\n\nNote: An alchemy item with even a single non-hostile effect is not a poison.\n\n(isPoison:bool) reference.IsPoison objectID:ref",
        "return": [
          "isPoison",
          "bool"
        ],
        "params": [
          "reference.IsPoison"
        ]
      }
    },
    {
      "name": "MatchPotion",
      "description": "Oblivion keeps track of potions created by the player and reuses them if another potion is created with the same effects as one created previously. This command takes a potion and returns a previously-created potion bearing the same effects, if one exists. Note that in some cases it may return the same potion that was passed as the argument. Mainly useful during potion creation in the Alchemy menu, or when dynamically modifying potion effects via script.",
      "example": {
        "raw": "MatchPotion - Oblivion keeps track of potions created by the player and reuses them if another potion is created with the same effects as one created previously. This command takes a potion and returns a previously-created potion bearing the same effects, if one exists. Note that in some cases it may return the same potion that was passed as the argument. Mainly useful during potion creation in the Alchemy menu, or when dynamically modifying potion effects via script.\n\n(matchedPotion:ref) MatchPotion potionToMatch:ref",
        "return": [
          "matchedPotion",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetApparatusType",
      "description": "returns the alchemy apparatus type of the calling reference or passed objectID",
      "example": {
        "raw": "GetApparatusType - returns the alchemy apparatus type of the calling reference or passed objectID\n\n(apparatusType:int) reference.GetApparatusType objectID:ref",
        "return": [
          "apparatusType",
          "int"
        ],
        "params": [
          "reference.GetApparatusType"
        ]
      }
    },
    {
      "name": "SetApparatusType",
      "description": "sets the alchemy type of the calling reference or passed objectID",
      "example": {
        "raw": "SetApparatusType - sets the alchemy type of the calling reference or passed objectID\n\n(nothing) reference.SetApparatusType apparatusType:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetApparatusType"
        ]
      }
    },
    {
      "name": "GetQuality",
      "description": "returns the quality level of the calling reference or passed objectID",
      "example": {
        "raw": "GetQuality - returns the quality level of the calling reference or passed objectID\n\n(quality:float) reference.GetQuality objectID:ref",
        "return": [
          "quality",
          "float"
        ],
        "params": [
          "reference.GetQuality"
        ]
      }
    },
    {
      "name": "SetQuality",
      "description": "sets the quality level of the calling reference or passed objectID",
      "example": {
        "raw": "SetQuality - sets the quality level of the calling reference or passed objectID\n\n(nothing) reference.SetQuality quality:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetQuality"
        ]
      }
    },
    {
      "name": "ModQuality",
      "description": "modifies the quality of the calling reference or passed objectID",
      "example": {
        "raw": "ModQuality - modifies the quality of the calling reference or passed objectID\n\n(nothing) reference.ModQuality modQualityBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModQuality"
        ]
      }
    },
    {
      "name": "GetArmorAR",
      "description": "returns the armor rating of the object",
      "example": {
        "raw": "GetArmorAR - returns the armor rating of the object\n\nNote: The value returned by this function is the armor rating as defined in the Construction Set, multiplied by 100. (TODO: Verify)\n\n(armorRating:int) reference.GetArmorAR objectID:ref",
        "return": [
          "armorRating",
          "int"
        ],
        "params": [
          "reference.GetArmorAR"
        ]
      }
    },
    {
      "name": "SetArmorAR",
      "description": "sets the armor rating of the object",
      "example": {
        "raw": "SetArmorAR - sets the armor rating of the object\n\n(nothing) reference.SetArmorAR nuArmorRating:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetArmorAR"
        ]
      }
    },
    {
      "name": "ModArmorAR",
      "description": "modifies the armor rating of the object up or down",
      "example": {
        "raw": "ModArmorAR - modifies the armor rating of the object up or down\n\n(nothing) reference.ModArmorAR modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModArmorAR"
        ]
      }
    },
    {
      "name": "GetArmorType",
      "description": "returns 0 if light armor and 1 if heavy armor",
      "example": {
        "raw": "GetArmorType - returns 0 if light armor and 1 if heavy armor\n\n(armorType:int) reference.GetArmorType objectID:ref",
        "return": [
          "armorType",
          "int"
        ],
        "params": [
          "reference.GetArmorType"
        ]
      }
    },
    {
      "name": "SetArmorType",
      "description": "sets whether the armor is heavy or light",
      "example": {
        "raw": "SetArmorType - sets whether the armor is heavy or light\n\n(nothing) reference.SetArmorType nuArmorType:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetArmorType"
        ]
      }
    },
    {
      "name": "GetBirthsignSpells",
      "description": "returns an Array containing the spells associated with the specified birthsign",
      "example": {
        "raw": "GetBirthsignSpells - returns an Array containing the spells associated with the specified birthsign\n\n(spells:Array) GetBirthsignSpells birthsign:ref",
        "return": [
          "spells",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetBookCantBeTaken",
      "description": "returns 1 if the book cannot be taken",
      "example": {
        "raw": "GetBookCantBeTaken - returns 1 if the book cannot be taken\n\n(cantBeTaken:bool) reference.GetBookCantBeTaken objectID:ref",
        "return": [
          "cantBeTaken",
          "bool"
        ],
        "params": [
          "reference.GetBookCantBeTaken"
        ]
      }
    },
    {
      "name": "GetBookIsScroll",
      "description": "returns whether the book is a scroll or not",
      "example": {
        "raw": "GetBookIsScroll - returns whether the book is a scroll or not\n\n(isScroll:bool) reference.GetBookIsScroll objectID:ref\n\n(isScroll:bool) reference.IsScroll objectID:ref",
        "return": [
          "isScroll",
          "bool"
        ],
        "params": [
          "reference.GetBookIsScroll"
        ]
      }
    },
    {
      "name": "GetBookSkillTaught",
      "description": "returns the skill taught by the book. If no skill is taught, returns -1.",
      "example": {
        "raw": "GetBookSkillTaught - returns the skill taught by the book. If no skill is taught, returns -1.\n\n(skillTaught:int) reference.GetBookSkillTaught objectID:ref",
        "return": [
          "skillTaught",
          "int"
        ],
        "params": [
          "reference.GetBookSkillTaught"
        ]
      }
    },
    {
      "name": "SetBookCantBeTaken",
      "description": "sets whether the book can be taken",
      "example": {
        "raw": "SetBookCantBeTaken - sets whether the book can be taken\n\n(nothing) reference.SetBookCantBeTaken cantBeTaken:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBookCantBeTaken"
        ]
      }
    },
    {
      "name": "SetBookIsScroll",
      "description": "sets whether the book is a scroll",
      "example": {
        "raw": "SetBookIsScroll - sets whether the book is a scroll\n\n(nothing) reference.SetBookIsScroll isScroll:bool objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBookIsScroll"
        ]
      }
    },
    {
      "name": "SetBookSkillTaught",
      "description": "sets the skill the book teaches. The the skillTaught value is not one of the skills, sets the value to 255.",
      "example": {
        "raw": "SetBookSkillTaught - sets the skill the book teaches. The the skillTaught value is not one of the skills, sets the value to 255.\n\n(nothing) reference.SetBookSkillTaught skillTaught:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetBookSkillTaught"
        ]
      }
    },
    {
      "name": "GetBookText",
      "description": "returns the text of a book as a string. The result must be assigned to a string variable.",
      "example": {
        "raw": "GetBookText - returns the text of a book as a string. The result must be assigned to a string variable.\n\n(bookText:string_var) reference.GetBookText book:ref",
        "return": [
          "bookText",
          "string_var"
        ],
        "params": [
          "reference.GetBookText"
        ]
      }
    },
    {
      "name": "GetBookLength",
      "description": "returns the number of characters in a book's text.",
      "example": {
        "raw": "GetBookLength - returns the number of characters in a book's text.\n\n(length:int) reference.GetBookLength book:ref",
        "return": [
          "length",
          "int"
        ],
        "params": [
          "reference.GetBookLength"
        ]
      }
    },
    {
      "name": "GetCellMusicType",
      "description": "returns the music type of the player's current cell.",
      "example": {
        "raw": "GetCellMusicType - returns the music type of the player's current cell.\n\n(musicType:int) GetCellMusicType",
        "return": [
          "musicType",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellMusicType",
      "description": "sets the music type used in the specified cell.",
      "example": {
        "raw": "SetCellMusicType - sets the music type used in the specified cell.\n\n(nothing) SetCellMusicType cell:ref musicType:int ",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellWaterHeight",
      "description": "changes the water height of the specified cell. In order for the command to take full effect, the cell must be reloaded (con_PurgeCellBuffers can be used to forcibly unload it if it is still in memory). If used to alter the water height in a loaded cell, the water shader will reflect the new height and actors will switch between swimming and walking animations appropriately. However, floating physics and the water surface will not be updated until the cell is reloaded. This command has no effect in exteriors or in cells which have no water.",
      "example": {
        "raw": "SetCellWaterHeight - changes the water height of the specified cell. In order for the command to take full effect, the cell must be reloaded (con_PurgeCellBuffers can be used to forcibly unload it if it is still in memory). If used to alter the water height in a loaded cell, the water shader will reflect the new height and actors will switch between swimming and walking animations appropriately. However, floating physics and the water surface will not be updated until the cell is reloaded. This command has no effect in exteriors or in cells which have no water.\n\n(waterHeightChanged:bool) SetCellWaterHeight cell:ref newHeight:float",
        "return": [
          "waterHeightChanged",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellDetachTime",
      "description": "returns the cell's detach time, described above.",
      "example": {
        "raw": "GetCellDetachTime - returns the cell's detach time, described above.\n\n(detachTime:int) GetCellDetachTime cell:ref",
        "return": [
          "detachTime",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellResetHours",
      "description": "returns the number of hours which must pass in the game before the cell is reset.",
      "example": {
        "raw": "GetCellResetHours - returns the number of hours which must pass in the game before the cell is reset.\n\n(hours:int) GetCellResetHours cell:ref",
        "return": [
          "hours",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellResetHours",
      "description": "sets the number of hours which mustpass before the cell is reset. This value must be less than the game setting iHoursToRespawnCell. Using this function to modify the reset hours for the current cell, or for exterior cells, has no effect.",
      "example": {
        "raw": "SetCellResetHours - sets the number of hours which mustpass before the cell is reset. This value must be less than the game setting iHoursToRespawnCell. Using this function to modify the reset hours for the current cell, or for exterior cells, has no effect.\n\n(bSucceeded:bool) SetCellResetHours cell:ref hours:int",
        "return": [
          "bSucceeded",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellBehavesAsExterior",
      "description": "returns true if the \"behaves as exterior\" cell is checked for the specified interior cell.",
      "example": {
        "raw": "GetCellBehavesAsExterior - returns true if the \"behaves as exterior\" cell is checked for the specified interior cell.\n\n(behavesAsExterior:bool) GetCellBehavesAsExterior cell:ref",
        "return": [
          "behavesAsExterior",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsCellPublic",
      "description": "returns 1 if the cell is marked as 'public'.",
      "example": {
        "raw": "IsCellPublic - returns 1 if the cell is marked as 'public'.\n\n(isPublic:bool) IsCellPublic",
        "return": [
          "isPublic",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellIsPublic",
      "description": "sets the 'public' flag for the cell.",
      "example": {
        "raw": "SetCellIsPublic - sets the 'public' flag for the cell.\n\n(nothing) SetCellIsPublic cell:ref isPublic:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellHasWater",
      "description": "sets the flag indicating whether or not the interior cell has water. Only affects interior cells, and changes are not visible until the cell is reloaded. Has no effect if called while the player is inside the specified cell.",
      "example": {
        "raw": "SetCellHasWater - sets the flag indicating whether or not the interior cell has water. Only affects interior cells, and changes are not visible until the cell is reloaded. Has no effect if called while the player is inside the specified cell.\n\n(nothing) SetCellHasWater cell:ref hasWater:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellBehavesAsExterior",
      "description": "sets the 'behaves like exterior' flag for the interior cell. Has no effect if called while the player is inside the specified cell.",
      "example": {
        "raw": "SetCellBehavesAsExterior - sets the 'behaves like exterior' flag for the interior cell. Has no effect if called while the player is inside the specified cell.\n\n(nothing) SetCellBehavesAsExterior cell:ref behavesAsExterior:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellClimate",
      "description": "returns the climate for the specified cell. ",
      "example": {
        "raw": "GetCellClimate - returns the climate for the specified cell. \n\n(climate:ref) GetCellClimate cell:ref",
        "return": [
          "climate",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellClimate",
      "description": "sets the climate for the specified cell.",
      "example": {
        "raw": "SetCellClimate - sets the climate for the specified cell.\n\n(nothing) SetCellClimate cell:ref climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellLighting",
      "description": "returns a StringMap describing the lighting properties for the interior cell. The StringMap contains the following key-value pairs corresponding to the fields in the editor's Cell Lighting tab, where 'RGB Array' is a 3-element Array with values from 0-255 in the order {red, green, blue}: ",
      "example": {
        "raw": "GetCellLighting - returns a StringMap describing the lighting properties for the interior cell. The StringMap contains the following key-value pairs corresponding to the fields in the editor's Cell Lighting tab, where 'RGB Array' is a 3-element Array with values from 0-255 in the order {red, green, blue}: \n\n\n\t\t\"ambient\" (RGB Array)\n\t\t\"directional\" (RGB Array)\n\t\t\"fog\" (RGB Array)\n\t\t\"rotxy\" (float)\n\t\t\"rotz\" (float)\n\t\t\"fognear\" (float)\n\t\t\"fogfar\" (float)\n\t\t\"clip\" (float)\n\t\t\"fade\" (float)\n\n(lighting:StringMap) GetCellLighting cell:ref",
        "return": [
          "lighting",
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellLighting",
      "description": "alters one or more of an interior cell's lighting fields, taking a StringMap of the same format as that returned by ",
      "example": {
        "raw": "SetCellLighting - alters one or more of an interior cell's lighting fields, taking a StringMap of the same format as that returned by GetCellLighting. Include only the elements you wish to change; if a key is not found its value will not be modified.\n\n(nothing) SetCellLighting cell:ref newValues:StringMap",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetTerrainHeight",
      "description": "returns the height of the terrain mesh at the specified x and y coordinates within the current exterior worldspace. X and Y are worldspace coordinates (e.g. as returned by GetPos). If the coordinates are outside of any loaded cells, returns 0.0. Note that this command does not check for collision with surfaces other than terrain.",
      "example": {
        "raw": "GetTerrainHeight - returns the height of the terrain mesh at the specified x and y coordinates within the current exterior worldspace. X and Y are worldspace coordinates (e.g. as returned by GetPos). If the coordinates are outside of any loaded cells, returns 0.0. Note that this command does not check for collision with surfaces other than terrain.\n\n(height:float) GetTerrainHeight x:float y:float",
        "return": [
          "height",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IsOblivionInterior",
      "description": "returns 1 if the \"Oblivion interior\" flag has been checked for the specified interior cell.",
      "example": {
        "raw": "IsOblivionInterior - returns 1 if the \"Oblivion interior\" flag has been checked for the specified interior cell.\n\n(oblivionInterior:bool) IsOblivionInterior cell:ref",
        "return": [
          "oblivionInterior",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsOblivionWorld",
      "description": "returns 1 if the \"Oblivion World\" flag has been checked for the specified world space.",
      "example": {
        "raw": "IsOblivionWorld - returns 1 if the \"Oblivion World\" flag has been checked for the specified world space.\n\n(oblivionWorld:bool) IsOblivionWorld worldspace:ref",
        "return": [
          "oblivionWorld",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "CanFastTravelFromWorld",
      "description": "returns 1 if the player is allowed to fast-travel from the specified world space.",
      "example": {
        "raw": "CanFastTravelFromWorld - returns 1 if the player is allowed to fast-travel from the specified world space.\n\n(canFastTravel:bool) CanFastTravelFromWorld worldspace:ref",
        "return": [
          "canFastTravel",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetCanFastTravelFromWorld",
      "description": "sets whether the player can fast-travel from the specified world space.",
      "example": {
        "raw": "SetCanFastTravelFromWorld - sets whether the player can fast-travel from the specified world space.\n\n(nothing) SetCanFastTravelFromWorld worldspace:ref canFastTravel:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellWaterType",
      "description": "returns the Water used by the interior cell. Returns zero if the cell has no water, or if the cell uses the default water type.",
      "example": {
        "raw": "GetCellWaterType - returns the Water used by the interior cell. Returns zero if the cell has no water, or if the cell uses the default water type.\n\n(waterType:ref) GetCellWaterType cell:ref",
        "return": [
          "waterType",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetCellWaterType",
      "description": "sets the Water used by the interior cell. Changes will not be visible until the cell is reloaded.",
      "example": {
        "raw": "SetCellWaterType - sets the Water used by the interior cell. Changes will not be visible until the cell is reloaded.\n\n(nothing) SetCellWaterType cell:ref waterType:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellNorthRotation",
      "description": "returns the rotation on the Z axis of the north marker within the specified interior cell, if one is present. The game uses the north marker's Z rotation to determine what direction is considered \"north\". Rotation returned is in degrees and is 0.0 if no north marker is present in the specified cell.",
      "example": {
        "raw": "GetCellNorthRotation - returns the rotation on the Z axis of the north marker within the specified interior cell, if one is present. The game uses the north marker's Z rotation to determine what direction is considered \"north\". Rotation returned is in degrees and is 0.0 if no north marker is present in the specified cell.\n\n(rotation:float) GetCellNorthRotation cell:ref",
        "return": [
          "rotation",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IsInvertFastTravel",
      "description": "returns true if the cell has InvertFastTravel flag ",
      "example": {
        "raw": "IsInvertFastTravel - returns true if the cell has InvertFastTravel flag \n\n(ret:bool) IsInvertFastTravel cell:ref",
        "return": [
          "ret",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetInvertFastTravel",
      "description": "sets the InvertFastTravel flag on the provided cell, reversing the behaviour for the cell type regarding fast travel, allowing travel from interiors.",
      "example": {
        "raw": "SetInvertFastTravel - sets the InvertFastTravel flag on the provided cell, reversing the behaviour for the cell type regarding fast travel, allowing travel from interiors.\n\n SetInvertFastTravel cell:ref  active:bool",
        "return": "",
        "params": [
          ""
        ]
      }
    },
    {
      "name": "IsCantWait",
      "description": "returns true if the cell has CantWait flag ",
      "example": {
        "raw": "IsCantWait - returns true if the cell has CantWait flag \n\n(ret:bool) IsCantWait cell:ref",
        "return": [
          "ret",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetCantWait",
      "description": "sets the CantWait flag on the provided cell, preventing waiting (and sleeping) inside. The change isn't backed into the savegame",
      "example": {
        "raw": "SetCantWait - sets the CantWait flag on the provided cell, preventing waiting (and sleeping) inside. The change isn't backed into the savegame\n\n SetCantWait cell:ref  active:bool",
        "return": "",
        "params": [
          ""
        ]
      }
    },
    {
      "name": "GetCurrentClimateID",
      "description": "returns the refID of the current climate.",
      "example": {
        "raw": "GetCurrentClimateID - returns the refID of the current climate.\n\n(currentClimate:ref) GetCurrentClimateID",
        "return": [
          "currentClimate",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateSunriseBegin",
      "description": "returns the time sunrise begins specified as a number of 10 minute units since midnight.",
      "example": {
        "raw": "GetClimateSunriseBegin - returns the time sunrise begins specified as a number of 10 minute units since midnight.\n\nNote: There are 1,440 minutes in a day, thus there are 144 ten-minute units, thus you'll receive a value of 0 for midnight, and 143 for 23:50.\n\n(sunriseBegin:int) GetSunriseBegin climate:ref",
        "return": [
          "sunriseBegin",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateSunriseEnd",
      "description": "returns the time sunrise ends specified as a number of 10 minute units since midnight.",
      "example": {
        "raw": "GetClimateSunriseEnd - returns the time sunrise ends specified as a number of 10 minute units since midnight.\n\n(sunriseEnd:int) GetSunriseEnd climate:ref",
        "return": [
          "sunriseEnd",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateSunsetBegin",
      "description": "returns the time sunset begins specified as a number of 10 minute units since midnight.",
      "example": {
        "raw": "GetClimateSunsetBegin - returns the time sunset begins specified as a number of 10 minute units since midnight.\n\n(sunsetBegin:int) GetSunsetBegin climate:ref",
        "return": [
          "sunsetBegin",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateSunsetEnd",
      "description": "returns the time sunset ends specified as a number of 10 minute units since midnight.",
      "example": {
        "raw": "GetClimateSunsetEnd - returns the time sunset ends specified as a number of 10 minute units since midnight.\n\n(sunsetEnd:int) GetSunsetEnd climate:ref",
        "return": [
          "sunsetEnd",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateMoonPhaseLength",
      "description": "returns the number of days in the phase of the moons. The total moon cycle length is 8 x PhaseLength according to the CS.",
      "example": {
        "raw": "GetClimateMoonPhaseLength - returns the number of days in the phase of the moons. The total moon cycle length is 8 x PhaseLength according to the CS.\n\n(phaseLength:int) GetClimateMoonPhaseLength climate:ref",
        "return": [
          "phaseLength",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateHasMasser",
      "description": "returns 1 if the current climate shows the moon Masser.",
      "example": {
        "raw": "GetClimateHasMasser - returns 1 if the current climate shows the moon Masser.\n\n(hasMasser:bool) GetClimateHasMasser climate:ref",
        "return": [
          "hasMasser",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateHasSecunda",
      "description": "returns 1 if the current climate shows the moon Secunda.",
      "example": {
        "raw": "GetClimateHasSecunda - returns 1 if the current climate shows the moon Secunda.\n\n(hasSecunda:bool) GetClimateHasSecunda climate:ref",
        "return": [
          "hasSecunda",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "RefreshCurrentClimate",
      "description": "refreshes the climate info to reflect changes made by the SetClimateXXX functions.",
      "example": {
        "raw": "RefreshCurrentClimate - refreshes the climate info to reflect changes made by the SetClimateXXX functions.\n\n(nothing) RefreshCurrentClimate",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateSunriseBegin",
      "description": "sets the time sunrise begins as a number of 10 minute units since midnight.",
      "example": {
        "raw": "SetClimateSunriseBegin - sets the time sunrise begins as a number of 10 minute units since midnight.\n\nNote: The function will have no effect if the time parameter is less than 0 or greater than 59.\n\n(nothing) SetClimateSunriseBegin time:int climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateSunriseEnd",
      "description": "sets the time sunrise ends as a number of 10 minute units since midnight,",
      "example": {
        "raw": "SetClimateSunriseEnd - sets the time sunrise ends as a number of 10 minute units since midnight,\n\nNote: The time parameter must have a value that is at least 1 greater than the value returned by GetClimateSunriseBegin and be no greater than 95.\n\n(nothing) SetClimateSunriseEnd time:int climate:ref",
        "return": [
          "etClimateSunriseBegi"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateSunsetBegin",
      "description": "sets the time sunset begins as a number of 10 minute units since midnight.",
      "example": {
        "raw": "SetClimateSunsetBegin - sets the time sunset begins as a number of 10 minute units since midnight.\n\nNote: The time parameter must have a value that is at least 1 greater than the value returned by GetClimateSunriseEnd and be no greater than 119.\n\n(nothing) SetClimateSunsetBegin time:int climate:ref",
        "return": [
          "etClimateSunriseEn"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateSunsetEnd",
      "description": "sets the time sunset ends as a number of 10 minute units since midnight.",
      "example": {
        "raw": "SetClimateSunsetEnd - sets the time sunset ends as a number of 10 minute units since midnight.\n\nNote: The time parameter must have a value that is at least 1 greater than the value returned by GetClimateSunsetBegin.\n\nNote: The upper limit to the time parameter is 255, which equates to the latest time the sunset can end as being 18:39 the next day. While the sunrise end and sunset beginning cannot overlap, the sunset end and sunrise beginning can, though the in-game consequences of an overlap or a time value of over 143 (23:59) have not been tested.\n\n(nothing) SetClimateSunsetEnd time:int climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateMoonPhaseLength",
      "description": "sets the number of days in the phase of the moons",
      "example": {
        "raw": "SetClimateMoonPhaseLength - sets the number of days in the phase of the moons\n\n(nothing) SetClimateMoonPhaseLength nuPhaseLength:int climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateHasMasser",
      "description": "sets  whether the climate shows the moon Masser",
      "example": {
        "raw": "SetClimateHasMasser - sets  whether the climate shows the moon Masser\n\n(nothing) SetClimateHasMasser hasMasser:bool climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateHasSecunda",
      "description": "sets whether the climate shows the moon Secunda",
      "example": {
        "raw": "SetClimateHasSecunda - sets whether the climate shows the moon Secunda\n\n(nothing) SetClimateHasSecunda hasSecunda:bool climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetClimateVolatility",
      "description": "returns the volatility of the climate",
      "example": {
        "raw": "GetClimateVolatility - returns the volatility of the climate\n\n(volatility:int) GetClimateVolatility climate:ref",
        "return": [
          "volatility",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetClimateVolatility",
      "description": "sets the volatility of the climate",
      "example": {
        "raw": "SetClimateVolatility - sets the volatility of the climate\n\n(nothing) SetClimateVolatility volatility:int climate:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsCreature",
      "description": "returns whether the reference or passed id is a creature",
      "example": {
        "raw": "IsCreature - returns whether the reference or passed id is a creature\n\n(isCreature:bool) reference.IsCreature creature:ref",
        "return": [
          "isCreature",
          "bool"
        ],
        "params": [
          "reference.IsCreature"
        ]
      }
    },
    {
      "name": "GetCreatureType",
      "description": "returns the type of the creature (Undead, Humanoid, Daedrea etc)",
      "example": {
        "raw": "GetCreatureType - returns the type of the creature (Undead, Humanoid, Daedrea etc)\n\n(creatureType:int) reference.GetCreatureType creature:ref",
        "return": [
          "creatureType",
          "int"
        ],
        "params": [
          "reference.GetCreatureType"
        ]
      }
    },
    {
      "name": "SetCreatureType",
      "description": "attempts to change the type of the creature.",
      "example": {
        "raw": "SetCreatureType - attempts to change the type of the creature.\n\nNote: This changes the type for the base object, so it affects all references to that object. If used to change the type of a \"horse\"-type creature to something else, the creature will no longer be ridable until its type is set back to \"horse\". The command will not allow you to set the creature's type to \"horse\" unless the creature's model contains the ActorParent node which allows it to be ridden, and it will not allow you to change the type of a ridable creature while it is being ridden.\n\n(typeSet:bool) reference.SetCreatureType creatureType:int",
        "return": [
          "typeSet",
          "bool"
        ],
        "params": [
          "reference.SetCreatureType"
        ]
      }
    },
    {
      "name": "GetCreatureCombatSkill",
      "description": "returns the combat skill for the creature",
      "example": {
        "raw": "GetCreatureCombatSkill - returns the combat skill for the creature\n\n(combatSkill:int) reference.GetCreatureCombatSkill creature:ref",
        "return": [
          "combatSkill",
          "int"
        ],
        "params": [
          "reference.GetCreatureCombatSkill"
        ]
      }
    },
    {
      "name": "GetCreatureMagicSkill",
      "description": "returns the magic skill for the creature",
      "example": {
        "raw": "GetCreatureMagicSkill - returns the magic skill for the creature\n\n(magicSkill:int) reference.GetCreatureMagicSkill creature:ref",
        "return": [
          "magicSkill",
          "int"
        ],
        "params": [
          "reference.GetCreatureMagicSkill"
        ]
      }
    },
    {
      "name": "GetCreatureStealthSkill",
      "description": "returns the stealth skill for the creature",
      "example": {
        "raw": "GetCreatureStealthSkill - returns the stealth skill for the creature\n\n(stealthSkill:int) reference.GetCreatureStealthSkill creature:ref",
        "return": [
          "stealthSkill",
          "int"
        ],
        "params": [
          "reference.GetCreatureStealthSkill"
        ]
      }
    },
    {
      "name": "SetCreatureSkill",
      "description": "sets the value of one of the creature's skills. Pass \"stealth\", \"magic\", or \"combat\" as the skill name. The skill value must be between 0 and 255.",
      "example": {
        "raw": "SetCreatureSkill - sets the value of one of the creature's skills. Pass \"stealth\", \"magic\", or \"combat\" as the skill name. The skill value must be between 0 and 255.\n\n(nothing) reference.SetCreatureSkill skillName:string skillValue:int creature:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCreatureSkill"
        ]
      }
    },
    {
      "name": "GetCreatureReach",
      "description": "returns the reach of the creature",
      "example": {
        "raw": "GetCreatureReach - returns the reach of the creature\n\n(reach:int) reference.GetCreatureReach creature:ref",
        "return": [
          "reach",
          "int"
        ],
        "params": [
          "reference.GetCreatureReach"
        ]
      }
    },
    {
      "name": "GetCreatureSoulLevel",
      "description": "returns the soul level of the creature",
      "example": {
        "raw": "GetCreatureSoulLevel - returns the soul level of the creature\n\n(soulLevel:int) reference.GetCreatureSoulLevel creature:ref",
        "return": [
          "soulLevel",
          "int"
        ],
        "params": [
          "reference.GetCreatureSoulLevel"
        ]
      }
    },
    {
      "name": "GetCreatureBaseScale",
      "description": "retuns the base scale of the creature",
      "example": {
        "raw": "GetCreatureBaseScale - retuns the base scale of the creature\n\n(scale:float) reference.GetCreatureBaseScale creature:ref",
        "return": [
          "scale",
          "float"
        ],
        "params": [
          "reference.GetCreatureBaseScale"
        ]
      }
    },
    {
      "name": "GetCreatureWalks",
      "description": "returns 1 if the Walks flag is set on the creature",
      "example": {
        "raw": "GetCreatureWalks - returns 1 if the Walks flag is set on the creature\n\n(walks:bool) reference.GetCreatureWalks creature:ref",
        "return": [
          "walks",
          "bool"
        ],
        "params": [
          "reference.GetCreatureWalks"
        ]
      }
    },
    {
      "name": "GetCreatureSwims",
      "description": "returns 1 if the Swims flag is set on the creature",
      "example": {
        "raw": "GetCreatureSwims - returns 1 if the Swims flag is set on the creature\n\n(swims:bool) reference.GetCreatureSwims creature:ref",
        "return": [
          "swims",
          "bool"
        ],
        "params": [
          "reference.GetCreatureSwims"
        ]
      }
    },
    {
      "name": "GetCreatureFlies",
      "description": "returns 1 if the Flies flag is set on the creature",
      "example": {
        "raw": "GetCreatureFlies - returns 1 if the Flies flag is set on the creature\n\n(flies:bool) reference.GetCreatureFlies creature:ref",
        "return": [
          "flies",
          "bool"
        ],
        "params": [
          "reference.GetCreatureFlies"
        ]
      }
    },
    {
      "name": "IsCreatureBiped",
      "description": "returns 1 if the Biped flag is set on the creature",
      "example": {
        "raw": "IsCreatureBiped - returns 1 if the Biped flag is set on the creature\n\n(biped:bool) reference.isCreatureBiped creature:ref",
        "return": [
          "biped",
          "bool"
        ],
        "params": [
          "reference.isCreatureBiped"
        ]
      }
    },
    {
      "name": "CreatureHasNoMovement",
      "description": "returns 1 if the No Movement flag is set on the creature",
      "example": {
        "raw": "CreatureHasNoMovement - returns 1 if the No Movement flag is set on the creature\n\n(noMovement:bool) reference.CreatureHasNoMovement creature:ref",
        "return": [
          "noMovement",
          "bool"
        ],
        "params": [
          "reference.CreatureHasNoMovement"
        ]
      }
    },
    {
      "name": "CreatureHasNoHead",
      "description": "returns 1 if the No Head flag is set on the creature",
      "example": {
        "raw": "CreatureHasNoHead - returns 1 if the No Head flag is set on the creature\n\n(noHead:bool) reference.CreatureHasNoHead creature:ref",
        "return": [
          "noHead",
          "bool"
        ],
        "params": [
          "reference.CreatureHasNoHead"
        ]
      }
    },
    {
      "name": "CreatureHasNoLeftArm",
      "description": "returns 1 if the No Left Arm flag is set on the creature.",
      "example": {
        "raw": "CreatureHasNoLeftArm - returns 1 if the No Left Arm flag is set on the creature.\n\n(noLeftArm:bool) reference.CreatureHasNoLeftArm creature:ref",
        "return": [
          "noLeftArm",
          "bool"
        ],
        "params": [
          "reference.CreatureHasNoLeftArm"
        ]
      }
    },
    {
      "name": "CreatureHasNoRightArm",
      "description": "returns 1 if the No Right Arm flag is set on the creature.",
      "example": {
        "raw": "CreatureHasNoRightArm - returns 1 if the No Right Arm flag is set on the creature.\n\n(noRightArm:bool) reference.CreatureHasNoRightArm creature:ref",
        "return": [
          "noRightArm",
          "bool"
        ],
        "params": [
          "reference.CreatureHasNoRightArm"
        ]
      }
    },
    {
      "name": "CreatureNoCombatInWater",
      "description": "returns 1 if the No Combat In Water flag is set on the creature.",
      "example": {
        "raw": "CreatureNoCombatInWater - returns 1 if the No Combat In Water flag is set on the creature.\n\n(noCombat:bool) reference.CreatureNoCombatInWater creature:ref",
        "return": [
          "noCombat",
          "bool"
        ],
        "params": [
          "reference.CreatureNoCombatInWater"
        ]
      }
    },
    {
      "name": "CreatureUsesWeaponAndShield",
      "description": "returns 1 if the Uses Weapon and Shield flag is set on the creature.",
      "example": {
        "raw": "CreatureUsesWeaponAndShield - returns 1 if the Uses Weapon and Shield flag is set on the creature.\n\n(weaponAndShield:bool) reference.CreatureUsesWeaponAndShield creature:ref",
        "return": [
          "weaponAndShield",
          "bool"
        ],
        "params": [
          "reference.CreatureUsesWeaponAndShield"
        ]
      }
    },
    {
      "name": "GetRider",
      "description": "returns the NPC currently riding the calling horse.",
      "example": {
        "raw": "GetRider - returns the NPC currently riding the calling horse.\n\nNote: Returns a reference to an NPC from the moment the NPC 'decides' to mount and start walking toward the horse.\n\nNote: When the PC mounts the horse, returns the Player's reference from the beginning of the mount animation to the end of the dismount animation.\n\n(rider:ref) reference.GetRider",
        "return": [
          "rider",
          "ref"
        ],
        "params": [
          "reference.GetRider"
        ]
      }
    },
    {
      "name": "GetCreatureSoundBase",
      "description": "returns the creature from which the specified creature's sounds are derived, if any.",
      "example": {
        "raw": "GetCreatureSoundBase - returns the creature from which the specified creature's sounds are derived, if any.\n\n(creature:ref) reference.GetCreatureSoundBase creature:ref",
        "return": [
          "creature",
          "ref"
        ],
        "params": [
          "reference.GetCreatureSoundBase"
        ]
      }
    },
    {
      "name": "SetCreatureSoundBase",
      "description": "sets the creature from which the creature inherits its sounds. The inheriting creature must not itself be a sound base (mustn't define its own sounds), and the creature specified as the sound base must be a sound base (defining its own sounds) or null.",
      "example": {
        "raw": "SetCreatureSoundBase - sets the creature from which the creature inherits its sounds. The inheriting creature must not itself be a sound base (mustn't define its own sounds), and the creature specified as the sound base must be a sound base (defining its own sounds) or null.\n\n(success:bool) reference.SetCreatureSoundBase soundBase:ref creature:ref",
        "return": [
          "success",
          "bool"
        ],
        "params": [
          "reference.SetCreatureSoundBase"
        ]
      }
    },
    {
      "name": "GetCreatureSound",
      "description": "returns the creature's sound associated with the specified action.",
      "example": {
        "raw": "GetCreatureSound - returns the creature's sound associated with the specified action.\n\n(sound:ref) reference.GetCreatureSound whichSound:actorSound creature:ref",
        "return": [
          "sound",
          "ref"
        ],
        "params": [
          "reference.GetCreatureSound"
        ]
      }
    },
    {
      "name": "HasModel",
      "description": "returns 1 if the creature's model list includes the specified .nif file. The file must appear in the creature's meshes folder. String must include the \".nif\" extension and is case-insensitive.",
      "example": {
        "raw": "HasModel - returns 1 if the creature's model list includes the specified .nif file. The file must appear in the creature's meshes folder. String must include the \".nif\" extension and is case-insensitive.\n\n(hasModel:bool) reference.HasModel model:string creature:ref",
        "return": [
          "hasModel",
          "bool"
        ],
        "params": [
          "reference.HasModel"
        ]
      }
    },
    {
      "name": "ToggleCreatureModel",
      "description": "toggles a model within a creature's model list on or off. The model path must be relative to the creature's model folder and include the \".nif\" extension. When called on a reference which is currently being rendered, the reference must be disabled and then enabled before the change is visible.",
      "example": {
        "raw": "ToggleCreatureModel - toggles a model within a creature's model list on or off. The model path must be relative to the creature's model folder and include the \".nif\" extension. When called on a reference which is currently being rendered, the reference must be disabled and then enabled before the change is visible.\n\n(nothing) reference.ToggleCreatureModel modelPath:string enableModel:bool creature:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ToggleCreatureModel"
        ]
      }
    },
    {
      "name": "GetCreatureModelPaths",
      "description": "returns an Array containing the set of model paths in the creature's model list. Only those models which are toggled on are included.",
      "example": {
        "raw": "GetCreatureModelPaths - returns an Array containing the set of model paths in the creature's model list. Only those models which are toggled on are included.\n\n(modelPaths:Array) reference.GetCreatureModelPaths creature:ref",
        "return": [
          "modelPaths",
          "Array"
        ],
        "params": [
          "reference.GetCreatureModelPaths"
        ]
      }
    },
    {
      "name": "GetCombatStyle",
      "description": "returns the combat style assigned to the calling reference.",
      "example": {
        "raw": "GetCombatStyle - returns the combat style assigned to the calling reference.\n\nNote: Many actors are assigned no combat style in the editor (i.e. \"DEFAULT\" appears in the selection box); in that case this function returns zero.\n\n(combatStyle:ref) reference.GetCombatStyle",
        "return": [
          "combatStyle",
          "ref"
        ],
        "params": [
          "reference.GetCombatStyle"
        ]
      }
    },
    {
      "name": "IsLoadDoor",
      "description": "returns 1 if the calling reference is a load door",
      "example": {
        "raw": "IsLoadDoor - returns 1 if the calling reference is a load door\n\nNote: Returns 1 only if the door is connected to another door via the Teleport tab. A door reference just dropped in the CS, not connected to another door, returns 0.\n\n(isLoadDoor:bool) reference.IsLoadDoor",
        "return": [
          "isLoadDoor",
          "bool"
        ],
        "params": [
          "reference.IsLoadDoor"
        ]
      }
    },
    {
      "name": "GetLinkedDoor",
      "description": "returns the door to which the calling load door is linked",
      "example": {
        "raw": "GetLinkedDoor - returns the door to which the calling load door is linked\n\n(linkedDoor:ref) reference.GetLinkedDoor",
        "return": [
          "linkedDoor",
          "ref"
        ],
        "params": [
          "reference.GetLinkedDoor"
        ]
      }
    },
    {
      "name": "GetTeleportCell",
      "description": "returns the cell to which the calling load door teleports",
      "example": {
        "raw": "GetTeleportCell - returns the cell to which the calling load door teleports\n\n(cell:ref) reference.GetTeleportCell",
        "return": [
          "cell",
          "ref"
        ],
        "params": [
          "reference.GetTeleportCell"
        ]
      }
    },
    {
      "name": "IsOblivionGate",
      "description": "returns true if the door is flagged as an Oblivion gate in the editor.",
      "example": {
        "raw": "IsOblivionGate -returns true if the door is flagged as an Oblivion gate in the editor.\n\n(isOBGate:bool) reference.IsOblivionGate door:ref",
        "return": [
          "isOBGate",
          "bool"
        ],
        "params": [
          "reference.IsOblivionGate"
        ]
      }
    },
    {
      "name": "IsHiddenDoor",
      "description": "returns 1 if the \"hidden\" flag is set for the door.",
      "example": {
        "raw": "IsHiddenDoor - returns 1 if the \"hidden\" flag is set for the door.\n\n(isHidden:bool) reference.IsHiddenDoor door:ref",
        "return": [
          "isHidden",
          "bool"
        ],
        "params": [
          "reference.IsHiddenDoor"
        ]
      }
    },
    {
      "name": "IsAutomaticDoor",
      "description": "returns 1 if the \"Automatic\" flag is set for the door.",
      "example": {
        "raw": "IsAutomaticDoor - returns 1 if the \"Automatic\" flag is set for the door.\n\n(isAutomatic:bool) reference.IsAutomaticDoor door:ref",
        "return": [
          "isAutomatic",
          "bool"
        ],
        "params": [
          "reference.IsAutomaticDoor"
        ]
      }
    },
    {
      "name": "IsMinimalUseDoor",
      "description": "returns 1 if the \"Minimal Use\" flag is set for the door.",
      "example": {
        "raw": "IsMinimalUseDoor - returns 1 if the \"Minimal Use\" flag is set for the door.\n\n(isMinimalUse:bool) reference.IsMinimalUseDoor door:ref",
        "return": [
          "isMinimalUse",
          "bool"
        ],
        "params": [
          "reference.IsMinimalUseDoor"
        ]
      }
    },
    {
      "name": "SetIsHiddenDoor",
      "description": "sets or clears the \"hidden\" flag for the door.",
      "example": {
        "raw": "SetIsHiddenDoor - sets or clears the \"hidden\" flag for the door.\n\n(nothing) reference.SetIsHiddenDoor setFlag:bool door:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsHiddenDoor"
        ]
      }
    },
    {
      "name": "SetIsAutomaticDoor",
      "description": "sets or clears the \"Automatic\" flag for the door.",
      "example": {
        "raw": "SetIsAutomaticDoor - sets or clears the \"Automatic\" flag for the door.\n\n(nothing) reference.SetIsAutomaticDoor setFlag:bool door:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsAutomaticDoor"
        ]
      }
    },
    {
      "name": "SetIsMinimalUseDoor",
      "description": "sets or clears the \"Minimal Use\" flag for the door.",
      "example": {
        "raw": "SetIsMinimalUseDoor - sets or clears the \"Minimal Use\" flag for the door.\n\n(nothing) reference.SetIsMinimalUseDoor setFlag:bool door:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsMinimalUseDoor"
        ]
      }
    },
    {
      "name": "SetIsOblivionGate",
      "description": "sets or clears the \"Oblivion Gate\" flag for the door.",
      "example": {
        "raw": "SetIsOblivionGate - sets or clears the \"Oblivion Gate\" flag for the door.\n\n(nothing) reference.SetIsOblivionGate setFlag:bool door:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIsOblivionGate"
        ]
      }
    },
    {
      "name": "SetDoorTeleport",
      "description": "sets the reference, coordinates, and rotation to which the calling door teleports. Only the reference argument is required; the values for the others will be taken from the specified reference's coordinates and rotation if omitted. The bTemporary argument specifies that the change should not be saved in the savegame; by default, or if the argument is zero, the change will be saved.",
      "example": {
        "raw": "SetDoorTeleport - sets the reference, coordinates, and rotation to which the calling door teleports. Only the reference argument is required; the values for the others will be taken from the specified reference's coordinates and rotation if omitted. The bTemporary argument specifies that the change should not be saved in the savegame; by default, or if the argument is zero, the change will be saved.\n\n(nothing) reference.SetDoorTeleport teleportTo:ref x:float y:float z:float rot:float bTemporary:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetDoorTeleport"
        ]
      }
    },
    {
      "name": "LinkToDoor",
      "description": "links the calling door reference to the specified door reference. This causes each of the doors to teleport to the other when activated. Both doors must be persistent references and neither can already be linked to another door. Actors will use the doors in their pathfinding. The change persists in the savegame.",
      "example": {
        "raw": "LinkToDoor - links the calling door reference to the specified door reference. This causes each of the doors to teleport to the other when activated. Both doors must be persistent references and neither can already be linked to another door. Actors will use the doors in their pathfinding. The change persists in the savegame.\n\n(linked:bool) reference.LinkToDoor otherDoor:ref",
        "return": [
          "linked",
          "bool"
        ],
        "params": [
          "reference.LinkToDoor"
        ]
      }
    },
    {
      "name": "GetDoorTeleportX",
      "description": "returns the x coordinate to which the calling door teleports.",
      "example": {
        "raw": "GetDoorTeleportX - returns the x coordinate to which the calling door teleports.\n\n(coord:float) reference.GetDoorTeleportX",
        "return": [
          "coord",
          "float"
        ],
        "params": [
          "reference.GetDoorTeleportX"
        ]
      }
    },
    {
      "name": "GetDoorTeleportY",
      "description": "returns the y coordinate to which the calling door teleports.",
      "example": {
        "raw": "GetDoorTeleportY - returns the y coordinate to which the calling door teleports.\n\n(coord:float) reference.GetDoorTeleportY",
        "return": [
          "coord",
          "float"
        ],
        "params": [
          "reference.GetDoorTeleportY"
        ]
      }
    },
    {
      "name": "GetDoorTeleportZ",
      "description": "returns the z coordinate to which the calling door teleports.",
      "example": {
        "raw": "GetDoorTeleportZ - returns the z coordinate to which the calling door teleports.\n\n(coord:float) reference.GetDoorTeleportZ",
        "return": [
          "coord",
          "float"
        ],
        "params": [
          "reference.GetDoorTeleportZ"
        ]
      }
    },
    {
      "name": "GetDoorTeleportRot",
      "description": "returns the rotation to which the calling door teleports. This is the angle the player will be facing after activatingthe load door.",
      "example": {
        "raw": "GetDoorTeleportRot - returns the rotation to which the calling door teleports. This is the angle the player will be facing after activatingthe load door.\n\n(coord:float) reference.GetDoorTeleportRot",
        "return": [
          "coord",
          "float"
        ],
        "params": [
          "reference.GetDoorTeleportRot"
        ]
      }
    },
    {
      "name": "GetTeleportCellName",
      "description": "when called on a teleporting door reference, returns the name of the cell or worldspace to which the door teleports",
      "example": {
        "raw": "GetTeleportCellName - when called on a teleporting door reference, returns the name of the cell or worldspace to which the door teleports\n\n(cellName:string) ref.GetTeleportCellName",
        "return": [
          "cellName",
          "string"
        ],
        "params": [
          "ref.GetTeleportCellName"
        ]
      }
    },
    {
      "name": "GetEnchantmentType",
      "description": "returns the type of the enchantment",
      "example": {
        "raw": "GetEnchantmentType - returns the type of the enchantment\n\n(enchantType:int) GetEnchantmentType objectID:ref",
        "return": [
          "enchantType",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetEnchantmentType",
      "description": "sets the type of the enchantment",
      "example": {
        "raw": "SetEnchantmentType - sets the type of the enchantment\n\n(nothing) SetEnchantmentType enchantType:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetEnchantmentCharge",
      "description": "returns the charge of the enchantment. Of unknown and dubious use.",
      "example": {
        "raw": "GetEnchantmentCharge - returns the charge of the enchantment. Of unknown and dubious use.\n\nNote: While this value exists in the CS, it doesn't seem to do anything. Charge is determined by enchantment points on the weapon/enchantment cost of the enchantment.\n\n(charge:int) GetEnchantmentCharge objectID:ref",
        "return": [
          "charge",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetEnchantmentCharge",
      "description": "sets the charge of the enchantment. Of unknown and dubious use.",
      "example": {
        "raw": "SetEnchantmentCharge - sets the charge of the enchantment. Of unknown and dubious use.\n\nNote: While this value exists in the CS, it doesn't seem to do anything. Charge is determined by enchantment points on the weapon/enchantment cost of the enchantment.\n\n(nothing) SetEnchantmentCharge nuCharge:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModEnchantmentCharge",
      "description": "modifies the charge of the enchantment. Of unknown and dubious use.",
      "example": {
        "raw": "ModEnchantmentCharge - modifies the charge of the enchantment. Of unknown and dubious use.\n\nNote: While this value exists in the CS, it doesn't seem to do anything. Charge is determined by enchantment points on the weapon/enchantment cost of the enchantment.\n\n(nothing) ModEnchantmentCharge modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetEnchantmentCost",
      "description": "returns the magicka charge cost for using the enchantment.",
      "example": {
        "raw": "GetEnchantmentCost - returns the magicka charge cost for using the enchantment.\n\n(cost:int) GetEnchantmentCost objectID:ref",
        "return": [
          "cost",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetEnchantmentCost",
      "description": "sets the cost for using the enchantment.",
      "example": {
        "raw": "SetEnchantmentCost - sets the cost for using the enchantment.\n\nNote: This has no effect if the enchantment has the Auto-Calculate flag, see SetMagicItemAutoCalc.\n\n(nothing) SetEnchantmentCost nuCost:int objectID:ref",
        "return": [
          "etMagicItemAutoCal"
        ],
        "params": []
      }
    },
    {
      "name": "ModEnchantmentCost",
      "description": "modifies the cost for using the enchantment up or down.",
      "example": {
        "raw": "ModEnchantmentCost - modifies the cost for using the enchantment up or down.\n\nNote: This has no effect if the enchantment has the Auto-Calculate flag, see SetMagicItemAutoCalc.\n\n(nothing) ModEnchantmentCost modifyBy:float objectID:ref",
        "return": [
          "etMagicItemAutoCal"
        ],
        "params": []
      }
    },
    {
      "name": "FactionHasSpecialCombat",
      "description": "returns 1 if the Special Combat flag is set on the faction",
      "example": {
        "raw": "FactionHasSpecialCombat - returns 1 if the Special Combat flag is set on the faction\n\n(hasSpecialCombat:bool) FactionHasSpecialCombat faction:ref",
        "return": [
          "hasSpecialCombat",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsFactionEvil",
      "description": "returns 1 if the faction is marked as evil.",
      "example": {
        "raw": "IsFactionEvil - returns 1 if the faction is marked as evil.\n\n(isEvil:bool) IsFactionEvil faction:ref",
        "return": [
          "isEvil",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsFactionHidden",
      "description": "returns 1 if the faction is not shown on the player's faction sheet.",
      "example": {
        "raw": "IsFactionHidden - returns 1 if the faction is not shown on the player's faction sheet.\n\n(isHidden:bool) IsFactionHidden faction:ref",
        "return": [
          "isHidden",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetFactionEvil",
      "description": "changes the Evil flag on the faction. Changes are saved in the savegame.",
      "example": {
        "raw": "SetFactionEvil - changes the Evil flag on the faction. Changes are saved in the savegame.\n\n(nothing) SetFactionEvil faction:ref isEvil:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetFactionHidden",
      "description": "changes the Hidden flag on the faction. Changes are saved in the savegame.",
      "example": {
        "raw": "SetFactionHidden - changes the Hidden flag on the faction. Changes are saved in the savegame.\n\n(nothing) SetFactionHidden faction:ref isHidden:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetFactionHasSpecialCombat",
      "description": "changes the Special Combat flag on the faction. Changes are saved in the savegame.",
      "example": {
        "raw": "SetFactionHasSpecialCombat - changes the Special Combat flag on the faction. Changes are saved in the savegame.\n\n(nothing) SetFactionHasSpecialCombat faction:ref hasSpecialCombat:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumRanks",
      "description": "returns the number of ranks in the faction.",
      "example": {
        "raw": "GetNumRanks - returns the number of ranks in the faction.\n\n(numRanks:int) GetNumRanks faction:ref",
        "return": [
          "numRanks",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthFactionRankName",
      "description": "returns the title of the nth rank in a faction. Optionally returns the female rank name.",
      "example": {
        "raw": "GetNthFactionRankName - returns the title of the nth rank in a faction. Optionally returns the female rank name.\n\n(rankName:string_var) GetNthFactionRankName faction:ref whichRank:int female:bool",
        "return": [
          "rankName",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetNthFactionRankNameEX",
      "description": "sets the title of the nth rank in a faction. Optionally sets the female rank name.",
      "example": {
        "raw": "SetNthFactionRankNameEX - sets the title of the nth rank in a faction. Optionally sets the female rank name.\n\n(nothing)SetNthFactionRankNameEX path:formatString faction:ref whichRank:int female:bool",
        "return": [
          "nothing)SetNthFactionRankNameE"
        ],
        "params": []
      }
    },
    {
      "name": "IsHarvested",
      "description": "returns 1 if the calling reference's ingredient has been harvested.",
      "example": {
        "raw": "IsHarvested - returns 1 if the calling reference's ingredient has been harvested.\n\n(isHarvested:bool) reference.IsHarvested",
        "return": [
          "isHarvested",
          "bool"
        ],
        "params": [
          "reference.IsHarvested"
        ]
      }
    },
    {
      "name": "SetHarvested",
      "description": "mark or unmark the calling reference as having been harvested. Changes are saved in the savegame.",
      "example": {
        "raw": "SetHarvested - mark or unmark the calling reference as having been harvested. Changes are saved in the savegame.\n\nNote: Prior to xOBSE TODO changing an already harvested flora to unharvested was not actually saved into the savegame. (TODO: Version number of the fix.)\n\n(nothing) reference.SetHarvested isHarvested:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetHarvested"
        ]
      }
    },
    {
      "name": "GetIngredient",
      "description": "returns the ingredient contained in a plant.",
      "example": {
        "raw": "GetIngredient - returns the ingredient contained in a plant.\n\n(ingredient:ref) reference.GetIngredient flora:ref",
        "return": [
          "ingredient",
          "ref"
        ],
        "params": [
          "reference.GetIngredient"
        ]
      }
    },
    {
      "name": "SetIngredient",
      "description": "sets the ingredient contained in a plant. Omit the ingredient parameter or pass an empty ref variable to set it to \"no ingredient.\"",
      "example": {
        "raw": "SetIngredient - sets the ingredient contained in a plant. Omit the ingredient parameter or pass an empty ref variable to set it to \"no ingredient.\"\n\n(nothing) reference.SetIngredient ingredient:ref flora:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIngredient"
        ]
      }
    },
    {
      "name": "GetIngredientChance",
      "description": "returns the % chance of harvesting an ingredient from the plant for a specific season where 0 = spring, 1 = summer, 2 = autumn, and 3 = winter. Return value ranges from 0 to 100.",
      "example": {
        "raw": "GetIngredientChance - returns the % chance of harvesting an ingredient from the plant for a specific season where 0 = spring, 1 = summer, 2 = autumn, and 3 = winter. Return value ranges from 0 to 100.\n\n(chance:int) reference.GetIngredientChance whichSeason:int flora:ref",
        "return": [
          "chance",
          "int"
        ],
        "params": [
          "reference.GetIngredientChance"
        ]
      }
    },
    {
      "name": "SetIngredientChance",
      "description": "sets the %chance of harvesting an ingredient based on the specified season.",
      "example": {
        "raw": "SetIngredientChance - sets the %chance of harvesting an ingredient based on the specified season.\n\n(nothing) reference.SetIngredientChance whichSeason:int newChance:int flora:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetIngredientChance"
        ]
      }
    },
    {
      "name": "AddToLeveledList",
      "description": "adds an object to a leveled creature, spell, or item list. ",
      "example": {
        "raw": "AddToLeveledList - adds an object to a leveled creature, spell, or item list. Count defaults to 1 if unspecified.\n\n(nothing) AddToLeveledList leveledList:ref object:ref level:int count:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveFromLeveledList",
      "description": "removes all occurences of an object from a leveled list and returns the number of occurences removed.",
      "example": {
        "raw": "RemoveFromLeveledList - removes all occurences of an object from a leveled list and returns the number of occurences removed.\n\n(numRemoved:int) RemoveFromLeveledList leveledList:ref object:ref",
        "return": [
          "numRemoved",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "CalcLeveledItem",
      "description": "returns one item from a leveled item list, selected randomly for a character of the specified level.",
      "example": {
        "raw": "CalcLeveledItem - returns one item from a leveled item list, selected randomly for a character of the specified level.\n\nBy default, this function selects a level range from which to choose using the game setting iLevItemLevelDifferenceMax. The item chosen is within the range [minLevel...maxLevel], where maxLevel is the level in the list closest to but not exceeding the character's level, and minLevel = maxLevel - levelDiff.\n\nYou can override the iLevItemLevelDifferenceMax game setting by passing an argument for the levelDiff parameter, or you can omit the levelDiff parameter to use the current value of iLevItemLevelDifferenceMax.\n\nIf the \"Calculate for all item &lt;= level\" flag is set for the leveled list, minLevel is always zero.\n\nThis function checks the \"Chance None\" property of the leveled list, so it may return nothing based on that chance; pass 0 for the third parameter to override this behavior.\n\nIn the case of leveled lists containing nested leveled lists, the function recurses through each list until it finds a non-leveled item.\n\n(randomItem:ref) CalcLeveledItem leveledList:ref level:int useChanceNone:bool levelDiff:int",
        "return": [
          "randomItem",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "CalcLevItemNR",
      "description": "does the same thing as CalcLeveledItem but will not recurse through nested leveled lists. This means that unlike CalcLeveledItem, CalcLevItemNR can return another leveled list rather than a real object.",
      "example": {
        "raw": "CalcLevItemNR - does the same thing as CalcLeveledItem but will not recurse through nested leveled lists. This means that unlike CalcLeveledItem, CalcLevItemNR can return another leveled list rather than a real object.\n\n(randomItem:ref CalcLevItemNR leveledList:ref level:int useChanceNone:bool levelDiff:int",
        "return": [
          "randomItem",
          "re"
        ],
        "params": []
      }
    },
    {
      "name": "CalcLevItems",
      "description": "returns an Array of StringMaps representing items selected randomly from a leveled item list. This command uses the game code to select items, which means the items returned are the same as those the game would select for an actor of the specified level. Each entry in the returned Array is a StringMap with the key-value pairs: \"item\":item (form) and \"count\":count (integer). The optional \"count\" parameter is 1 by default.",
      "example": {
        "raw": "CalcLevItems - returns an Array of StringMaps representing items selected randomly from a leveled item list. This command uses the game code to select items, which means the items returned are the same as those the game would select for an actor of the specified level. Each entry in the returned Array is a StringMap with the key-value pairs: \"item\":item (form) and \"count\":count (integer). The optional \"count\" parameter is 1 by default.\n\nNote: Does not work with leveled spells or creatures.\n\n(items:Array) CalcLevItems levItemList:ref level:int count:int",
        "return": [
          "items",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetCalcAllLevels",
      "description": "returns 1 if the \"calculate for all levels <= PC level\" flag is checked.",
      "example": {
        "raw": "GetCalcAllLevels - returns 1 if the \"calculate for all levels &lt;= PC level\" flag is checked.\n\n(calcAllLevels:bool) GetCalcAllLevels leveledList:ref",
        "return": [
          "calcAllLevels",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetCalcAllLevels",
      "description": "sets the \"calculate for all levels <= PC level\" flag on the leveled list.",
      "example": {
        "raw": "SetCalcAllLevels - sets the \"calculate for all levels &lt;= PC level\" flag on the leveled list.\n\n(nothing) SetCalcAllLevels leveledList:ref enabled:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCalcEachInCount",
      "description": "returns 1 if the \"calculate for each item in count\" flag is checked.",
      "example": {
        "raw": "GetCalcEachInCount - returns 1 if the \"calculate for each item in count\" flag is checked.\n\n(calcEach:bool) GetCalcEachInCount leveledList:ref",
        "return": [
          "calcEach",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetChanceNone",
      "description": "returns the chance from 0 to 100 that a leveled list returns no item.",
      "example": {
        "raw": "GetChanceNone - returns the chance from 0 to 100 that a leveled list returns no item.\n\n(chanceNone:int) GetChanceNone leveledList:ref",
        "return": [
          "chanceNone",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthLevItem",
      "description": "returns the Nth element in a leveled list, as ordered in the Construction Set.",
      "example": {
        "raw": "GetNthLevItem - returns the Nth element in a leveled list, as ordered in the Construction Set.\n\n(element:ref) GetNthLevItem index:int leveledList:ref",
        "return": [
          "element",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthLevItemCount",
      "description": "returns the count of the Nth element of a leveled list.",
      "example": {
        "raw": "GetNthLevItemCount - returns the count of the Nth element of a leveled list.\n\n(count:int) GetNthLevItemCount index:int leveledList:ref",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthLevItemLevel",
      "description": "returns the level of the Nth element of a leveled list.",
      "example": {
        "raw": "GetNthLevItemLevel - returns the level of the Nth element of a leveled list.\n\n(level:int) GetNthLevItemLevel index:int leveledList:ref",
        "return": [
          "level",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumLevItems",
      "description": "returns the number of elements in a leveled list.",
      "example": {
        "raw": "GetNumLevItems - returns the number of elements in a leveled list.\n\n(numItems:int) GetNumLevitems leveledList:ref",
        "return": [
          "numItems",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetLevItemByLevel",
      "description": "returns the first element of the specified level in the leveled list.",
      "example": {
        "raw": "GetLevItemByLevel - returns the first element of the specified level in the leveled list.\n\n(element:ref) GetLevItemByLevel whichLevel:int leveledList:ref",
        "return": [
          "element",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveLevItemByLevel",
      "description": "removes any elements of the specified level from a leveled list",
      "example": {
        "raw": "RemoveLevItemByLevel - removes any elements of the specified level from a leveled list\n\n(numRemoved:int) RemoveLevItemByLevel whichLevel:int leveledList:ref",
        "return": [
          "numRemoved",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ClearLeveledList",
      "description": "removes all elements from a leveled list.",
      "example": {
        "raw": "ClearLeveledList - removes all elements from a leveled list.\n\n(nothing) ClearLeveledList leveledList:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveNthLevItem",
      "description": "removes the nth item from a leveled list.",
      "example": {
        "raw": "RemoveNthLevItem - removes the nth item from a leveled list.\n\n(nothing) RemoveNthLevItem index:int leveledList:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetLevItemIndexByLevel",
      "description": "returns the index of the first item of the specified level within a leveled list, or -1 if no item exists for that level.",
      "example": {
        "raw": "GetLevItemIndexByLevel - returns the index of the first item of the specified level within a leveled list, or -1 if no item exists for that level.\n\n(index:int) GetLevItemIndexByLevel level:int leveledList:ref",
        "return": [
          "index",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetLevItemIndexByForm",
      "description": "returns the index of the first occurrence of the specified form in a leveled list, or -1 if the form is not found.",
      "example": {
        "raw": "GetLevItemIndexByForm - returns the index of the first occurrence of the specified form in a leveled list, or -1 if the form is not found.\n\n(index:int) GetLevItemIndexByForm leveledList:ref formToFind:ref",
        "return": [
          "index",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetChanceNone",
      "description": "sets the chance that a leveled list generates no item.",
      "example": {
        "raw": "SetChanceNone - sets the chance that a leveled list generates no item.\n\n(nothing) SetChanceNone chance:int levlist:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetLevCreatureTemplate",
      "description": "gets the template actor of a leveled creature list.",
      "example": {
        "raw": "GetLevCreatureTemplate - gets the template actor of a leveled creature list.\n\n(template:ref) GetLevCreatureTemplate leveledCreature:ref",
        "return": [
          "template",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetLevCreatureTemplate",
      "description": "sets the template actor of a leveled creature. Omitting or passing a null ref as the second argument will remove any existing template.",
      "example": {
        "raw": "SetLevCreatureTemplate - sets the template actor of a leveled creature. Omitting or passing a null ref as the second argument will remove any existing template.\n\n(nothing) SetLevCreatureTemplate leveledCreature:ref template:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsLightCarriable",
      "description": "returns 1 if the light may be placed in an inventory.",
      "example": {
        "raw": "IsLightCarriable - returns 1 if the light may be placed in an inventory.\n\n(isCarriable:bool) reference.IsLightCarriable light:ref",
        "return": [
          "isCarriable",
          "bool"
        ],
        "params": [
          "reference.IsLightCarriable"
        ]
      }
    },
    {
      "name": "GetLightRadius",
      "description": "returns the radius of the light.",
      "example": {
        "raw": "GetLightRadius - returns the radius of the light.\n\n(radius:int) reference.GetLightRadius light:ref",
        "return": [
          "radius",
          "int"
        ],
        "params": [
          "reference.GetLightRadius"
        ]
      }
    },
    {
      "name": "SetLightRadius",
      "description": "sets the radius of the light. Changes are not saved in the savegame.",
      "example": {
        "raw": "SetLightRadius - sets the radius of the light. Changes are not saved in the savegame.\n\nNote: The game will not update the lighting until the cell is reloaded or you force the light to be reloaded, see Update3D.\n\n(nothing) reference.SetLightRadius radius:int light:ref",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "GetLightRGB",
      "description": "returns the red, green, and blue components of the light's color as an Array of 3 elements of values 0 through 255. The first element corresponds to the red value, the second to green, and the third to blue.",
      "example": {
        "raw": "GetLightRGB - returns the red, green, and blue components of the light's color as an Array of 3 elements of values 0 through 255. The first element corresponds to the red value, the second to green, and the third to blue.\n\n(rgb:Array) reference.GetLightRGB light:ref",
        "return": [
          "rgb",
          "Array"
        ],
        "params": [
          "reference.GetLightRGB"
        ]
      }
    },
    {
      "name": "SetLightRGB",
      "description": "sets the red, green, and blue components of the light's color, accepting the components as an Array of 3 elements of values 0 through 255. The first element corresponds to the red value, the second to green, and the third to blue.",
      "example": {
        "raw": "SetLightRGB - sets the red, green, and blue components of the light's color, accepting the components as an Array of 3 elements of values 0 through 255. The first element corresponds to the red value, the second to green, and the third to blue.\n\n(colorChanged:bool) reference.SetLightRGB rgb:Array light:ref",
        "return": [
          "colorChanged",
          "bool"
        ],
        "params": [
          "reference.SetLightRGB"
        ]
      }
    },
    {
      "name": "GetLightDuration",
      "description": "returns the duration of the light as defined in the editor.",
      "example": {
        "raw": "GetLightDuration - returns the duration of the light as defined in the editor.\n\n(duration:int) reference.GetLightDuration light:ref",
        "return": [
          "duration",
          "int"
        ],
        "params": [
          "reference.GetLightDuration"
        ]
      }
    },
    {
      "name": "SetLightDuration",
      "description": "sets the duration of the light.",
      "example": {
        "raw": "SetLightDuration - sets the duration of the light.\n\n(nothing) reference.SetLightDuration duration:int light:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetLightDuration"
        ]
      }
    },
    {
      "name": "GetTimeLeft",
      "description": "returns the amount of time left before the calling light reference expires.",
      "example": {
        "raw": "GetTimeLeft - returns the amount of time left before the calling light reference expires.\n\n(timeLeft:float) reference.GetTimeLeft",
        "return": [
          "timeLeft",
          "float"
        ],
        "params": [
          "reference.GetTimeLeft"
        ]
      }
    },
    {
      "name": "GetEquippedTorchTimeLeft",
      "description": "returns the amount of time before the torch equipped by the calling actor expires.",
      "example": {
        "raw": "GetEquippedTorchTimeLeft - returns the amount of time before the torch equipped by the calling actor expires.\n\n(timeLeft:float) reference.GetEquippedTorchTimeLeft",
        "return": [
          "timeLeft",
          "float"
        ],
        "params": [
          "reference.GetEquippedTorchTimeLeft"
        ]
      }
    },
    {
      "name": "SetTimeLeft",
      "description": "sets the amount of time before the calling light reference expires. ",
      "example": {
        "raw": "SetTimeLeft - sets the amount of time before the calling light reference expires. \n\n(nothing) reference.SetTimeLeft timeLeft:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetTimeLeft"
        ]
      }
    },
    {
      "name": "GetMagicEffectCode",
      "description": "returns the magic effect code of the effect.",
      "example": {
        "raw": "GetMagicEffectCode - returns the magic effect code of the effect.\n\nNote: The 'magicEffect:ref' are actually the editor IDs of the magic effects. Thus, this command is really expecting an editor ID, just like most other commands. This means that it will also accept a ref var containing the magic effect.\n\nNote: When used on Magic Effects without FormIDs the script will not compile correctly (although it does not produce any error messages). With Oblivion.esm loaded, the effects DISE, DUMY, and RSWD do not have FormIDs. Without Oblivion.esm loaded, no magic effects have FormIDs. Modifying the effect to give it a FormID will not fix the problem. To avoid this, use magic effect codes directly or use the MagicEffectCodeFromChars function.\n\n(magicEffectCode:int) GetMagicEffectCode magicEffect:ref\n\n\n",
        "return": [
          "agicEffectCodeFromChar"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectChars",
      "description": "returns the 4-character code for a magic effect",
      "example": {
        "raw": "GetMagicEffectChars - returns the 4-character code for a magic effect\n\n(chars:string) GetMagicEffectChars magicEffect:ref",
        "return": [
          "chars",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectCharsC",
      "description": "returns the 4-character code for a magic effect",
      "example": {
        "raw": "GetMagicEffectCharsC - returns the 4-character code for a magic effect\n\n(chars:string) GetMagicEffectCharsC effectCode:int",
        "return": [
          "chars",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectFromCode",
      "description": "given an effect code, returns the effect setting matching that code.",
      "example": {
        "raw": "MagicEffectFromCode - given an effect code, returns the effect setting matching that code.\n\n(magicEffect:ref) MagicEffectFromCode effectCode:int",
        "return": [
          "magicEffect",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectFromChars",
      "description": "given a string representing a four-letter effect code (e.g. \"REHE\"), returns the effect setting matching that code",
      "example": {
        "raw": "MagicEffectFromChars - given a string representing a four-letter effect code (e.g. \"REHE\"), returns the effect setting matching that code\n\n(magicEffect:ref) MagicEffectFromChars effectChars:String",
        "return": [
          "magicEffect",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectCodeFromChars",
      "description": "given a string representing a four-letter effect code (e.g. \"REHE\"), returns the effect code for the associated effect setting.",
      "example": {
        "raw": "MagicEffectCodeFromChars - given a string representing a four-letter effect code (e.g. \"REHE\"), returns the effect code for the associated effect setting.\n\n(effectCode:int) MagicEffectCodeFromChars effectChars:String\n\n(effectCode:int) MECodeFromChars effectChars:String",
        "return": [
          "effectCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectBaseCost(C)",
      "description": "returns the base cost of the magic effect",
      "example": {
        "raw": "GetMagicEffectBaseCost(C) - returns the base cost of the magic effect\n\n(baseCost:float) GetMagicEffectBaseCost magicEffect:ref\n\n(baseCost:float) GetMEBaseCost magicEffect:ref\n\n(baseCost:float) GetMagicEffectBaseCostC magicEffectCode:int\n\n(baseCost:float) GetMEBaseCostC magicEffectCode:int",
        "return": [
          "baseCost",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectSchool(C)",
      "description": "returns the controlling school of the magic effect",
      "example": {
        "raw": "GetMagicEffectSchool(C) - returns the controlling school of the magic effect\n\n(magicSchool:int) GetMagicEffectSchool magicEffect:ref\n\n(magicSchool:int) GetMESchool magicEffect:ref\n\n(magicSchool:int) GetMagicEffectSchoolC magicEffectCode:int\n\n(magicSchool:int) GetMESchoolC magicEffectCode:int",
        "return": [
          "magicSchool",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectProjectileSpeed(C)",
      "description": "returns the projectile speed of the magic effect",
      "example": {
        "raw": "GetMagicEffectProjectileSpeed(C) - returns the projectile speed of the magic effect\n\n(projectileSpeed:float) GetMagicEffectProjectileSpeed magicEffect:ref\n\n(projectileSpeed:float) GetMEProjSpeed magicEffect:ref\n\n(projectileSpeed:float) GetMagicEffectProjectileSpeedC magicEffectCode:int\n\n(projectileSpeed:float) GetMEProjSpeedC magicEffectCode:int",
        "return": [
          "projectileSpeed",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectEnchantFactor(C)",
      "description": "returns the constant effect enchantment factor of the magic effect",
      "example": {
        "raw": "GetMagicEffectEnchantFactor(C) - returns the constant effect enchantment factor of the magic effect\n\n(enchantFactor:float) GetMagicEffectEnchantFactor magicEffect:ref\n\n(enchantFactor:float) GetMEEnchant magicEffect:ref\n\n(enchantFactor:float) GetMagicEffectEnchantFactorC magicEffectCode:int\n\n(enchantFactor:float) GetMEEnchantC magicEffectCode:int",
        "return": [
          "enchantFactor",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectBarterFactor(C)",
      "description": "returns the constant effect barter factor of the magic effect",
      "example": {
        "raw": "GetMagicEffectBarterFactor(C) - returns the constant effect barter factor of the magic effect\n\n(enchantFactor:float) GetMagicEffectBarterFactor magicEffect:ref\n\n(enchantFactor:float) GetMEEBarter magicEffect:ref\n\n(enchantFactor:float) GetMagicEffectBarterFactorC magicEffectCode:int\n\n(enchantFactor:float) GetMEBarterC magicEffectCode:int",
        "return": [
          "enchantFactor",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectHostile(C)",
      "description": "returns whether the magic effect is hostile",
      "example": {
        "raw": "IsMagicEffectHostile(C) - returns whether the magic effect is hostile\n\n(isHostile:bool) IsMagicEffectHostile magicEffect:ref\n\n(isHostile:bool) IsMEHostile magicEffect:ref\n\n(isHostile:bool) IsMagicEffectHostileC magicEffectCode:int\n\n(isHostile:bool) IsMEHostileC magicEffectCode:int",
        "return": [
          "isHostile",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectForSpellmaking(C)",
      "description": "returns whether the magic effect can be used for spell making",
      "example": {
        "raw": "IsMagicEffectForSpellmaking(C) - returns whether the magic effect can be used for spell making\n\n(isForSpellMaking:bool) IsMagicEffectForSpellmaking magicEffect:ref\n\n(isForSpellMaking:bool) IsMEForSpellmaking magicEffect:ref\n\n(isForSpellMaking:bool) IsMagicEffectForSpellmakingC magicEffectCode:int\n\n(isForSpellMaking:bool) IsMEForSpellmakingC magicEffectCode:int",
        "return": [
          "isForSpellMaking",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectForEnchanting(C)",
      "description": "returns whether the magic effect can be used when enchanting",
      "example": {
        "raw": "IsMagicEffectForEnchanting(C) - returns whether the magic effect can be used when enchanting\n\n(isForEnchanting:bool) IsMagicEffectForEnchanting magicEffect:ref\n\n(isForEnchanting:bool) IsMEForEnchanting magicEffect:ref\n\n(isForEnchanting:bool) IsMagicEffectForEnchantingC magicEffectCode:int\n\n(isForEnchanting:bool) IsMEForEnchantingC magicEffectCode:int",
        "return": [
          "isForEnchanting",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectDetrimental(C)",
      "description": "returns whether the magic effect harms the receipient",
      "example": {
        "raw": "IsMagicEffectDetrimental(C) - returns whether the magic effect harms the receipient\n\n(isDetrimental:bool) IsMagicEffectDetrimental magicEffect:ref\n\n(isDetrimental:bool) IsMEDetrimental magicEffect:ref\n\n(isDetrimental:bool) IsMagicEffectDetrimentalC magicEffectCode:int\n\n(isDetrimental:bool) IsMEDetrimentalC magicEffectCode:int",
        "return": [
          "isDetrimental",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectCanRecover(C)",
      "description": "returns whether the target can recover from the effect",
      "example": {
        "raw": "IsMagicEffectCanRecover(C) - returns whether the target can recover from the effect\n\n(isCanRecover:bool) IsMagicEffectCanRecover magicEffect:ref\n\n(isCanRecover:bool) IsMECanRecover magicEffect:ref\n\n(isCanRecover:bool) IsMagicEffectCanRecoverC magicEffectCode:int\n\n(isCanRecover:bool) IsMECanRecoverC magicEffectCode:int",
        "return": [
          "isCanRecover",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectMagnitudePercent(C)",
      "description": "returns whether the magic effect's magnitude is a percentage",
      "example": {
        "raw": "IsMagicEffectMagnitudePercent(C) - returns whether the magic effect's magnitude is a percentage\n\n(isMagPercent:bool) IsMagicEffectMagnitudePercent magicEffect:ref\n\n(isMagPercent:bool) IsMEMagnitudePercent magicEffect:ref\n\n(isMagPercent:bool) IsMagicEffectMagnitudePercentC magicEffectCode:int\n\n(isMagPercent:bool) IsMEMagnitudePercentC magicEffectCode:int",
        "return": [
          "isMagPercent",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectFXPersists(C)",
      "description": "returns whether the magic effect's graphics effects persist",
      "example": {
        "raw": "MagicEffectFXPersists(C) - returns whether the magic effect's graphics effects persist\n\n(FXPersists:bool) MagicEffectFXPersists magicEffect:ref\n\n(FXPersists:bool) MEFXPersists magicEffect:ref\n\n(FXPersists:bool) MagicEffectFXPersistsC magicEffectCode:int\n\n(FXPersists:bool) MEFXPersistsC magicEffectCode:int",
        "return": [
          "FXPersists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectOnSelfAllowed(C)",
      "description": "returns whether the magic effect can be cast on self",
      "example": {
        "raw": "IsMagicEffectOnSelfAllowed(C) - returns whether the magic effect can be cast on self\n\n(onSelfAllowed:bool) IsMagicEffectOnSelfAllowed magicEffect:ref\n\n(onSelfAllowed:bool) IsMEOnSelfAllowed magicEffect:ref\n\n(onSelfAllowed:bool) IsMagicEffectOnSelfAllowedC magicEffectCode:int\n\n(onSelfAllowed:bool) IsMEOnSelfAllowedC magicEffectCode:int",
        "return": [
          "onSelfAllowed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectOnTouchAllowed(C)",
      "description": "returns whether the magic effect can be cast on touch",
      "example": {
        "raw": "IsMagicEffectOnTouchAllowed(C) - returns whether the magic effect can be cast on touch\n\n(onTouchAllowed:bool) IsMagicEffectOnTouchAllowed magicEffect:ref\n\n(onTouchAllowed:bool) IsMEOnTouchAllowed magicEffect:ref\n\n(onTouchAllowed:bool) IsMagicEffectOnTouchAllowedC magicEffectCode:int\n\n(onTouchAllowed:bool) IsMEOnTouchAllowedC magicEffectCode:int",
        "return": [
          "onTouchAllowed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMagicEffectOnTargetAllowed(C)",
      "description": "returns whether the magic effect can be cast on target",
      "example": {
        "raw": "IsMagicEffectOnTargetAllowed(C) - returns whether the magic effect can be cast on target\n\n(onTargetAllowed:bool) IsMagicEffectOnTargetAllowed magicEffect:ref\n\n(onTargetAllowed:bool) IsMEOnTargetAllowed magicEffect:ref\n\n(onTargetAllowed:bool) IsMagicEffectOnTargetAllowedC magicEffectCode:int\n\n(onTargetAllowed:bool) IsMEOnTargetAllowedC magicEffectCode:int",
        "return": [
          "onTargetAllowed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectHasNoDuration(C)",
      "description": "returns whether the magic effect doesn't use the duration value",
      "example": {
        "raw": "MagicEffectHasNoDuration(C) - returns whether the magic effect doesn't use the duration value\n\n(hasNoDuration:bool) MagicEffectHasNoDuration magicEffect:ref\n\n(hasNoDuration:bool) MEHasNoDuration magicEffect:ref\n\n(hasNoDuration:bool) MagicEffectHasNoDurationC magicEffectCode:int\n\n(hasNoDuration:bool) MEHasNoDurationC magicEffectCode:int",
        "return": [
          "hasNoDuration",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectHasNoMagnitude(C)",
      "description": "returns whether the magic effect doesn't use the magnitude value",
      "example": {
        "raw": "MagicEffectHasNoMagnitude(C) - returns whether the magic effect doesn't use the magnitude value\n\n(hasNoMag:bool) MagicEffectHasNoMagnitude magicEffect:ref\n\n(hasNoMag:bool) MEHasNoMagnitude magicEffect:ref\n\n(hasNoMag:bool) MagicEffectHasNoMagnitudeC magicEffectCode:int\n\n(hasNoMag:bool) MEHasNoMagnitudeC magicEffectCode:int",
        "return": [
          "hasNoMag",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectHasNoArea(C)",
      "description": "returns whether the magic effect doesn't use the area value",
      "example": {
        "raw": "MagicEffectHasNoArea(C) - returns whether the magic effect doesn't use the area value\n\n(hasNoArea:bool) MagicEffectHasNoArea magicEffect:ref\n\n(hasNoArea:bool) MEHasNoArea magicEffect:ref\n\n(hasNoArea:bool) MagicEffectHasNoAreaC magicEffectCode:int\n\n(hasNoArea:bool) MEHasNoAreaC magicEffectCode:int",
        "return": [
          "hasNoArea",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectHasNoIngredient(C)",
      "description": "returns whether the magic effect has no ingredient",
      "example": {
        "raw": "MagicEffectHasNoIngredient(C) - returns whether the magic effect has no ingredient\n\n(hasNoIngredient:bool) MagicEffectHasNoIngredient magicEffect:ref\n\n(hasNoIngredient:bool) MEHasNoIngredient magicEffect:ref\n\n(hasNoIngredient:bool) MagicEffectHasNoIngredientC magicEffectCode:int\n\n(hasNoIngredient:bool) MEHasNoIngredientC magicEffectCode:int",
        "return": [
          "hasNoIngredient",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectHasNoHitEffect(C)",
      "description": "returns whether the magic effect has a graphic effect when it hits",
      "example": {
        "raw": "MagicEffectHasNoHitEffect(C) - returns whether the magic effect has a graphic effect when it hits\n\n(hasNoHitEffect:bool) MagicEffectHasNoHitEffect magicEffect:ref\n\n(hasNoHitEffect:bool) MEHasNoHitEffect magicEffect:ref\n\n(hasNoHitEffect:bool) MagicEffectHasNoHitEffectC magicEffectCode:int\n\n(hasNoHitEffect:bool) MEHasNoHitEffectC magicEffectCode:int",
        "return": [
          "hasNoHitEffect",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesWeapon(C)",
      "description": "returns whether the magic effect summons a weapon",
      "example": {
        "raw": "MagicEffectUsesWeapon(C) - returns whether the magic effect summons a weapon\n\n(usesWeapon:bool) MagicEffectUsesWeapon magicEffect:ref\n\n(usesWeapon:bool) MEUsesWeapon magicEffect:ref\n\n(usesWeapon:bool) MagicEffectUsesWeaponC magicEffectCode:int\n\n(usesWeapon:bool) MEUsesWeaponC magicEffectCode:int",
        "return": [
          "usesWeapon",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesArmor(C)",
      "description": "returns whether the magic effect summons armor",
      "example": {
        "raw": "MagicEffectUsesArmor(C) - returns whether the magic effect summons armor\n\n(usesArmor:bool) MagicEffectUsesArmor magicEffect:ref\n\n(usesArmor:bool) MEUsesArmor magicEffect:ref\n\n(usesArmor:bool) MagicEffectUsesArmorC magicEffectCode:int\n\n(usesArmor:bool) MEUsesArmorC magicEffectCode:int",
        "return": [
          "usesArmor",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesCreature(C)",
      "description": "returns whether the magic effect summons a creature",
      "example": {
        "raw": "MagicEffectUsesCreature(C) - returns whether the magic effect summons a creature\n\n(usesCreature:bool) MagicEffectUsesCreature magicEffect:ref\n\n(usesCreature:bool) MEUsesCreature magicEffect:ref\n\n(usesCreature:bool) MagicEffectUsesCreatureC magicEffectCode:int\n\n(usesCreature:bool) MEUsesCreatureC magicEffectCode:int",
        "return": [
          "usesCreature",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesSkill(C)",
      "description": "returns whether the magic effect affects a skill",
      "example": {
        "raw": "MagicEffectUsesSkill(C) - returns whether the magic effect affects a skill\n\n(usesSkill:bool) MagicEffectUsesSkill magicEffect:ref\n\n(usesSkill:bool) MEUsesSkill magicEffect:ref\n\n(usesSkill:bool) MagicEffectUsesSkillC magicEffectCode:int\n\n(usesSkill:bool) MEUsesSkillC magicEffectCode:int",
        "return": [
          "usesSkill",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesAttribute(C)",
      "description": "returns whether the magic effect affects an attribute",
      "example": {
        "raw": "MagicEffectUsesAttribute(C) - returns whether the magic effect affects an attribute\n\n(usesAttribute:bool) MagicEffectUsesAttribute magicEffect:ref\n\n(usesAttribute:bool) MEUsesAttribute magicEffect:ref\n\n(usesAttribute:bool) MagicEffectUsesAttributeC magicEffectCode:int\n\n(usesAttribute:bool) MEUsesAttributeC magicEffectCode:int",
        "return": [
          "usesAttribute",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "MagicEffectUsesOtherActorValue(C)",
      "description": "returns whether the magic effect affects an actor value that is not a skill or an attribute",
      "example": {
        "raw": "MagicEffectUsesOtherActorValue(C) - returns whether the magic effect affects an actor value that is not a skill or an attribute\n\n(usesOtherActorVal:bool) MagicEffectUsesOtherActorValue magicEffect:ref\n\n(usesOtherActorVal:bool) MEUsesOtherActorValue magicEffect:ref\n\n(usesOtherActorVal:bool) MagicEffectUsesOtherActorValueC magicEffectCode:int\n\n(usesOtherActorVal:bool) MEUsesOtherActorValueC magicEffectCode:int",
        "return": [
          "usesOtherActorVal",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectOtherActorValue(C)",
      "description": "returns the actor value (skill, attribute or other) affected by the magic effect",
      "example": {
        "raw": "GetMagicEffectOtherActorValue(C) - returns the actor value (skill, attribute or other) affected by the magic effect\n\n(actorValue:int) GetMagicEffectOtherActorValue magicEffect:ref\n\n(actorValue:int) GetMEOtherActorValue magicEffect:ref\n\n(actorValue:int) GetMagicEffectOtherActorValueC magicEffectCode:int\n\n(actorValue:int) GetMEOtherActorValueC magicEffectCode:int",
        "return": [
          "actorValue",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectUsedObject(C)",
      "description": "returns the weapon, armor or creature summoned by the magic effect",
      "example": {
        "raw": "GetMagicEffectUsedObject(C) - returns the weapon, armor or creature summoned by the magic effect\n\n(objectID:ref) GetMagicEffectUsedObject magicEffect:ref\n\n(objectID:ref) GetMEUsedObject magicEffect:ref\n\n(objectID:ref) GetMagicEffectUsedObjectC magicEffectCode:int\n\n(objectID:ref) GetMEUsedObjectC magicEffectCode:int",
        "return": [
          "objectID",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveNthMagicEffectCounter(C)",
      "description": "removes the ",
      "example": {
        "raw": "RemoveNthMagicEffectCounter(C) - removes the nth counter-effect for the magic effect.\n\n(nothing) RemoveNthMagicEffectCounter whichCounter:int magicEffect:ref\n\n(nothing) RemoveNthMECounter whichCounter:int magicEffect:ref\n\n(nothing) RemoveNthMagicEffectCounter whichCounter:int magicEffectCode:int\n\n(nothing) RemoveNthMECounterC whichCounter:int magicEffectCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "AddMagicEffectCounter(C)",
      "description": "adds a counter-effect to the magic effect. The 'C' version accepts magic effect codes for both arguments.",
      "example": {
        "raw": "AddMagicEffectCounter(C) - adds a counter-effect to the magic effect. The 'C' version accepts magic effect codes for both arguments.\n\n(nothing) AddMagicEffectCounter counterEffect:ref magicEffect:ref\n\n(nothing) AddMECounter counterEffect:ref magicEffect:ref\n\n(nothing) AddMagicEffectCounterC counterEffect:ref magicEffectCode:int\n\n(nothing) AddMECounterC counterEffectCode:int magicEffectCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetMagicEffectCounters(C)",
      "description": "returns an Array containing the effect codes of all counter-effects for the specified magic effect.",
      "example": {
        "raw": "GetMagicEffectCounters(C) - returns an Array containing the effect codes of all counter-effects for the specified magic effect.\n\n(counters:Array) GetMagicEffectCounters magicEffect:ref\n\n(counters:Array) GetMECounters magicEffect:ref\n\n(counters:Array) GetMagicEffectCountersC magicEffectCode:int\n\n(counters:Array) GetMECountersC magicEffectCode:int",
        "return": [
          "counters",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "SetMagicEffectCounters(C)",
      "description": "accepts an Array of effect codes and assigns those effects as counter-effects for the specified magic effect, overriding any existing counter-effects. The user must guarantee that the passed array contains valid effect codes and nothing else. The function returns 1 if the new counter-effects were successfully applied, 0 otherwise.",
      "example": {
        "raw": "SetMagicEffectCounters(C) - accepts an Array of effect codes and assigns those effects as counter-effects for the specified magic effect, overriding any existing counter-effects. The user must guarantee that the passed array contains valid effect codes and nothing else. The function returns 1 if the new counter-effects were successfully applied, 0 otherwise.\n\n(effectsApplied:bool) SetMagicEffectCounters counterEffects:Array magicEffect:ref\n\n(effectsApplied:bool) SetMECounters counterEffects:Array magicEffect:ref\n\n(effectsApplied:bool) SetMagicEffectCountersC counterEffects:Array magicEffectCode:int\n\n(effectsApplied:bool) SetMECountersC counterEffects:Array magicEffectCode:int",
        "return": [
          "effectsApplied",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsMapMarkerVisible",
      "description": "returns 1 if the map marker can be seen on the player's map",
      "example": {
        "raw": "IsMapMarkerVisible - returns 1 if the map marker can be seen on the player's map\n\n(visible:bool) reference.IsMapMarkerVisible",
        "return": [
          "visible",
          "bool"
        ],
        "params": [
          "reference.IsMapMarkerVisible"
        ]
      }
    },
    {
      "name": "SetMapMarkerVisible",
      "description": "sets whether the map marker can be seen on the player's map",
      "example": {
        "raw": "SetMapMarkerVisible - sets whether the map marker can be seen on the player's map\n\n(nothing) reference.SetMapMarkerVisible visible:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMapMarkerVisible"
        ]
      }
    },
    {
      "name": "CanTravelToMapMarker",
      "description": "returns 1 if the player can travel to the map marker by clicking on it in the map menu",
      "example": {
        "raw": "CanTravelToMapMarker - returns 1 if the player can travel to the map marker by clicking on it in the map menu\n\n(canTravel:bool) reference.CanTravelToMapMarker",
        "return": [
          "canTravel",
          "bool"
        ],
        "params": [
          "reference.CanTravelToMapMarker"
        ]
      }
    },
    {
      "name": "SetCanTravelToMapMarker",
      "description": "sets whether the player can travel to the map marker by clicking it in the map menu",
      "example": {
        "raw": "SetCanTravelToMapMarker - sets whether the player can travel to the map marker by clicking it in the map menu\n\n(nothing) reference.SetCanTravelToMapMarker canTravel:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetCanTravelToMapMarker"
        ]
      }
    },
    {
      "name": "GetMapMarkerType",
      "description": "returns the type of icon used to represent the location on the map.",
      "example": {
        "raw": "GetMapMarkerType - returns the type of icon used to represent the location on the map.\n\nNote: Users of the Map Marker Overhaul mod will have more types available.\n\n(markerType:int) reference.GetMapMarkerType",
        "return": [
          "markerType",
          "int"
        ],
        "params": [
          "reference.GetMapMarkerType"
        ]
      }
    },
    {
      "name": "SetMapMarkerType",
      "description": "sets the type of icon used to represent the location on the map.",
      "example": {
        "raw": "SetMapMarkerType - sets the type of icon used to represent the location on the map.\n\nNote: Users of the Map Marker Overhaul mod will have more types available.\n\n(nothing) reference.SetMapMarkerType markerType:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMapMarkerType"
        ]
      }
    },
    {
      "name": "GetMapMarkers",
      "description": "returns an Array containing all map marker references. The filter argument can be used to filter out markers based on their visibility and accessibility: pass 0 to include only visible markers which can be fast-traveled to, 1 to include all visible markers, and 2 to include all markers, including those which are not visible. The default filter value is 1. Pass a ",
      "example": {
        "raw": "GetMapMarkers - returns an Array containing all map marker references. The filter argument can be used to filter out markers based on their visibility and accessibility: pass 0 to include only visible markers which can be fast-traveled to, 1 to include all visible markers, and 2 to include all markers, including those which are not visible. The default filter value is 1. Pass a markerType parameter to include only markers of the specified type; omit it or pass zero to include all types.\n\n(markers:Array) GetMapMarkers filter:int markerType:int",
        "return": [
          "markers",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetEquippedObject",
      "description": "returns the base object of the item equipped in the specified slot",
      "example": {
        "raw": "GetEquippedObject - returns the base object of the item equipped in the specified slot\n\n(objectID:ref) reference.GetEquippedObject slot:int",
        "return": [
          "objectID",
          "ref"
        ],
        "params": [
          "reference.GetEquippedObject"
        ]
      }
    },
    {
      "name": "GetEquipmentSlotMask",
      "description": "Returns the base object of the first equipped object to match the specified equipment slot mask. If no 'value' parameter is specified, it is assumed to be the same value as the 'mask' parameter. For example, an object taking up the UpperBody, LowerBody, and Foot slots would have a mask of 4 + 8 + 32 = 44. See the \"",
      "example": {
        "raw": "GetEquipmentSlotMask - Returns the base object of the first equipped object to match the specified equipment slot mask. If no 'value' parameter is specified, it is assumed to be the same value as the 'mask' parameter. For example, an object taking up the UpperBody, LowerBody, and Foot slots would have a mask of 4 + 8 + 32 = 44. See the \"equipment slot bit assignments\" list for more info.\n\n(objectID:ref) reference.GetEquipmentSlotMask slotMask:int value:int",
        "return": [
          "objectID",
          "ref"
        ],
        "params": [
          "reference.GetEquipmentSlotMask"
        ]
      }
    },
    {
      "name": "GetMerchantContainer",
      "description": "returns the reference to the NPC's merchant container",
      "example": {
        "raw": "GetMerchantContainer - returns the reference to the NPC's merchant container\n\n(containerReference:ref) npc.GetMerchantContainer",
        "return": [
          "containerReference",
          "ref"
        ],
        "params": [
          "npc.GetMerchantContainer"
        ]
      }
    },
    {
      "name": "SetMerchantContainer",
      "description": "replaces the specified mechant's container and returns the old container. ",
      "example": {
        "raw": "SetMerchantContainer - replaces the specified mechant's container and returns the old container. \n\nNote: If the specified NPC does not have a merchant container, or if the passed reference is not a container the function does nothing and will return 0.\n\n(oldContainerRef:ref) npc.SetMerchantContainer nuContainer:ref",
        "return": [
          "oldContainerRef",
          "ref"
        ],
        "params": [
          "npc.SetMerchantContainer"
        ]
      }
    },
    {
      "name": "GetHorse",
      "description": "returns the horse currently ridden by the calling NPC.",
      "example": {
        "raw": "GetHorse - returns the horse currently ridden by the calling NPC.\n\nNote: This function returns a reference while the NPC is in the process of walking toward a horse with the intention of mounting it.\n\n(horse:ref) reference.GetHorse",
        "return": [
          "horse",
          "ref"
        ],
        "params": [
          "reference.GetHorse"
        ]
      }
    },
    {
      "name": "GetTravelHorse",
      "description": "returns a reference to the travel horse used by the calling reference.",
      "example": {
        "raw": "GetTravelHorse - returns a reference to the travel horse used by the calling reference.\n\n(horse:ref) reference.GetTravelHorse",
        "return": [
          "horse",
          "ref"
        ],
        "params": [
          "reference.GetTravelHorse"
        ]
      }
    },
    {
      "name": "SetTravelHorse",
      "description": "Sets the travel horse used by the calling reference to the horse reference specified. Changes are not saved in the savegame.",
      "example": {
        "raw": "SetTravelHorse - Sets the travel horse used by the calling reference to the horse reference specified. Changes are not saved in the savegame.\n\n(nothing) reference.SetTravelHorse horse:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetTravelHorse"
        ]
      }
    },
    {
      "name": "IsFemale",
      "description": "returns 1 if the NPC is female.",
      "example": {
        "raw": "IsFemale - returns 1 if the NPC is female.\n\n(isFemale:bool) reference.IsFemale npc:ref",
        "return": [
          "isFemale",
          "bool"
        ],
        "params": [
          "reference.IsFemale"
        ]
      }
    },
    {
      "name": "CopyHair",
      "description": "Copies the hair style, length, and color from one NPC to another. Changes alter the base actor and are not saved in the savegame unless called on the player.",
      "example": {
        "raw": "CopyHair - Copies the hair style, length, and color from one NPC to another. Changes alter the base actor and are not saved in the savegame unless called on the player.\n\nNote: Changes will not be visible until the actor is reloaded or Update3D is used on it.\n\n(nothing) reference.CopyHair copyFrom:ref copyTo:ref",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "CopyEyes",
      "description": "Copies the eyes used by one npc onto another, with the same caveats as CopyHair.",
      "example": {
        "raw": "CopyEyes - Copies the eyes used by one npc onto another, with the same caveats as CopyHair.\n\n(nothing) reference.CopyEyes copyFrom:ref copyTo:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.CopyEyes"
        ]
      }
    },
    {
      "name": "SetHair",
      "description": "Sets the hair on the NPC to a hairstyle predefined in the CS, with the same caveats as CopyHair.",
      "example": {
        "raw": "SetHair - Sets the hair on the NPC to a hairstyle predefined in the CS, with the same caveats as CopyHair.\n\n(nothing) reference.SetHair hairStyle:ref npc:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetHair"
        ]
      }
    },
    {
      "name": "SetEyes",
      "description": "Sets the eyes on the NPC to a set of eyes predefined in the CS, with the same caveats as CopyHair.",
      "example": {
        "raw": "SetEyes - Sets the eyes on the NPC to a set of eyes predefined in the CS, with the same caveats as CopyHair.\n\n(nothing) reference.SetEyes eyes:ref npc:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetEyes"
        ]
      }
    },
    {
      "name": "GetRace",
      "description": "returns the race of an NPC.",
      "example": {
        "raw": "GetRace - returns the race of an NPC.\n\n(race:ref) reference.GetRace npc:ref",
        "return": [
          "race",
          "ref"
        ],
        "params": [
          "reference.GetRace"
        ]
      }
    },
    {
      "name": "CopyRace",
      "description": "modifies the calling NPC reference to be the same race as the passed base NPC. The calling NPC gets the same skeleton, textures, and other race attributes of the specified base NPC. Its facial parameters, hair, and eyes do not change. This command affects the base object of the calling NPC, and should only be used on references which are unique (no other references share the same base form). Note that if the NPC's new race uses a different voice than its old voice, it may not audibly speak any race-specific dialog which has not been recorded for the new voice.",
      "example": {
        "raw": "CopyRace - modifies the calling NPC reference to be the same race as the passed base NPC. The calling NPC gets the same skeleton, textures, and other race attributes of the specified base NPC. Its facial parameters, hair, and eyes do not change. This command affects the base object of the calling NPC, and should only be used on references which are unique (no other references share the same base form). Note that if the NPC's new race uses a different voice than its old voice, it may not audibly speak any race-specific dialog which has not been recorded for the new voice.\n\n(nothing) reference.CopyRace sourceNPC:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.CopyRace"
        ]
      }
    },
    {
      "name": "GetHair",
      "description": "returns the NPC's hairstyle.",
      "example": {
        "raw": "GetHair - returns the NPC's hairstyle.\n\n(hair:ref) reference.GetHair npc:ref",
        "return": [
          "hair",
          "ref"
        ],
        "params": [
          "reference.GetHair"
        ]
      }
    },
    {
      "name": "GetEyes",
      "description": "returns the NPC's eyes.",
      "example": {
        "raw": "GetEyes - returns the NPC's eyes.\n\n(eyes:ref) reference.GetEyes npc:ref",
        "return": [
          "eyes",
          "ref"
        ],
        "params": [
          "reference.GetEyes"
        ]
      }
    },
    {
      "name": "GetHairColor",
      "description": "returns the RGB value of the NPC's hair color.",
      "example": {
        "raw": "GetHairColor - returns the RGB value of the NPC's hair color.\n\n(color:int) reference.GetHairColor rgb:int npc:ref",
        "return": [
          "color",
          "int"
        ],
        "params": [
          "reference.GetHairColor"
        ]
      }
    },
    {
      "name": "GetTrainerLevel",
      "description": "returns the level at which the NPC offers training.",
      "example": {
        "raw": "GetTrainerLevel - returns the level at which the NPC offers training.\n\n(level:int) reference.GetTrainerLevel npc:ref",
        "return": [
          "level",
          "int"
        ],
        "params": [
          "reference.GetTrainerLevel"
        ]
      }
    },
    {
      "name": "GetTrainerSkill",
      "description": "returns the skill in which the NPC offers training as an ",
      "example": {
        "raw": "GetTrainerSkill - returns the skill in which the NPC offers training as an actor value code.\n\n(skill:int) reference.GetTrainerSkill npc:ref",
        "return": [
          "skill",
          "int"
        ],
        "params": [
          "reference.GetTrainerSkill"
        ]
      }
    },
    {
      "name": "SetTrainerLevel",
      "description": "sets the level at which an NPC offers training.",
      "example": {
        "raw": "SetTrainerLevel - sets the level at which an NPC offers training.\n\n(nothing) reference.SetTrainerLevel newLevel:int npc:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetTrainerLevel"
        ]
      }
    },
    {
      "name": "SetTrainerSkill",
      "description": "sets the skill in which an NPC offers training.",
      "example": {
        "raw": "SetTrainerSkill - sets the skill in which an NPC offers training.\n\n(nothing) reference.SetTrainerSkill newSkill:actorValue npc:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetTrainerSkill"
        ]
      }
    },
    {
      "name": "GetServicesMask",
      "description": "returns an integer code representing the services offered by an NPC. The code is obtained by ORing (adding) ",
      "example": {
        "raw": "GetServicesMask - returns an integer code representing the services offered by an NPC. The code is obtained by ORing (adding) service flags\n\n(servicesMask:int) reference.GetServicesMask npc:ref",
        "return": [
          "servicesMask",
          "int"
        ],
        "params": [
          "reference.GetServicesMask"
        ]
      }
    },
    {
      "name": "OffersServicesC",
      "description": "returns 1 if the NPC offers all of the services specified by the services mask",
      "example": {
        "raw": "OffersServicesC - returns 1 if the NPC offers all of the services specified by the services mask\n\n(offersServices:bool) reference.OffersServicesC serviceFlags:int npc:ref",
        "return": [
          "offersServices",
          "bool"
        ],
        "params": [
          "reference.OffersServicesC"
        ]
      }
    },
    {
      "name": "SetOffersServicesC",
      "description": "sets the services offered by the NPC to the specified services mask.",
      "example": {
        "raw": "SetOffersServicesC - sets the services offered by the NPC to the specified services mask.\n\n(nothing) reference.SetOffersServicesC serviceFlags:int npc:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetOffersServicesC"
        ]
      }
    },
    {
      "name": "GetPathNodesInRadius",
      "description": "returns an Array of all path nodes located within the circular area described by the center point (x, y) and the radius. By default, disabled nodes are ignored; pass 1 for the optional fourth argument to include them.",
      "example": {
        "raw": "GetPathNodesInRadius - returns an Array of all path nodes located within the circular area described by the center point (x, y) and the radius. By default, disabled nodes are ignored; pass 1 for the optional fourth argument to include them.\n\n(nodes:Array) GetPathNodesInRadius centerX:float centerY:float radius:float includeDisabledNodes:bool",
        "return": [
          "nodes",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetPathNodesInRect",
      "description": "returns an Array of all path nodes located within the rectangular area described by the center point (x, y) and the extents along the x and y axes (i.e. half-width and half-height). An angle of rotation in radians can optionally be specified; if omitted the rectangle is assumed to be aligned with the world axes. By default, disabled nodes are ignored; pass 1 for the optional sixth argument to include them.",
      "example": {
        "raw": "GetPathNodesInRect - returns an Array of all path nodes located within the rectangular area described by the center point (x, y) and the extents along the x and y axes (i.e. half-width and half-height). An angle of rotation in radians can optionally be specified; if omitted the rectangle is assumed to be aligned with the world axes. By default, disabled nodes are ignored; pass 1 for the optional sixth argument to include them.\n\n(nodes:Array) GetPathNodesInRect centerX:float centerY:float extentX:float extentY:float angle:float includeDisabledNodes:bool",
        "return": [
          "nodes",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetPathNodePos",
      "description": "returns the x, y, or z coordinate of the specified path node. ",
      "example": {
        "raw": "GetPathNodePos - returns the x, y, or z coordinate of the specified path node. \n\n(pos:float) GetPathNodePos nodeID:int whichPos:axis",
        "return": [
          "pos",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IsPathNodeDisabled",
      "description": "returns 1 if the path node is disabled.",
      "example": {
        "raw": "IsPathNodeDisabled - returns 1 if the path node is disabled.\n\n(disabled:bool) IsPathNodeDisabled nodeID:int",
        "return": [
          "disabled",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetPathNodeDisabled",
      "description": "enables or disables the specified path node. This node will no longer be used in future pathfinding attempts, but actors who have already built a path including this node may continue along it normally. If this is undesirable, calling EvaluatePackage on the actor will force it to build a new path.",
      "example": {
        "raw": "SetPathNodeDisabled - enables or disables the specified path node. This node will no longer be used in future pathfinding attempts, but actors who have already built a path including this node may continue along it normally. If this is undesirable, calling EvaluatePackage on the actor will force it to build a new path.\n\n(nothing) SetPathNodeDisabled nodeID:int disable:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPathNodeLinkedRef",
      "description": "returns the persistent reference linked to this node in the editor, if any.",
      "example": {
        "raw": "GetPathNodeLinkedRef - returns the persistent reference linked to this node in the editor, if any.\n\n(linked:ref) GetPathNodeLinkedRef nodeID:int",
        "return": [
          "linked",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "PathEdgeExists",
      "description": "returns 1 if the two nodes are connected.",
      "example": {
        "raw": "PathEdgeExists - returns 1 if the two nodes are connected.\n\n(exists:bool) PathEdgeExists nodeID:int nodeID:int",
        "return": [
          "exists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetCrosshairRef",
      "description": "returns a reference to whatever is currently under the player's crosshair. Generally returns zero when called during MenuMode. Note that this function will return non-activatable references as well; use ",
      "example": {
        "raw": "GetCrosshairRef - returns a reference to whatever is currently under the player's crosshair. Generally returns zero when called during MenuMode. Note that this function will return non-activatable references as well; use IsActivatable to determine if the reference can be activated normally.\n\nNote: The object must be within activate distance of the player, determined by the game setting iActivatePickLength. If a Telekinesis spell is selected, it will also return a more distant reference. (TODO: Verify)\n\nNote: Returns 0 for 1-5 frames (maybe even longer) after player presses Activate. (TODO: Verify)\n\n(crosshairRef:ref) GetCrosshairRef",
        "return": [
          "ActivatePickLengt"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayersLastRiddenHorse",
      "description": "returns a reference to the horse most recently ridden by the player.",
      "example": {
        "raw": "GetPlayersLastRiddenHorse - returns a reference to the horse most recently ridden by the player.\n\n(horse:ref) GetPlayersLastRiddenHorse\n\n(horse:ref) GetPCLastHorse",
        "return": [
          "horse",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetPlayersLastRiddenHorse",
      "description": "marks the specified horse as the horse most recently ridden by the player. This is the horse that will accompany the player when fast traveling while dismounted. The argument must be a Creature of type Horse. Additionally, in order for the new horse to fast travel with the player it must not be owned by anyone other than the player.",
      "example": {
        "raw": "SetPlayersLastRiddenHorse - marks the specified horse as the horse most recently ridden by the player. This is the horse that will accompany the player when fast traveling while dismounted. The argument must be a Creature of type Horse. Additionally, in order for the new horse to fast travel with the player it must not be owned by anyone other than the player.\n\n(successfullySet:bool) SetPlayersLastRiddenHorse horse:ref",
        "return": [
          "successfullySet",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ClearPlayersLastRiddenHorse",
      "description": "clears the game's memory of the horse last ridden by the player. This prevents any horse from accompanying the player when fast traveling, provided the player is not mounted on a horse when he travels.",
      "example": {
        "raw": "ClearPlayersLastRiddenHorse - clears the game's memory of the horse last ridden by the player. This prevents any horse from accompanying the player when fast traveling, provided the player is not mounted on a horse when he travels.\n\n(nothing) ClearPlayersLastRiddenHorse",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayersLastActivatedLoadDoor",
      "description": "returns a reference to the load door most recently activated by the player.",
      "example": {
        "raw": "GetPlayersLastActivatedLoadDoor - returns a reference to the load door most recently activated by the player.\n\n(loadDoor:ref) GetPlayersLastActivatedLoadDoor\n\n(loadDoor:ref) GetPCLastLoadDoor",
        "return": [
          "loadDoor",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetGodMode",
      "description": "returns 1 if the player has toggled god mode on.",
      "example": {
        "raw": "GetGodMode - returns 1 if the player has toggled god mode on.\n\n(godMode:bool) GetGodMode",
        "return": [
          "godMode",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetPCAMurderer",
      "description": "sets whether the PC is a murderer or not.",
      "example": {
        "raw": "SetPCAMurderer - sets whether the PC is a murderer or not.\n\n(nothing) SetPCAMurderer isMurderer:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayerSpell",
      "description": "returns the objectID of the player's current spell.",
      "example": {
        "raw": "GetPlayerSpell - returns the objectID of the player's current spell.\n\nNote: If the active spell is removed from the player, this function might return 0. (TODO: Verify)\n\n(spell:ref) GetPlayerSpell",
        "return": [
          "spell",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayerSpellCount",
      "description": "returns the player spell count.",
      "example": {
        "raw": "GetPlayerSpellCount - returns the player spell count.\n\n(count:int) GetPlayerSpellCount\n\n(count:int) GetSpellCount",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthPlayerSpell",
      "description": "returns the nth player spell. whichSpell is an index that starts at 0 for the first spell in the list.",
      "example": {
        "raw": "GetNthPlayerSpell - returns the nth player spell. whichSpell is an index that starts at 0 for the first spell in the list.\n\nNote: The CS compiler doesn't expect spells to be returned as a ref. If you are calling this function multiple times to set the same ref variable you need to assign that variable to some other type (say a weapon) in between your calls to this function. Otherwise the ref will continue to keep the value from the first call. (TODO: Verify)\n\n(spell:ref) GetNthPlayerSpell whichSpell:int\n\n(spell:ref) GetNthSpell whichSpell:int",
        "return": [
          "spell",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCMajorSkillUps",
      "description": "returns the number of major skill advancements toward the player's next level.",
      "example": {
        "raw": "GetPCMajorSkillUps - returns the number of major skill advancements toward the player's next level.\n\n(skillUps:int) GetPCMajorSkillUps",
        "return": [
          "skillUps",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetPCMajorSkillUps",
      "description": "sets the number of major skill advancements toward the player's next level",
      "example": {
        "raw": "SetPCMajorSkillUps - sets the number of major skill advancements toward the player's next level\n\n(nothing) SetPCMajorSkillUps skillUps:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCAttributeBonus",
      "description": "returns the number of skill advancements contributing to the specified attribute's bonus for the next level. Note that game setting multipliers applied to these values determine the actual bonus at level-up. Returns -1 if passed an invalid actor value, including Luck.",
      "example": {
        "raw": "GetPCAttributeBonus - returns the number of skill advancements contributing to the specified attribute's bonus for the next level. Note that game setting multipliers applied to these values determine the actual bonus at level-up. Returns -1 if passed an invalid actor value, including Luck.\n\n(bonus:int) GetPCAttributeBonus actorValue:string",
        "return": [
          "bonus",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetPCAttributeBonus",
      "description": "sets the number of skill advancements contributing to the specified attribute's bonus for the next level. Note that game setting multipliers applied to these values determine the actual bonus at level-up. Does not affect Luck bonus.",
      "example": {
        "raw": "SetPCAttributeBonus - sets the number of skill advancements contributing to the specified attribute's bonus for the next level. Note that game setting multipliers applied to these values determine the actual bonus at level-up. Does not affect Luck bonus.\n\n(bonus:int) GetPCAttributeBonus actorValue:string bonus:int",
        "return": [
          "bonus",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetTotalPCAttributeBonus",
      "description": "returns the sum of the player's attribute bonuses.",
      "example": {
        "raw": "GetTotalPCAttributeBonus - returns the sum of the player's attribute bonuses.\n\n(bonus:int) GetTotalPCAttributeBonus",
        "return": [
          "bonus",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ModPCSpellEffectiveness",
      "description": "alters the script modifier applied to the player's spell effectiveness. This works similarly to Oblivion's ModAV command. Positive values increases the modifier, negative values decrease it. Any game calculations involving player spell effectiveness will use the modified value (base effectiveness + modifier). By default, the effects of this command persist until the end of the current game session. Pass 1 for the second parameter to save the amount modified in the savegame; it will then be applied every time the savegame is reloaded, and removed when reloading a different savegame.",
      "example": {
        "raw": "ModPCSpellEffectiveness - alters the script modifier applied to the player's spell effectiveness. This works similarly to Oblivion's ModAV command. Positive values increases the modifier, negative values decrease it. Any game calculations involving player spell effectiveness will use the modified value (base effectiveness + modifier). By default, the effects of this command persist until the end of the current game session. Pass 1 for the second parameter to save the amount modified in the savegame; it will then be applied every time the savegame is reloaded, and removed when reloading a different savegame.\n\n(nothing) ModPCSpellEffectiveness modBy:float persist:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCSpellEffectivenessModifier",
      "description": "returns the current value of the script modifier for player spell effectiveness. Subtract this value from the return value of Player.GetSpellEffectiveness to get the player's base spell effectiveness.",
      "example": {
        "raw": "GetPCSpellEffectivenessModifier - returns the current value of the script modifier for player spell effectiveness. Subtract this value from the return value of Player.GetSpellEffectiveness to get the player's base spell effectiveness.\n\n(modifier:float) GetPCSpellEffectivenessModifier",
        "return": [
          "modifier",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCTrainingSessionsUsed",
      "description": "returns the number of times the player has trained during his current level.",
      "example": {
        "raw": "GetPCTrainingSessionsUsed - returns the number of times the player has trained during his current level.\n\n(numSessions:int) GetPCTrainingSessionsUsed",
        "return": [
          "numSessions",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetPCTrainingSessionsUsed",
      "description": "sets the number of times the player has trained during his current level.",
      "example": {
        "raw": "SetPCTrainingSessionsUsed - sets the number of times the player has trained during his current level.\n\n(nothing) SetPCTrainingSessionsUsed numSessions:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModPCMovementSpeed",
      "description": "applies a positive or negative modifier to the player's speed attribute as used in calculating his movement speed while swimming, walking, or running. The actual attribute is not modified, but movement calculations use the attribute value plus the modifier. Positive modifiers well above the maximum value of the speed attribute are permitted and effective; minimum speed including the modifier is limited to zero. By default, the effects of this command persist until the end of the current game session. Pass 1 for the second parameter to save the amount modified in the savegame; it will then be applied every time the savegame is reloaded, and removed when reloading a different savegame.",
      "example": {
        "raw": "ModPCMovementSpeed - applies a positive or negative modifier to the player's speed attribute as used in calculating his movement speed while swimming, walking, or running. The actual attribute is not modified, but movement calculations use the attribute value plus the modifier. Positive modifiers well above the maximum value of the speed attribute are permitted and effective; minimum speed including the modifier is limited to zero. By default, the effects of this command persist until the end of the current game session. Pass 1 for the second parameter to save the amount modified in the savegame; it will then be applied every time the savegame is reloaded, and removed when reloading a different savegame.\n\n(nothing) ModPCMovementSpeed modBy:float persist:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": " ",
      "description": "GetPCMovementSpeedModifier",
      "example": {
        "raw": " GetPCMovementSpeedModifier - returns the current modifier applied to the player's speed for use in movement speed calculations. Because multiple mods may change the modifier this command returns the sum of all calls to ModPCMovementSpeed.\n\n(modifier:float) GetPCMovementSpeedModifier",
        "return": [
          "modifier",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayerBirthsign",
      "description": "returns the birthsign chosen by the player.",
      "example": {
        "raw": "GetPlayerBirthsign - returns the birthsign chosen by the player.\n\n(birthsign:ref) GetPlayerBirthsign",
        "return": [
          "birthsign",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetPlayerBirthsign",
      "description": "changes the player's birthsign to the one specified. This removes all effects of the previous birthsign and applies the effects of the new one.",
      "example": {
        "raw": "SetPlayerBirthsign - changes the player's birthsign to the one specified. This removes all effects of the previous birthsign and applies the effects of the new one.\n\n(nothing) SetPlayerBirthsign birthsign:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetTelekinesisRef",
      "description": "returns a reference to the object being manipulated by the player through telekinesis, if any.",
      "example": {
        "raw": "GetTelekinesisRef - returns a reference to the object being manipulated by the player through telekinesis, if any.\n\n(telekinesisRef:ref) GetTelekinesisRef",
        "return": [
          "telekinesisRef",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetCurrentRegions",
      "description": "returns an Array of all the regions in which the player is currently located, if any. In interior cells generally returns 0. Regions in exterior cells can overlap, therefore it's possible for the player to be in several regions simultaneously.",
      "example": {
        "raw": "GetCurrentRegions - returns an Array of all the regions in which the player is currently located, if any. In interior cells generally returns 0. Regions in exterior cells can overlap, therefore it's possible for the player to be in several regions simultaneously.\n\n(regions:Array) GetCurrentRegions",
        "return": [
          "regions",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCLastDroppedItem",
      "description": "returns the base object of the item most recently dropped by the player.",
      "example": {
        "raw": "GetPCLastDroppedItem - returns the base object of the item most recently dropped by the player.\n\n(item:ref) GetPCLastDroppedItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCLastDroppedItemRef",
      "description": "returns the reference of the item most recently dropped by the player.",
      "example": {
        "raw": "GetPCLastDroppedItemRef - returns the reference of the item most recently dropped by the player.\n\n(item:ref) GetPCLastDroppedItemRef",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetPCAttributeBonusC",
      "description": "returns the level-up bonus for the specified attribute.",
      "example": {
        "raw": "GetPCAttributeBonusC - returns the level-up bonus for the specified attribute.\n\n(short) GetPCAttributeBonusC actorValue:int",
        "return": [
          "short"
        ],
        "params": []
      }
    },
    {
      "name": "SetPCAttributeBonusC",
      "description": "sets the level-up bonus for the specified attribute.",
      "example": {
        "raw": "SetPCAttributeBonusC - sets the level-up bonus for the specified attribute.\n\n(nothing) SetPCAttributeBonusC actorValue:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastUsedSigilStone",
      "description": "returns the sigil stone most recently used to enchant an item during the current game session.",
      "example": {
        "raw": "GetLastUsedSigilStone - returns the sigil stone most recently used to enchant an item during the current game session.\n\n(usedSigilStone:ref) GetLastUsedSigilStone\n\n(usedSigilStone:ref) GetLastSS",
        "return": [
          "usedSigilStone",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastSigilStoneEnchantedItem",
      "description": "returns the unenchanted item most recently enchanted with a sigil stone during the current game session.",
      "example": {
        "raw": "GetLastSigilStoneEnchantedItem - returns the unenchanted item most recently enchanted with a sigil stone during the current game session.\n\n(item:ref) GetLastSigilStoneEnchantedItem\n\n(item:ref) GetLastSSItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastSigilStoneCreatedItem",
      "description": "returns the enchanted item most recently created with a sigil stone during the current game session.",
      "example": {
        "raw": "GetLastSigilStoneCreatedItem - returns the enchanted item most recently created with a sigil stone during the current game session.\n\n(item:ref) GetLastSigilStoneCreatedItem\n\n(item:ref) GetLastSSCreated",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetFlyCameraSpeedMult",
      "description": "changes the speed multiplier for the player's camera when in fly camera mode.",
      "example": {
        "raw": "SetFlyCameraSpeedMult - changes the speed multiplier for the player's camera when in fly camera mode.\n\n(nothing) SetFlyCameraSpeedMult multiplier:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetPlayerSkeletonPath",
      "description": "Set the specific path as the player's skeleton.",
      "example": {
        "raw": "SetPlayerSkeletonPath - Set the specific path as the player's skeleton.\n\nNote: WARNING: passing an invalid path or invalid nif can crash the game.\n\n(nothing) SetPlayerSkeletonPath path:string",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetProjectileType",
      "description": "returns the type of the projectile.",
      "example": {
        "raw": "GetProjectileType - returns the type of the projectile.\n\n(projectileType:int) reference.GetProjectileType",
        "return": [
          "projectileType",
          "int"
        ],
        "params": [
          "reference.GetProjectileType"
        ]
      }
    },
    {
      "name": "GetProjectileSource",
      "description": "returns the caster of a magic projectile or the archer who fired an arrow projectile.",
      "example": {
        "raw": "GetProjectileSource - returns the caster of a magic projectile or the archer who fired an arrow projectile.\n\n(source:ref) reference.GetProjectileSource",
        "return": [
          "source",
          "ref"
        ],
        "params": [
          "reference.GetProjectileSource"
        ]
      }
    },
    {
      "name": "GetMagicProjectileSpell",
      "description": "returns the spell attached to a magic projectile.",
      "example": {
        "raw": "GetMagicProjectileSpell - returns the spell attached to a magic projectile.\n\n(spell:ref) reference.GetMagicProjectileSpell\n\n(spell:ref) reference.GetMPSpell",
        "return": [
          "spell",
          "ref"
        ],
        "params": [
          "reference.GetMagicProjectileSpell"
        ]
      }
    },
    {
      "name": "SetMagicProjectileSpell",
      "description": "changes the spell attached to a magic projectile.",
      "example": {
        "raw": "SetMagicProjectileSpell - changes the spell attached to a magic projectile.\n\n(nothing) reference.SetMagicProjectileSpell newSpell:ref\n\n(nothing) reference.SetMPSpell newSpell:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetMagicProjectileSpell"
        ]
      }
    },
    {
      "name": "GetArrowProjectileEnchantment",
      "description": "returns the enchantment on an arrow projectile.",
      "example": {
        "raw": "GetArrowProjectileEnchantment - returns the enchantment on an arrow projectile.\n\n(enchantment:ref) reference.GetArrowProjectileEnchantment\n\n(enchantment:ref) reference.GetAPEnch",
        "return": [
          "enchantment",
          "ref"
        ],
        "params": [
          "reference.GetArrowProjectileEnchantment"
        ]
      }
    },
    {
      "name": "GetArrowProjectileBowEnchantment",
      "description": "returns the enchantment on an arrow derived from the bow from which it was fired.",
      "example": {
        "raw": "GetArrowProjectileBowEnchantment - returns the enchantment on an arrow derived from the bow from which it was fired.\n\n(enchantment:ref) reference.GetArrowProjectileBowEnchantment\n\n(enchantment:ref) reference.GetAPBowEnch",
        "return": [
          "enchantment",
          "ref"
        ],
        "params": [
          "reference.GetArrowProjectileBowEnchantment"
        ]
      }
    },
    {
      "name": "GetArrowProjectilePoison",
      "description": "returns the poison on an arrow projectile.",
      "example": {
        "raw": "GetArrowProjectilePoison - returns the poison on an arrow projectile.\n\n(poison:ref) reference.GetArrowProjectilePoison\n\n(poison:ref) reference.GetAPPoison",
        "return": [
          "poison",
          "ref"
        ],
        "params": [
          "reference.GetArrowProjectilePoison"
        ]
      }
    },
    {
      "name": "SetPlayerProjectile",
      "description": "sets the player as the source of the projectile. Actors hit by the projectile will react as if the player had cast the spell or fired the arrow.",
      "example": {
        "raw": "SetPlayerProjectile - sets the player as the source of the projectile. Actors hit by the projectile will react as if the player had cast the spell or fired the arrow.\n\n(nothing) reference.SetPlayerProjectile",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetPlayerProjectile"
        ]
      }
    },
    {
      "name": "SetProjectileSource",
      "description": "sets the source of a projectile. If an actor other than the player is set as the source, the target of the projectile will not necessarily respond to the attack.",
      "example": {
        "raw": "SetProjectileSource - sets the source of a projectile. If an actor other than the player is set as the source, the target of the projectile will not necessarily respond to the attack.\n\n(nothing) reference.SetProjectileSource actor:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetProjectileSource"
        ]
      }
    },
    {
      "name": "SetArrowProjectileEnchantment",
      "description": "sets the arrow enchantment associated with the calling projectile.",
      "example": {
        "raw": "SetArrowProjectileEnchantment - sets the arrow enchantment associated with the calling projectile.\n\n(nothing) reference.SetArrowProjectileEnchantment enchantment:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetArrowProjectileEnchantment"
        ]
      }
    },
    {
      "name": "SetArrowProjectileBowEnchantment",
      "description": "sets the bow enchantment associated with the calling projectile.",
      "example": {
        "raw": "SetArrowProjectileBowEnchantment - sets the bow enchantment associated with the calling projectile.\n\n(nothing) reference.SetArrowProjectileBowEnchantment enchantment:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetArrowProjectileBowEnchantment"
        ]
      }
    },
    {
      "name": "SetArrowProjectilePoison",
      "description": "sets the poison on the calling projectile.",
      "example": {
        "raw": "SetArrowProjectilePoison - sets the poison on the calling projectile.\n\n(nothing) reference.SetArrowProjectilePoison poison:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetArrowProjectilePoison"
        ]
      }
    },
    {
      "name": "GetProjectileSpeed",
      "description": "returns the speed of the projectile.",
      "example": {
        "raw": "GetProjectileSpeed - returns the speed of the projectile.\n\n(speed:float) reference.GetProjectileSpeed",
        "return": [
          "speed",
          "float"
        ],
        "params": [
          "reference.GetProjectileSpeed"
        ]
      }
    },
    {
      "name": "GetProjectileDistanceTraveled",
      "description": "returns the total distance traveled by the calling projectile. Currently does not work for arrow projectiles.",
      "example": {
        "raw": "GetProjectileDistanceTraveled - returns the total distance traveled by the calling projectile. Currently does not work for arrow projectiles.\n\n(distance:float) reference.GetProjectileDistanceTraveled",
        "return": [
          "distance",
          "float"
        ],
        "params": [
          "reference.GetProjectileDistanceTraveled"
        ]
      }
    },
    {
      "name": "GetProjectileLifetime",
      "description": "returns the number of seconds for which the calling projectile has existed.",
      "example": {
        "raw": "GetProjectileLifetime - returns the number of seconds for which the calling projectile has existed.\n\n(lifetime:float) reference.GetProjectileLifetime",
        "return": [
          "lifetime",
          "float"
        ],
        "params": [
          "reference.GetProjectileLifetime"
        ]
      }
    },
    {
      "name": "SetProjectileSpeed",
      "description": "sets the speed of the projectile. Note that other factors affect the movement of a projectile so a speed of zero does not necessarily completely halt the projectile.",
      "example": {
        "raw": "SetProjectileSpeed - sets the speed of the projectile. Note that other factors affect the movement of a projectile so a speed of zero does not necessarily completely halt the projectile.\n\n(nothing) reference.SetProjectileSpeed speed:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetProjectileSpeed"
        ]
      }
    },
    {
      "name": "GetProjectile",
      "description": "returns the projectile most recently fired by the calling actor. Optionally specify the type (1 for arrows, 2 for magic, 0 for either) and the arrow, spell, or staff enchantment to match. The minLifetime parameter specifies how old (in seconds) a projectile can be before it is ignored.",
      "example": {
        "raw": "GetProjectile - returns the projectile most recently fired by the calling actor. Optionally specify the type (1 for arrows, 2 for magic, 0 for either) and the arrow, spell, or staff enchantment to match. The minLifetime parameter specifies how old (in seconds) a projectile can be before it is ignored.\n\n(projectile:ref) reference.GetProjectile type:int minLifetime:float arrowOrMagicItemID:ref",
        "return": [
          "projectile",
          "ref"
        ],
        "params": [
          "reference.GetProjectile"
        ]
      }
    },
    {
      "name": "SetActiveQuest",
      "description": "sets the players active quest.",
      "example": {
        "raw": "SetActiveQuest - sets the players active quest.\n\n(nothing) SetActiveQuest quest:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveQuest",
      "description": "returns the player's active quest, if any.",
      "example": {
        "raw": "GetActiveQuest - returns the player's active quest, if any.\n\n(ref) GetActiveQuest",
        "return": [
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "ClearActiveQuest",
      "description": "clears the player's active quest, if any.",
      "example": {
        "raw": "ClearActiveQuest - clears the player's active quest, if any.\n\n(nothing) ClearActiveQuest",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCurrentQuests",
      "description": "returns a list of all currently active (uncompleted) quests. Note that this list includes quests which do not appear in the journal.",
      "example": {
        "raw": "GetCurrentQuests - returns a list of all currently active (uncompleted) quests. Note that this list includes quests which do not appear in the journal.\n\n(Array) GetCurrentQuests",
        "return": [
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetCompletedQuests",
      "description": "returns a list of all completed quests.",
      "example": {
        "raw": "GetCompletedQuests - returns a list of all completed quests.\n\n(Array) GetCompletedQuests",
        "return": [
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "IsQuestComplete",
      "description": "returns 1 if the specified quest is marked as 'completed'.",
      "example": {
        "raw": "IsQuestComplete - returns 1 if the specified quest is marked as 'completed'.\n\n(completed:bool) IsQuestComplete quest:ref",
        "return": [
          "completed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "UncompleteQuest",
      "description": "removes the 'completed' flag from the specified quest.",
      "example": {
        "raw": "UncompleteQuest - removes the 'completed' flag from the specified quest.\n\n(nothing) UncompleteQuest quest:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "QuestExists",
      "description": "returns 1 if a quest exists with the specified editorID.",
      "example": {
        "raw": "QuestExists - returns 1 if a quest exists with the specified editorID.\n\n(questExists:bool) QuestExists questEditorID:string",
        "return": [
          "questExists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetStageIDs",
      "description": "returns an Array containing the numeric index of each quest stage associated with the specified quest.",
      "example": {
        "raw": "GetStageIDs - returns an Array containing the numeric index of each quest stage associated with the specified quest.\n\n(stageIDs:array) GetStageIDs quest:ref",
        "return": [
          "stageIDs",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "GetStageEntries",
      "description": "returns an Array of all of the entries associated with the specified quest stage. Each element of the array is a Stringmap containing the following fields: \"day\" (1-31), \"month\" (1-12), and \"year\", representing the date at which the entry was added to the player's journal, and \"text\" containing the log text for the entry. If the entry has not been added to the player's journal, the date fields will all be zero.",
      "example": {
        "raw": "GetStageEntries - returns an Array of all of the entries associated with the specified quest stage. Each element of the array is a Stringmap containing the following fields: \"day\" (1-31), \"month\" (1-12), and \"year\", representing the date at which the entry was added to the player's journal, and \"text\" containing the log text for the entry. If the entry has not been added to the player's journal, the date fields will all be zero.\n\n(entries:Array) GetStageEntries quest:ref stageID:int",
        "return": [
          "entries",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "SetStageText",
      "description": "sets the log text associated with the specified quest stage entry for the specified quest. The change remains in effect for the duration of the game session or until undone with UnsetStageText.",
      "example": {
        "raw": "SetStageText - sets the log text associated with the specified quest stage entry for the specified quest. The change remains in effect for the duration of the game session or until undone with UnsetStageText.\n\n(textModified:bool) SetStageText quest:ref stageIndex:int entryIndex:int text:string",
        "return": [
          "textModified",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "UnsetStageText",
      "description": "reverses any modification made to the specified log entry text using SetStageText.",
      "example": {
        "raw": "UnsetStageText - reverses any modification made to the specified log entry text using SetStageText.\n\n(nothing) UnsetStageText quest:ref stageIndex:int entryIndex:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetStageDate",
      "description": "for a quest stage entry which has already been added to the player's journal, modifies the date at which the entry was added. Specify the day of the month (1-31), month (1-12), and year.",
      "example": {
        "raw": "SetStageDate - for a quest stage entry which has already been added to the player's journal, modifies the date at which the entry was added. Specify the day of the month (1-31), month (1-12), and year.\n\n(dateSet:bool) SetStageDate quest:ref stageIndex:int entryIndex:int day:int month:int year:int",
        "return": [
          "dateSet",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetParentCell",
      "description": "returns the objectID of the parent cell of the calling reference.",
      "example": {
        "raw": "GetParentCell - returns the objectID of the parent cell of the calling reference.\n\nNote: If the reference has been moved to a different call with SetPos, this function returns the original cell of the reference. (TODO: Verify) Moving the reference to itself (e.g. MyRef.MoveTo MyRef) before GetParentCell forces an update.\n\n(parentCell:ref) reference.GetParentCell",
        "return": [
          "parentCell",
          "ref"
        ],
        "params": [
          "reference.GetParentCell"
        ]
      }
    },
    {
      "name": "GetParentWorldspace",
      "description": "returns the worldspace to which the calling reference's cell belongs, if any. In interior cells this generally returns 0.",
      "example": {
        "raw": "GetParentWorldspace - returns the worldspace to which the calling reference's cell belongs, if any. In interior cells this generally returns 0.\n\n(parentWorldspace:ref) reference.GetParentWorldspace",
        "return": [
          "parentWorldspace",
          "ref"
        ],
        "params": [
          "reference.GetParentWorldspace"
        ]
      }
    },
    {
      "name": "ParentCellHasWater",
      "description": "returns 1 if the reference's parent cell can contain water.",
      "example": {
        "raw": "ParentCellHasWater - returns 1 if the reference's parent cell can contain water.\n\nNote: Exterior cells always have water.\n\n(hasWater:bool) reference.ParentCellHasWater\n\n(hasWater:bool) reference.HasWater",
        "return": [
          "hasWater",
          "bool"
        ],
        "params": [
          "reference.ParentCellHasWater"
        ]
      }
    },
    {
      "name": "GetParentCellWaterHeight",
      "description": "returns the water height of the references parent cell.",
      "example": {
        "raw": "GetParentCellWaterHeight - returns the water height of the references parent cell.\n\n(waterHeight:float) reference.GetParentCellWaterHeight\n\n(waterHeight:float) reference.GetWaterHeight",
        "return": [
          "waterHeight",
          "float"
        ],
        "params": [
          "reference.GetParentCellWaterHeight"
        ]
      }
    },
    {
      "name": "IsActivatable",
      "description": "returns 1 if the calling reference can be activated under normal circumstances.",
      "example": {
        "raw": "IsActivatable - returns 1 if the calling reference can be activated under normal circumstances.\n\nNote: Might return true for unexpected item types. (TODO: Verify)\n\n(activatable:bool) reference.IsActivatable",
        "return": [
          "activatable",
          "bool"
        ],
        "params": [
          "reference.IsActivatable"
        ]
      }
    },
    {
      "name": "IsUnderWater",
      "description": "returns 1 if the calling reference's Z position is less than 120 units under its parent cell's water height.",
      "example": {
        "raw": "IsUnderWater - returns 1 if the calling reference's Z position is less than 120 units under its parent cell's water height.\n\n(isUnderWater:bool) reference.IsUnderWater",
        "return": [
          "isUnderWater",
          "bool"
        ],
        "params": [
          "reference.IsUnderWater"
        ]
      }
    },
    {
      "name": "GetNumChildRefs",
      "description": "returns the number of reference for which the calling reference behaves as an enable-state parent.",
      "example": {
        "raw": "GetNumChildRefs - returns the number of reference for which the calling reference behaves as an enable-state parent.\n\n(numChildren:int) reference.GetNumChildRefs",
        "return": [
          "numChildren",
          "int"
        ],
        "params": [
          "reference.GetNumChildRefs"
        ]
      }
    },
    {
      "name": "GetNthChildRef",
      "description": "returns the nth child reference associated with the calling reference. Child references are stored in no particular order.",
      "example": {
        "raw": "GetNthChildRef - returns the nth child reference associated with the calling reference. Child references are stored in no particular order.\n\n(childRef:ref) reference.GetNthChildRef whichChild:int",
        "return": [
          "childRef",
          "ref"
        ],
        "params": [
          "reference.GetNthChildRef"
        ]
      }
    },
    {
      "name": "GetNumFollowers",
      "description": "returns the number of actors currently following the calling actor. Summoned creatures are excluded.",
      "example": {
        "raw": "GetNumFollowers - returns the number of actors currently following the calling actor. Summoned creatures are excluded.\n\n(numFollowers:int) reference.GetNumFollowers",
        "return": [
          "numFollowers",
          "int"
        ],
        "params": [
          "reference.GetNumFollowers"
        ]
      }
    },
    {
      "name": "GetNthFollower",
      "description": "returns a reference to the nth actor currently following the calling actor. Does not include summoned creatures.",
      "example": {
        "raw": "GetNthFollower - returns a reference to the nth actor currently following the calling actor. Does not include summoned creatures.\n\n(follower:ref) reference.GetNthFollower whichFollower:int",
        "return": [
          "follower",
          "ref"
        ],
        "params": [
          "reference.GetNthFollower"
        ]
      }
    },
    {
      "name": "GetFollowers",
      "description": "returns an array containing all actors currently following the calling actor, including summoned creatures.",
      "example": {
        "raw": "GetFollowers - returns an array containing all actors currently following the calling actor, including summoned creatures.\n\n(followers:array) reference.GetFollowers",
        "return": [
          "followers",
          "array"
        ],
        "params": [
          "reference.GetFollowers"
        ]
      }
    },
    {
      "name": "IsPersistent",
      "description": "returns 1 if the calling reference is a persistent reference.",
      "example": {
        "raw": "IsPersistent - returns 1 if the calling reference is a persistent reference.\n\n(isPersistent:bool) reference.IsPersistent",
        "return": [
          "isPersistent",
          "bool"
        ],
        "params": [
          "reference.IsPersistent"
        ]
      }
    },
    {
      "name": "SetScaleEX",
      "description": "sets the scale of the calling reference. Unlike SetScale, the scale is not limited to a certain range. The reference should be disabled and then enabled after calling this function in order to update its scale and collision properties. The new scale is saved in the savegame.",
      "example": {
        "raw": "SetScaleEX - sets the scale of the calling reference. Unlike SetScale, the scale is not limited to a certain range. The reference should be disabled and then enabled after calling this function in order to update its scale and collision properties. The new scale is saved in the savegame.\n\nNote: Using Update3D instead of disable/enable should work as well.\n\n(nothing) reference.SetScaleEX scale:float",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "HasBeenPickedUp",
      "description": "returns true if the calling reference is currently inactive due to having been picked up by an actor or otherwise transferred to an inventory",
      "example": {
        "raw": "HasBeenPickedUp - returns true if the calling reference is currently inactive due to having been picked up by an actor or otherwise transferred to an inventory\n\nNote: It is no use trying to use this function on dynamic references because the moment the reference is picked up, its FormID becomes invalid.\n\n(pickedUp:bool) reference.HasBeenPickedUp\n\n(pickedUp:bool) reference.IsTaken",
        "return": [
          "pickedUp",
          "bool"
        ],
        "params": [
          "reference.HasBeenPickedUp"
        ]
      }
    },
    {
      "name": "SetHasBeenPickedUp",
      "description": "toggles the flag that marks a reference as having been picked up by an actor. When called on a reference which was previously picked up, causes the reference to \"respawn\". Use ",
      "example": {
        "raw": "SetHasBeenPickedUp - toggles the flag that marks a reference as having been picked up by an actor. When called on a reference which was previously picked up, causes the reference to \"respawn\". Use Update3D on the reference for the change to become visible.\n\n(nothing) reference.SetHasBeenPickedUp pickedUp:bool\n\n(nothing) reference.SetTaken pickedUp:bool",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "GetRefCount",
      "description": "returns the number of items in a stack of items in the world.",
      "example": {
        "raw": "GetRefCount - returns the number of items in a stack of items in the world.\n\n(refCount:int) reference.GetRefCount",
        "return": [
          "refCount",
          "int"
        ],
        "params": [
          "reference.GetRefCount"
        ]
      }
    },
    {
      "name": "SetRefCount",
      "description": "sets the number of items in a stack of items in the world.",
      "example": {
        "raw": "SetRefCount - sets the number of items in a stack of items in the world.\n\nNote: While this function will change the count of any type of reference, it may have unpredictable results when used on references like NPCs which are not logically stackable.\n\n(nothing) reference.SetRefCount newCount:int",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetRefCount"
        ]
      }
    },
    {
      "name": "SetBaseForm",
      "description": "changes the base object associated with a reference, with the limitation that the new base form must be of the same type as the old one (i.e. you can swap a weapon reference's base form only with another weapon). Does not work on actors or on items in containers. Use ",
      "example": {
        "raw": "SetBaseForm - changes the base object associated with a reference, with the limitation that the new base form must be of the same type as the old one (i.e. you can swap a weapon reference's base form only with another weapon). Does not work on actors or on items in containers. Use Update3D on the reference for the change to become visible.\n\nNote: This function is considered beta.\n\n(nothing) reference.SetBaseForm newBaseForm:ref",
        "return": [
          "pdate3"
        ],
        "params": []
      }
    },
    {
      "name": "Activate2",
      "description": "like the existing Activate command, causes a reference to be activated. The only difference is that this command circumvents the limit on recursive scripted activations of an object, allowing unlimited repeated processing of the target's OnActivate script block. Use with care as performance may degrade if a large number of calls to this command occur within a single frame.",
      "example": {
        "raw": "Activate2 - like the existing Activate command, causes a reference to be activated. The only difference is that this command circumvents the limit on recursive scripted activations of an object, allowing unlimited repeated processing of the target's OnActivate script block. Use with care as performance may degrade if a large number of calls to this command occur within a single frame.\n\n(nothing) reference.Activate2 activator:ref runOnActivate:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.Activate2"
        ]
      }
    },
    {
      "name": "IsRefDeleted",
      "description": "returns 1 if the passed object reference has been marked as deleted by a mod or the game. Deleted references should not be used in scripts.",
      "example": {
        "raw": "IsRefDeleted - returns 1 if the passed object reference has been marked as deleted by a mod or the game. Deleted references should not be used in scripts.\n\nNote: The reference is passed as a parameter - this function should not be called on a potentially deleted reference directly.\n\n(isDeleted:bool) IsRefDeleted reference:ref",
        "return": [
          "isDeleted",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "DeleteReference",
      "description": "attempts to delete the calling object from the game and returns true if successful. In order for a reference to be deleted, it must:"
    },
    {
      "name": "GetBoundingBox",
      "description": "returns a stringmap representing the calling objects axis-aligned bounding box. This command only works for mobile objects (projectiles and actors). The stringmap returned contains two stringmaps: \"center\" has keys \"x\", \"y\", and \"z\" representing the coordinates of the center of the bounding box, and \"extent\" has the same keys representing the extent of the box along each axis. For example, the height of the box is equal to GetBoundingBox->extent->z * 2. Similarly the bottom of the box is equal to GetBoundingBox->center->z - GetBoundingBox->extent->z",
      "example": {
        "raw": "GetBoundingBox - returns a stringmap representing the calling objects axis-aligned bounding box. This command only works for mobile objects (projectiles and actors). The stringmap returned contains two stringmaps: \"center\" has keys \"x\", \"y\", and \"z\" representing the coordinates of the center of the bounding box, and \"extent\" has the same keys representing the extent of the box along each axis. For example, the height of the box is equal to GetBoundingBox-&gt;extent-&gt;z * 2. Similarly the bottom of the box is equal to GetBoundingBox-&gt;center-&gt;z - GetBoundingBox-&gt;extent-&gt;z\n\nNote: This function does not return the correct bounding box in some instances. If the actor is scaled, multiplying by GetScale is necessary to scale the returned box appropriately. If the actor is sitting or lying down, the box returned is still the box of the standing actor, which will be completely off.\n\n(StringMap) reference.GetBoundingBox",
        "return": [
          "etScal"
        ],
        "params": []
      }
    },
    {
      "name": "GetBoundingRadius",
      "description": "returns the radius of a sphere large enough to entirely contain the 3D geometry of the calling object.",
      "example": {
        "raw": "GetBoundingRadius - returns the radius of a sphere large enough to entirely contain the 3D geometry of the calling object.\n\n(radius:float) reference.GetBoundingRadius",
        "return": [
          "radius",
          "float"
        ],
        "params": [
          "reference.GetBoundingRadius"
        ]
      }
    },
    {
      "name": "Update3D",
      "description": "updates the visual representation of the calling actor or object reference. This can be called immediately after commands like SetModelPath and SetEyes to make the changes visible and should work in any instance where instructions tell you to ",
      "example": {
        "raw": "Update3D - updates the visual representation of the calling actor or object reference. This can be called immediately after commands like SetModelPath and SetEyes to make the changes visible and should work in any instance where instructions tell you to disable and enable a reference to make changes visible.\n\nNote: This function only works on the player in third person camera mode. Use IsThirdPerson to check and wait with calling this function until the player goes into third person mode or force it with ToggleFirstPerson.\n\n(nothing) reference.Update3D",
        "return": [
          "isabl"
        ],
        "params": []
      }
    },
    {
      "name": "HasEffectShader",
      "description": "checks if the specified effect shader is playing on the calling reference, and if so returns the number of instances of that shader playing on it. Otherwise returns zero. Note that this command may return true for a short period after calling StopMagicShaderVisuals because the shader is not fully removed until its ending sequence has played out.",
      "example": {
        "raw": "HasEffectShader - checks if the specified effect shader is playing on the calling reference, and if so returns the number of instances of that shader playing on it. Otherwise returns zero. Note that this command may return true for a short period after calling StopMagicShaderVisuals because the shader is not fully removed until its ending sequence has played out.\n\n(instanceCount:int) ref.HasEffectShader effectShader:ref",
        "return": [
          "instanceCount",
          "int"
        ],
        "params": [
          "ref.HasEffectShader"
        ]
      }
    },
    {
      "name": "IsInOblivion",
      "description": "returns 1 if the calling reference is in a cell or worldspace marked as belonging to the realm of Oblivion.",
      "example": {
        "raw": "IsInOblivion - returns 1 if the calling reference is in a cell or worldspace marked as belonging to the realm of Oblivion.\n\n(inOblivion:bool) reference.IsInOblivion",
        "return": [
          "inOblivion",
          "bool"
        ],
        "params": [
          "reference.IsInOblivion"
        ]
      }
    },
    {
      "name": "GetSigilStoneUses",
      "description": "returns the number of uses for a sigil stone.",
      "example": {
        "raw": "GetSigilStoneUses - returns the number of uses for a sigil stone.\n\n(short) reference.GetSigilStoneUses sigilStone:ref",
        "return": [
          "short"
        ],
        "params": [
          "reference.GetSigilStoneUses"
        ]
      }
    },
    {
      "name": "SetSigilStoneUses",
      "description": "sets the number of uses for a sigil stone.",
      "example": {
        "raw": "SetSigilStoneUses - sets the number of uses for a sigil stone.\n\n(nothing) reference.SetSigilStoneUses uses:integer sigilStone:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetSigilStoneUses"
        ]
      }
    },
    {
      "name": "ModSigilStoneUses",
      "description": "mods the number of uses for a sigil stone.",
      "example": {
        "raw": "ModSigilStoneUses - mods the number of uses for a sigil stone.\n\n(nothing) reference.ModSigilStoneUses modBy:integer sigilStone:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModSigilStoneUses"
        ]
      }
    },
    {
      "name": "GetPlayerSkillUse",
      "description": "returns the current experience towards the next level of the skill",
      "example": {
        "raw": "GetPlayerSkillUse - returns the current experience towards the next level of the skill\n\n(skillExperience:float) GetPlayerSkillUse skill:actorValue",
        "return": [
          "skillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayerSkillUseC",
      "description": "alternatve version of GetPlayerSkillUse taking an actor value code for the skill",
      "example": {
        "raw": "GetPlayerSkillUseC - alternatve version of GetPlayerSkillUse taking an actor value code for the skill\n\n(skillExperience:float) GetPlayerSkillUseC skillCode:int",
        "return": [
          "skillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IncrementPlayerSkillUse",
      "description": "records some additional uses of one of the skill actions",
      "example": {
        "raw": "IncrementPlayerSkillUse - records some additional uses of one of the skill actions\n\n(nuSkillExperience:float) IncrementPlayerSkillUse skill:int whichAction:inthowManyTimes:float",
        "return": [
          "nuSkillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillUseIncrement",
      "description": "gets the experience point increase for one use of a skill action",
      "example": {
        "raw": "GetSkillUseIncrement - gets the experience point increase for one use of a skill action\n\n(useRate:float) GetSkillUseIncrement skill:int whichAction:int",
        "return": [
          "useRate",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillUseIncrement",
      "description": "sets the experience point increase for one use of a skill action",
      "example": {
        "raw": "SetSkillUseIncrement - sets the experience point increase for one use of a skill action\n\n(nothing) SetSkillUseIncrement nuRate:float skill:int whichAction:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IncrementPlayerSkillUseC",
      "description": "records some additional uses of one of the skill actions",
      "example": {
        "raw": "IncrementPlayerSkillUseC - records some additional uses of one of the skill actions\n\n(nuSkillExperience:float) IncrementPlayerSkillUse skill:actorValueCode whichAction:int howManyTimes:float",
        "return": [
          "nuSkillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "TriggerPlayerSkillUse",
      "description": "records positive or negative uses of one of the specified skill actions. Enough skill uses will increment or decrement the skill itself, and adjust the log of the number of increases for that skill.",
      "example": {
        "raw": "TriggerPlayerSkillUse - records positive or negative uses of one of the specified skill actions. Enough skill uses will increment or decrement the skill itself, and adjust the log of the number of increases for that skill.\n\n(nuSkillExperience:float) TriggerPlayerSkillUse skill:actorValueCode whichAction:int howManyTimes:float\n\n(nuSkillExperience:float) TriggerPlayerSkillUseC skill:int whichAction:int howManyTimes:float",
        "return": [
          "nuSkillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "ModPlayerSkillExp",
      "description": "directly adjusts the experience for a skill. A large enough adjustment will increment or decrement the skill itself, and adjust the log of the number of increase for that skill.",
      "example": {
        "raw": "ModPlayerSkillExp - directly adjusts the experience for a skill. A large enough adjustment will increment or decrement the skill itself, and adjust the log of the number of increase for that skill.\n\n(nuSkillExperience:float) ModPlayerSkillExp skill:actorValueCode amount:float\n\n(nuSkillExperience:float) ModPlayerSkillExpC skill:int amount:float",
        "return": [
          "nuSkillExperience",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillUseIncrementC",
      "description": "gets the experience point increase for one use of a skill action",
      "example": {
        "raw": "GetSkillUseIncrementC - gets the experience point increase for one use of a skill action\n\n(useRate:float) GetSkillUseIncrement skill:actorValueCode whichAction:int",
        "return": [
          "useRate",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillUseIncrementC",
      "description": "sets the experience point increase for one use of a skill action",
      "example": {
        "raw": "SetSkillUseIncrementC - sets the experience point increase for one use of a skill action\n\n(nothing) SetSkillUseIncrement nuRate:float skill:actorValueCode whichAction:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillGoverningAttribute",
      "description": "returns the governing attribute for the skill as an actor value code",
      "example": {
        "raw": "GetSkillGoverningAttribute - returns the governing attribute for the skill as an actor value code\n\n(skillCode:int) GetSkillGoverningAttribute skillName:string",
        "return": [
          "skillCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillGoverningAttribute",
      "description": "sets the governing attribute for the skill",
      "example": {
        "raw": "SetSkillGoverningAttribute - sets the governing attribute for the skill\n\n(nothing) SetSkillGoverningAttribute skillName:string attributeName:string",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillGoverningAttributeC",
      "description": "alternate version of GetSkillGoverningAttribute taking an actor value code for the skill",
      "example": {
        "raw": "GetSkillGoverningAttributeC - alternate version of GetSkillGoverningAttribute taking an actor value code for the skill\n\n(skillCode:int) GetSkillGoverningAttributeC skillCode:int",
        "return": [
          "skillCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillGoverningAttributeC",
      "description": "alternate version of SetSkillGoverningAttribute taking actor value codes for the skill and attribute",
      "example": {
        "raw": "SetSkillGoverningAttributeC - alternate version of SetSkillGoverningAttribute taking actor value codes for the skill and attribute\n\n(nothing) SetSkillGoverningAttributeC skillCode:int attributeCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetPlayerSkillAdvances",
      "description": "returns the number of times the skill level has advanced for that skill",
      "example": {
        "raw": "GetPlayerSkillAdvances - returns the number of times the skill level has advanced for that skill\n\n(advances:int) GetPlayerSkillAdvances skillCode:int\n\n(advances:int) GetPlayerSkillAdvancesC skillCode:int",
        "return": [
          "advances",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetPlayerSkillAdvances",
      "description": "sets the number of times the skill has been advanced",
      "example": {
        "raw": "SetPlayerSkillAdvances - sets the number of times the skill has been advanced\n\n(nothing) SetPlayerSkillAdvances skillCode:int advances:int\n\n(nothing) SetPlayerSkillAdvancesC skillCode:int advances:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetRequiredSkillExp",
      "description": "returns the total skill use required for the player to advance the specified skill. To get the ",
      "example": {
        "raw": "GetRequiredSkillExp - returns the total skill use required for the player to advance the specified skill. To get the remaining skill use required, subtract the value of GetPlayerSkillUse from this value.\n\n(skillUse:float) GetRequiredSkillExp skill:actorValue",
        "return": [
          "skillUse",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetRequiredSkillExpC",
      "description": "alternate version of GetRequiredSkillExp taking an actor value code for the skill.",
      "example": {
        "raw": "GetRequiredSkillExpC - alternate version of GetRequiredSkillExp taking an actor value code for the skill.\n\n(skillUse:float) GetRequiredSkillExpC skillCode:int",
        "return": [
          "skillUse",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillSpecialization",
      "description": "returns the skill's specialization as an integer. 0: Combat, 1: Magic, or 2: Stealth. ",
      "example": {
        "raw": "GetSkillSpecialization - returns the skill's specialization as an integer. 0: Combat, 1: Magic, or 2: Stealth. \n\n(specialization:int) GetSkillSpecialization skill:actorValue",
        "return": [
          "specialization",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetSkillSpecializationC",
      "description": "alternate version of GetSkillSpecialization taking an actor value code for the skill.",
      "example": {
        "raw": "GetSkillSpecializationC - alternate version of GetSkillSpecialization taking an actor value code for the skill.\n\n(specialization:int) GetSkillSpecializationC skillCode:int",
        "return": [
          "specialization",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillSpecialization",
      "description": "sets the skill's specialization as an integer. 0: Combat, 1: Magic, or 2: Stealth. ",
      "example": {
        "raw": "SetSkillSpecialization - sets the skill's specialization as an integer. 0: Combat, 1: Magic, or 2: Stealth. \n\n(nothing) SetSkillSpecialization skill:actorValue specialization:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSkillSpecializationC",
      "description": "alternate version of SetSkillSpecialization taking an actor value code for the skill",
      "example": {
        "raw": "SetSkillSpecializationC - alternate version of SetSkillSpecialization taking an actor value code for the skill\n\n(specialization:int) SetSkillSpecializationC skillCode:int specialization:int",
        "return": [
          "specialization",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ToggleSkillPerk",
      "description": "turns the perk associated with the specified skill at the specified mastery level on or off. Currently, this command only supports toggling the Journeyman Block perk. Support for additional perks and skills may be added in the future. The mastery level is an integer from 0 (Novice) to 4 (Master).",
      "example": {
        "raw": "ToggleSkillPerk - turns the perk associated with the specified skill at the specified mastery level on or off. Currently, this command only supports toggling the Journeyman Block perk. Support for additional perks and skills may be added in the future. The mastery level is an integer from 0 (Novice) to 4 (Master).\n\n(perkToggled:bool) ToggleSkillPerk skill:actorValue masteryLevel:int bEnablePerk:bool",
        "return": [
          "perkToggled",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetSoulLevel",
      "description": "returns the soul level currently in the soul gem",
      "example": {
        "raw": "GetSoulLevel - returns the soul level currently in the soul gem\n\n(soulLevel:int) GetSoulLevel objectID:ref",
        "return": [
          "soulLevel",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetSoulGemCapacity",
      "description": "returns the max soul level the soul gem can contain",
      "example": {
        "raw": "GetSoulGemCapacity - returns the max soul level the soul gem can contain\n\n(soulLevel:int) GetSoulGemCapacity objectID:ref",
        "return": [
          "soulLevel",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSoulLevel",
      "description": "set the soul level of the soul gem",
      "example": {
        "raw": "SetSoulLevel - set the soul level of the soul gem\n\n(nothing) SetSoulLevel soulLevel:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSoulGemCapacity",
      "description": "set the capacity level of the soul gem",
      "example": {
        "raw": "SetSoulGemCapacity - set the capacity level of the soul gem\n\n (nothing) SetSoulGemCapacity soulLevel:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCurrentSoulLevel",
      "description": "returns the current soul level of the calling actor reference",
      "example": {
        "raw": "GetCurrentSoulLevel - returns the current soul level of the calling actor reference\n\n(soulLevel:int) GetCurrentSoulLevel",
        "return": [
          "soulLevel",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetSoundAttenuation",
      "description": "returns the specified attenuation value for the specified sound, where the attenuation is \"max\", \"min\", or \"static\"",
      "example": {
        "raw": "GetSoundAttenuation - returns the specified attenuation value for the specified sound, where the attenuation is \"max\", \"min\", or \"static\"\n\n(attenuation:float) GetSoundAttenuation sound:ref whichAttenuation:string ",
        "return": [
          "attenuation",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetSoundAttenuation",
      "description": "sets the specified attenuation value for the specified sound, where the attenuation is \"max\", \"min\", or \"static\"",
      "example": {
        "raw": "SetSoundAttenuation - sets the specified attenuation value for the specified sound, where the attenuation is \"max\", \"min\", or \"static\"\n\n(nothing) SetSoundAttenuation sound:ref whichAttenuation:string attenuation:float ",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellType",
      "description": "returns the spell type",
      "example": {
        "raw": "GetSpellType - returns the spell type\n\n(spellType:int) GetSpellType spell:ref",
        "return": [
          "spellType",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellType",
      "description": "sets the spell type",
      "example": {
        "raw": "SetSpellType - sets the spell type\n\n(nothing) SetSpellType nuType:int spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellMagickaCost",
      "description": "returns the magicka casting cost according to the Oblivion formula. If called on a reference it will use the reference's magic skill values to determine the actual magicka cost of the spell. Without a reference it will return the base cost of the spell as reported in the CS.",
      "example": {
        "raw": "GetSpellMagickaCost - returns the magicka casting cost according to the Oblivion formula. If called on a reference it will use the reference's magic skill values to determine the actual magicka cost of the spell. Without a reference it will return the base cost of the spell as reported in the CS.\n\n(magickaCost:int) reference.GetSpellMagickaCost spell:ref",
        "return": [
          "magickaCost",
          "int"
        ],
        "params": [
          "reference.GetSpellMagickaCost"
        ]
      }
    },
    {
      "name": "SetSpellMagickaCost",
      "description": "sets the magicka casting cost",
      "example": {
        "raw": "SetSpellMagickaCost - sets the magicka casting cost\n\n(nothing) SetSpellMagickaCost nuMagickaCost:int spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ModSpellMagickaCost",
      "description": "modifies the magicka casting cost up or down",
      "example": {
        "raw": "ModSpellMagickaCost - modifies the magicka casting cost up or down\n\n(nothing) ModSpellMagickaCost modifyBy:float spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellMasteryLevel",
      "description": "returns the mastery level of the spell",
      "example": {
        "raw": "GetSpellMasteryLevel - returns the mastery level of the spell\n\n(masteryLevel:int) GetSpellMasteryLevel spell:ref",
        "return": [
          "masteryLevel",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellMasteryLevel",
      "description": "sets the mastery level of the spell",
      "example": {
        "raw": "SetSpellMasteryLevel - sets the mastery level of the spell\n\n(nothing) SetSpellMasteryLevel masteryLevel:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellSchool",
      "description": "returns the school of the spell, determined by the most expensive effect item",
      "example": {
        "raw": "GetSpellSchool - returns the school of the spell, determined by the most expensive effect item\n\n(magicSchool:int) GetSpellSchool spell:ref",
        "return": [
          "magicSchool",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellExplodesWithNoTarget",
      "description": "returns whether the touch spell explodes without a target",
      "example": {
        "raw": "GetSpellExplodesWithNoTarget - returns whether the touch spell explodes without a target\n\n(spellExplodesWithNoTarget:bool) GetSpellExplodesWithNoTarget spell:ref",
        "return": [
          "spellExplodesWithNoTarget",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellExplodesWithNoTarget",
      "description": "sets whether the touch spell will explode without a target",
      "example": {
        "raw": "SetSpellExplodesWithNoTarget - sets whether the touch spell will explode without a target\n\n(nothing) SetSpellExplodesWithNoTarget doesSpellExpode:bool spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsSpellHostile",
      "description": "returns 1 if the spell is considered hostile",
      "example": {
        "raw": "IsSpellHostile - returns 1 if the spell is considered hostile\n\n(isHostile:bool) IsSpellHostile spell:ref",
        "return": [
          "isHostile",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellHostile",
      "description": "toggles whether or not a spell is considered hostile",
      "example": {
        "raw": "SetSpellHostile - toggles whether or not a spell is considered hostile\n\n(nothing) SetSpellHostile spell:ref isHostile:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellPCStart",
      "description": "returns true if the PC Start flag is set for the specified spell",
      "example": {
        "raw": "GetSpellPCStart - returns true if the PC Start flag is set for the specified spell\n\n(bool) GetSpellPCStart spell:ref",
        "return": [
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellImmuneToSilence",
      "description": "returns true if the Immune to Silence flag is set for the specified spell",
      "example": {
        "raw": "GetSpellImmuneToSilence - returns true if the Immune to Silence flag is set for the specified spell\n\n(bool) GetSpellImmuneToSilence spell:ref",
        "return": [
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellAreaEffectIgnoresLOS",
      "description": "returns true if the AE Ignores LOS flag is set for the specified spell",
      "example": {
        "raw": "GetSpellAreaEffectIgnoresLOS - returns true if the AE Ignores LOS flag is set for the specified spell\n\n(bool) GetSpellAreaEffectIgnoresLOS spell:ref",
        "return": [
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellScriptEffectAlwaysApplies",
      "description": "returns true if the SEFF Always Applies flag is set for the specified spell",
      "example": {
        "raw": "GetSpellScriptEffectAlwaysApplies - returns true if the SEFF Always Applies flag is set for the specified spell\n\n(bool) GetSpellScriptEffectAlwaysApplies spell:ref",
        "return": [
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetSpellDisallowAbsorbReflect",
      "description": "returns true if the Disallow Absorb Reflect flag is set for the specified spell",
      "example": {
        "raw": "GetSpellDisallowAbsorbReflect - returns true if the Disallow Absorb Reflect flag is set for the specified spell\n\n(bool) GetSpellDisallowAbsorbReflect spell:ref",
        "return": [
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellPCStart",
      "description": "sets the PC Start flag for the specified spell",
      "example": {
        "raw": "SetSpellPCStart - sets the PC Start flag for the specified spell\n\n(nothing) SetSpellPCStart value:integer spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellImmuneToSilence",
      "description": "sets the Immune to Silence flag for the specified spell",
      "example": {
        "raw": "SetSpellImmuneToSilence - sets the Immune to Silence flag for the specified spell\n\n(nothing) SetSpellImmuneToSilence value:integer spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellAreaEffectIgnoresLOS",
      "description": "sets the AE Ignores LOS flag for the specified spell",
      "example": {
        "raw": "SetSpellAreaEffectIgnoresLOS - sets the AE Ignores LOS flag for the specified spell\n\n(nothing) SetSpellAreaEffectIgnoresLOS value:integer spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellScriptEffectAlwaysApplies",
      "description": "sets the SEFF Always Applies flag for the specified spell",
      "example": {
        "raw": "SetSpellScriptEffectAlwaysApplies - sets the SEFF Always Applies flag for the specified spell\n\n(nothing) SetSpellScriptEffectAlwaysApplies value:integer spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetSpellDisallowAbsorbReflect",
      "description": "sets the Disallow Absorb Reflect flag for the specified spell",
      "example": {
        "raw": "SetSpellDisallowAbsorbReflect - sets the Disallow Absorb Reflect flag for the specified spell\n\n(nothing) SetSpellDisallowAbsorbReflect value:integer spell:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeaponReach",
      "description": "returns the reach of the weapon",
      "example": {
        "raw": "GetWeaponReach - returns the reach of the weapon\n\n(reach:float) reference.GetWeaponReach objectID:ref",
        "return": [
          "reach",
          "float"
        ],
        "params": [
          "reference.GetWeaponReach"
        ]
      }
    },
    {
      "name": "SetWeaponReach",
      "description": "sets the reach of the weapon",
      "example": {
        "raw": "SetWeaponReach - sets the reach of the weapon\n\n(nothing) reference.SetWeaponReach nuReach:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetWeaponReach"
        ]
      }
    },
    {
      "name": "ModWeaponReach",
      "description": "modifies the reach of the weapon up or down",
      "example": {
        "raw": "ModWeaponReach - modifies the reach of the weapon up or down\n\n(nothing) reference.ModWeaponReach modifyBy:float objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.ModWeaponReach"
        ]
      }
    },
    {
      "name": "GetWeaponType",
      "description": "retuns the weapon type",
      "example": {
        "raw": "GetWeaponType - retuns the weapon type\n\n(weaponType:int) reference.GetWeaponType objectID:ref",
        "return": [
          "weaponType",
          "int"
        ],
        "params": [
          "reference.GetWeaponType"
        ]
      }
    },
    {
      "name": "SetWeaponType",
      "description": "sets the weapon type",
      "example": {
        "raw": "SetWeaponType - sets the weapon type\n\n(nothing) reference.SetWeaponType weaponType:int objectID:ref",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetWeaponType"
        ]
      }
    },
    {
      "name": "GetEquippedWeaponPoison",
      "description": "returns the poison applied to the equipped weapon. Called on the weapon holder.",
      "example": {
        "raw": "GetEquippedWeaponPoison - returns the poison applied to the equipped weapon. Called on the weapon holder.\n\n(poison:ref) reference.GetEquippedWeaponPoison",
        "return": [
          "poison",
          "ref"
        ],
        "params": [
          "reference.GetEquippedWeaponPoison"
        ]
      }
    },
    {
      "name": "SetEquippedWeaponPoison",
      "description": "sets the poison applied to the equipped weapon and returns the previous poison.Called on the weapon holder.",
      "example": {
        "raw": "SetEquippedWeaponPoison - sets the poison applied to the equipped weapon and returns the previous poison.Called on the weapon holder.\n\n(oldPoison:ref) reference.SetEquippedWeaponPoison nuPoison:ref",
        "return": [
          "oldPoison",
          "ref"
        ],
        "params": [
          "reference.SetEquippedWeaponPoison"
        ]
      }
    },
    {
      "name": "RemoveEquippedWeaponPoison",
      "description": "removes and returns the poison applied to the equipped weapon. Called on the weapon holder.",
      "example": {
        "raw": "RemoveEquippedWeaponPoison - removes and returns the poison applied to the equipped weapon. Called on the weapon holder.\n\n(oldPoison:ref) reference.RemoveEquippedWeaponPoison",
        "return": [
          "oldPoison",
          "ref"
        ],
        "params": [
          "reference.RemoveEquippedWeaponPoison"
        ]
      }
    },
    {
      "name": "GetCurrentWeatherID",
      "description": "returns the refID of the current weather",
      "example": {
        "raw": "GetCurrentWeatherID - returns the refID of the current weather\n\n(currentWeather:ref) GetCurrentWeatherID ",
        "return": [
          "currentWeather",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherOverride",
      "description": "returns the weather which is overriding the current weather as a result of the ForceWeather or SetWeather command with a non-zero \"override\" argument (for example, in the scripts which control weather near Oblivion gates), or zero if the weather is not being overridden. ",
      "example": {
        "raw": "GetWeatherOverride - returns the weather which is overriding the current weather as a result of the ForceWeather or SetWeather command with a non-zero \"override\" argument (for example, in the scripts which control weather near Oblivion gates), or zero if the weather is not being overridden. \n\n(override:ref) GetWeatherOverride ",
        "return": [
          "override",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherWindSpeed",
      "description": "returns the wind speed of the specified weather",
      "example": {
        "raw": "GetWeatherWindSpeed - returns the wind speed of the specified weather\n\n(windSpeed:float) GetWeatherWindSpeed weather:ref\n\n(windSpeed:float) GetWindSpeed weather:ref",
        "return": [
          "windSpeed",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherWindSpeed",
      "description": "sets the wind speed of the specified weather",
      "example": {
        "raw": "SetWeatherWindSpeed - sets the wind speed of the specified weather\n\n(nothing) SetWeatherWindSpeed speed:float weather:ref\n\n(nothing) SetWindSpeed speed:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherCloudSpeedLower",
      "description": "returns the speed of the lower cloud layer",
      "example": {
        "raw": "GetWeatherCloudSpeedLower - returns the speed of the lower cloud layer\n\n(speed:float) GetWeatherCloudSpeedLower weather:ref\n\n(speed:float) GetCloudSpeedLower weather:ref",
        "return": [
          "speed",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherCloudSpeedLower",
      "description": "sets the speed of the lower cloud layer",
      "example": {
        "raw": "SetWeatherCloudSpeedLower - sets the speed of the lower cloud layer\n\n(nothing) SetWeatherCloudSpeedLower speed:float weather:ref\n\n(nothing) SetCloudSpeedLower speed:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherCloudSpeedUpper",
      "description": "returns the speed of the upper cloud layer",
      "example": {
        "raw": "GetWeatherCloudSpeedUpper - returns the speed of the upper cloud layer\n\n(speed:float) GetWeatherCloudSpeedUpper weather:ref\n\n(speed:float) GetCloudSpeedUpper weather:ref",
        "return": [
          "speed",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherCloudSpeedUpper",
      "description": "sets the speed of the upper cloud layer",
      "example": {
        "raw": "SetWeatherCloudSpeedUpper - sets the speed of the upper cloud layer\n\n(nothing) SetWeatherCloudSpeedUpper speed:float weather:ref\n\n(nothing) SetCloudSpeedUpper speed:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherTransDelta",
      "description": "returns the transition delta of the weather",
      "example": {
        "raw": "GetWeatherTransDelta - returns the transition delta of the weather\n\n(transDelta:float) GetWeatherTransDelta weather:ref\n\n(transDelta:float) GetTransDelta weather:ref",
        "return": [
          "transDelta",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherTransDelta",
      "description": "sets the transition delta of the weather",
      "example": {
        "raw": "SetWeatherTransDelta - sets the transition delta of the weather\n\n(nothing) SetWeatherTransDelta transDelta:float weather:ref\n\n(nothing) SetTransDelta transDelta:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherSunGlare",
      "description": "returns the sun glare",
      "example": {
        "raw": "GetWeatherSunGlare - returns the sun glare\n\n(sunGlare:float) GetWeatherSunGlare weather:ref\n\n(sunGlare:float) GetSunGlare weather:ref",
        "return": [
          "sunGlare",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherSunGlare",
      "description": "sets the sun glare",
      "example": {
        "raw": "SetWeatherSunGlare - sets the sun glare\n\n(nothing) SetWeatherSunGlare sunGlare:float weather:ref\n\n(nothing) SetSunGlare sunGlare:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherSunDamage",
      "description": "returns the sun damage",
      "example": {
        "raw": "GetWeatherSunDamage - returns the sun damage\n\n(sunDamage:float) GetWeatherSunDamage weather:ref\n\n(sunDamage:float) GetSunDamage weather:ref",
        "return": [
          "sunDamage",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherSunDamage",
      "description": "sets the sun damage",
      "example": {
        "raw": "SetWeatherSunDamage - sets the sun damage\n\n(nothing) SetWeatherSunDamage sunDamage:float weather:ref\n\n(nothing) SetSunDamage sunDamage:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherFogDayNear",
      "description": "returns the daytime near fog distance",
      "example": {
        "raw": "GetWeatherFogDayNear - returns the daytime near fog distance\n\n(fogDistance:float) GetWeatherFogDayNear weather:ref\n\n(fogDistance:float) GetFogDayNear weather:ref",
        "return": [
          "fogDistance",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherFogDayNear",
      "description": "sets the daytime near fog distance",
      "example": {
        "raw": "SetWeatherFogDayNear - sets the daytime near fog distance\n\n(nothing) SetWeatherFogDayNear fogDistance:float weather:ref\n\n(nothing) SetFogDayNear fogDistance:float weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherFogDayFar",
      "description": "returns the daytime far fog distance",
      "example": {
        "raw": "GetWeatherFogDayFar - returns the daytime far fog distance\n\n(fogDistance:float) GetWeatherFogDayFar weather:ref\n\n(fogDistance:float) GetFogDayFar weather:ref",
        "return": [
          "fogDistance",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherFogDayFar",
      "description": "sets the daytime far fog distance",
      "example": {
        "raw": "SetWeatherFogDayFar- sets the daytime far fog distance\n\n(nothing)SetWeatherFogDayFar fogDistance:float weather:ref\n\n(nothing)SetFogDayFar fogDistance:float weather:ref",
        "return": [
          "nothing)SetWeatherFogDayFa"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherFogNightNear",
      "description": "returns the nighttime near fog distance",
      "example": {
        "raw": "GetWeatherFogNightNear - returns the nighttime near fog distance\n\n(fogDistance:float)GetWeatherFogNightNear weather:ref\n\n(fogDistance:float)GetFogNightNear weather:ref",
        "return": [
          "fogDistance",
          "float)GetWeatherFogNightNea"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherFogNightNear",
      "description": "sets the nighttime near fog distance",
      "example": {
        "raw": "SetWeatherFogNightNear - sets the nighttime near fog distance\n\n(nothing)SetWeatherFogNightNear fogDistance:float weather:ref\n\n(nothing)SetFogNightNear fogDistance:float weather:ref",
        "return": [
          "nothing)SetWeatherFogNightNea"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherFogNightFar",
      "description": "returns the nighttime far fog distance",
      "example": {
        "raw": "GetWeatherFogNightFar - returns the nighttime far fog distance\n\n(fogDistance:float)GetWeatherFogNightFar weather:ref\n\n(fogDistance:float)GetFogNightFar weather:ref",
        "return": [
          "fogDistance",
          "float)GetWeatherFogNightFa"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherFogNightFar",
      "description": "sets the nighttime far fog distance",
      "example": {
        "raw": "SetWeatherFogNightFar - sets the nighttime far fog distance\n\n(nothing)SetWeatherFogNightFar fogDistance:float weather:ref\n\n(nothing)SetFogNightFar fogDistance:float weather:ref",
        "return": [
          "nothing)SetWeatherFogNightFa"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherHDRValue",
      "description": "returns the specified HDR value for the weather",
      "example": {
        "raw": "GetWeatherHDRValue - returns the specified HDR value for the weather\n\n(hdrValue:float) GetWeatherHDRValue whichHDRValue:int weather:ref\n\n(hdrValue:float) GetHDRValue whichHDRValue:int weather:ref ",
        "return": [
          "hdrValue",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherHDRValue",
      "description": "sets the specified HDR value for the weather",
      "example": {
        "raw": "SetWeatherHDRValue - sets the specified HDR value for the weather\n\n(oldHDRValue:float) SetWeatherHDRValue nuVal:float whichHDRValue:int weather:int\n\n(oldHDRValue:float) SetHDRValue nuVal:float whichHDRValue:int weather:int",
        "return": [
          "oldHDRValue",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherColor",
      "description": "returns the red, green or blue value of the specified weather color at the specified weather time",
      "example": {
        "raw": "GetWeatherColor - returns the red, green or blue value of the specified weather color at the specified weather time\n\n(color:int) GetWeatherColor rgb:int whichColor:int weather:ref <ahref=\"#Weather_Time\">whichTime:int",
        "return": [
          "color",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherColor",
      "description": "sets the red, green and blue values for the specified weather color at the specified weather time",
      "example": {
        "raw": "SetWeatherColor - sets the red, green and blue values for the specified weather color at the specified weather time\n\n(nothing) SetWeatherColor red:int green:int blue:int whichColor:int weather:ref whichTime:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherLightningFrequency",
      "description": "returns the frequency of the lightning",
      "example": {
        "raw": "GetWeatherLightningFrequency - returns the frequency of the lightning\n\n(frequency:int) GetWeatherLightningFrequency weather:ref\n\n(frequency:int) GetLightningFrequency weather:ref",
        "return": [
          "frequency",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetWeatherLightningFrequency",
      "description": "sets the frequency of the lightning",
      "example": {
        "raw": "SetWeatherLightningFrequency - sets the frequency of the lightning\n\n(nothing) SetWeatherLightningFrequency frequency:int weather:ref\n\n(nothing) SetLightningFrequency frequency:int weather:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWeatherClassification",
      "description": "returns the precipitation ",
      "example": {
        "raw": "GetWeatherClassification - returns the precipitation classification of the weather as defined in the editor\n\n(classification:int) GetWeatherClassification weather:ref",
        "return": [
          "classification",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "IsDoor",
      "description": "returns whether the calling reference or passed objectID is a door",
      "example": {
        "raw": "IsDoor - returns whether the calling reference or passed objectID is a door\n\n(isDoor:bool) reference.IsDoor objectID:ref",
        "return": [
          "isDoor",
          "bool"
        ],
        "params": [
          "reference.IsDoor"
        ]
      }
    },
    {
      "name": "IsFurniture",
      "description": "returns whether the calling reference or passed objectID is furniture",
      "example": {
        "raw": "IsFurniture - returns whether the calling reference or passed objectID is furniture\n\n(isFurniture:bool) reference.IsFurniture objectID:ref",
        "return": [
          "isFurniture",
          "bool"
        ],
        "params": [
          "reference.IsFurniture"
        ]
      }
    },
    {
      "name": "IsActivator",
      "description": "returns whether the calling reference or passed objectID is an activator",
      "example": {
        "raw": "IsActivator - returns whether the calling reference or passed objectID is an activator\n\n(isActivator:bool) reference.IsActivator objectID:ref",
        "return": [
          "isActivator",
          "bool"
        ],
        "params": [
          "reference.IsActivator"
        ]
      }
    },
    {
      "name": "GetGameLoaded",
      "description": "returns 1 if a saved game was loaded or a new game was started since the last time this call was made. This command returns true once per game load/start for each script that uses it.",
      "example": {
        "raw": "GetGameLoaded - returns 1 if a saved game was loaded or a new game was started since the last time this call was made. This command returns true once per game load/start for each script that uses it.\n\n(gameLoaded:bool) GetGameLoaded",
        "return": [
          "gameLoaded",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetGameRestarted",
      "description": "returns 1 if Oblivion was exited and restarted since the last time this call was made from the calling script. Use this condition to reset or undo changes made by OBSE functions which are not stored in the savegame.",
      "example": {
        "raw": "GetGameRestarted - returns 1 if Oblivion was exited and restarted since the last time this call was made from the calling script. Use this condition to reset or undo changes made by OBSE functions which are not stored in the savegame.\n\n(gameRestarted:bool) GetGameRestarted",
        "return": [
          "gameRestarted",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetOBSEVersion",
      "description": "returns the version number of OBSE",
      "example": {
        "raw": "GetOBSEVersion - returns the version number of OBSE\n\n(obseVersion:int) GetOBSEVersion",
        "return": [
          "obseVersion",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetOBSERevision",
      "description": "returns the minor version number of OBSE. For instance, when running the second released version of v0014, this function returns 2.",
      "example": {
        "raw": "GetOBSERevision - returns the minor version number of OBSE. For instance, when running the second released version of v0014, this function returns 2.\n\n(obseRevision:int) GetOBSERevision",
        "return": [
          "obseRevision",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetNumericGameSetting",
      "description": "sets the specified game setting to the following variable or direct value",
      "example": {
        "raw": "SetNumericGameSetting - sets the specified game setting to the following variable or direct value\n\n(nothing) SetNumericGameSetting gameSettingName:string value:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetStringGameSetting",
      "description": "returns the string value of a game setting",
      "example": {
        "raw": "GetStringGameSetting - returns the string value of a game setting\n\n(setting:string_var) GetStringGameSetting settingName:string",
        "return": [
          "setting",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetStringGameSettingEX",
      "description": "sets the string value of a game setting. The new string value is contained within the format string, following the setting name and separated by a pipe character, i.e. ",
      "example": {
        "raw": "SetStringGameSettingEX - sets the string value of a game setting. The new string value is contained within the format string, following the setting name and separated by a pipe character, i.e. \"nameOfGameSetting|newValueOfGameSetting\". When calling from the console, use '@' instead of the pipe character.\n\n(nothing) SetStringGameSettingEX settingNameAndNewValue:formatString",
        "return": [
          "nameOfGameSetting|newValueOfGameSetting"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumericINISetting",
      "description": "returns the specified ini setting",
      "example": {
        "raw": "GetNumericINISetting - returns the specified ini setting\n\n(setting:float) GetNumericINISetting iniSettingName:string",
        "return": [
          "setting",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetNumericINISetting",
      "description": "sets the specified ini setting to the following variable or direct value",
      "example": {
        "raw": "SetNumericINISetting - sets the specified ini setting to the following variable or direct value\n\n(nothing) SetNumericINISetting iniSettingName:string value:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetStringINISetting",
      "description": "returns the value of a string ini setting",
      "example": {
        "raw": "GetStringINISetting - returns the value of a string ini setting\n\n(setting:string_var) GetStringINISetting settingName:formatString",
        "return": [
          "setting",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetStringINISetting",
      "description": "sets the ini setting to the specified string. Pass both arguments as a single string of the format \"settingName|newValue\". If called from the console, use the \"@\" character in place of the pipe character.",
      "example": {
        "raw": "SetStringINISetting - sets the ini setting to the specified string. Pass both arguments as a single string of the format \"settingName|newValue\". If called from the console, use the \"@\" character in place of the pipe character.\n\n(nothing) SetStringINISetting settingNameAndValue:formatString",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetFPS",
      "description": "returns the frames per second of the game",
      "example": {
        "raw": "GetFPS - returns the frames per second of the game\n\n(fps:float) GetFPS",
        "return": [
          "fps",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "IsThirdPerson",
      "description": "returns whether the point of view is 3rd person or not",
      "example": {
        "raw": "IsThirdPerson - returns whether the point of view is 3rd person or not\n\n(isThirdPerson:bool) IsThirdPerson",
        "return": [
          "isThirdPerson",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsGlobalCollisionDisabled",
      "description": "returns whether collision is disabled",
      "example": {
        "raw": "IsGlobalCollisionDisabled - returns whether collision is disabled\n\n(isDisabled:bool) IsGlobalCollisionDisabled",
        "return": [
          "isDisabled",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "SetDisableGlobalCollision",
      "description": "sets whether to disable the global collision or not",
      "example": {
        "raw": "SetDisableGlobalCollision - sets whether to disable the global collision or not\n\n(nothing) SetDisableGlobalCollision toDisableOrNot:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "RunBatchScript",
      "description": "runs a specified text file under the Oblivion directory as a script. Works the same as the console function ",
      "example": {
        "raw": "RunBatchScript - runs a specified text file under the Oblivion directory as a script. Works the same as the console function bat. The optional second parameter causes the script to execute on the calling object, if any. The optional third parameter prevents any output from appearing in the console while the script executes.\n\n(nothing) reference.RunBatchScript bRunOnRef:bool bSuppressOutput:bool",
        "return": [
          "at"
        ],
        "params": []
      }
    },
    {
      "name": "IsPluginInstalled",
      "description": "returns whether a given plugin is installed",
      "example": {
        "raw": "IsPluginInstalled - returns whether a given plugin is installed\n\n(isInstalled:bool) IsPluginInstalled pluginName:string",
        "return": [
          "isInstalled",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetPluginVersion",
      "description": "returns the version of the specified plugin",
      "example": {
        "raw": "GetPluginVersion - returns the version of the specified plugin\n\n(version:int) GetPluginVersion pluginName:string",
        "return": [
          "version",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetDebugSelection",
      "description": "returns the reference to the item last selected in the console",
      "example": {
        "raw": "GetDebugSelection - returns the reference to the item last selected in the console\n\n(selection:ref) GetDebugSelection",
        "return": [
          "selection",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetSoundPlaying",
      "description": "If no parameters are passed, then it dumps a list of the currently playing sounds and actors making sound to obse.log (this may change). If a string is passed, then it returns the number of times the specified sound is playing. The string may contain wildcards:",
      "example": {
        "raw": "GetSoundPlaying - If no parameters are passed, then it dumps a list of the currently playing sounds and actors making sound to obse.log (this may change). If a string is passed, then it returns the number of times the specified sound is playing. The string may contain wildcards: matches several characters, and ? matches one character. If a reference is passed in, then the search is restricted to that reference, returning  the number of times it is playing that sound. Some sounds are not associated with objects, so if you pass in a \"fuzzy check radius\" parameter, it returns the number of times the sound is playing within the specified radius around the reference.\n\n(playingCount:int) reference.GetSoundPlaying soundName:string fuzzyCheckRadius:float",
        "return": [
          "playingCount",
          "int"
        ],
        "params": [
          "reference.GetSoundPlaying"
        ]
      }
    },
    {
      "name": "RunScriptLine",
      "description": "runs a line of script as if it were called from the console. If bRunOnRef is 1, the line of script will be executed on the calling object, if any. If bSuppressOutput is true, no output will be generated in the console while the script line is executing.",
      "example": {
        "raw": "RunScriptLine - runs a line of script as if it were called from the console. If bRunOnRef is 1, the line of script will be executed on the calling object, if any. If bSuppressOutput is true, no output will be generated in the console while the script line is executing.\n\n(nothing) reference.RunScriptLine formatString:string var1 var2 ... var20 bRunOnRef:bool bSuppressOutput:bool",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.RunScriptLine",
          "..."
        ]
      }
    },
    {
      "name": "GetFormFromMod",
      "description": "attempts to look up and return a form defined in another mod, prepending the two-digit mod index to the formID. The formID is passed in hexadecimal format, i.e. 0001A46B. The first two digits of the formID are ignored and can be omitted. The file name must include the file extension. Pass \"NONE\" as the file name to look up a dynamic form in the saved game (mod index 0xFF, for example cloned forms).",
      "example": {
        "raw": "GetFormFromMod - attempts to look up and return a form defined in another mod, prepending the two-digit mod index to the formID. The formID is passed in hexadecimal format, i.e. 0001A46B. The first two digits of the formID are ignored and can be omitted. The file name must include the file extension. Pass \"NONE\" as the file name to look up a dynamic form in the saved game (mod index 0xFF, for example cloned forms).\n\n(form:ref) GetFormFromMod modFileName:string formID:hexString",
        "return": [
          "form",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "ToggleFirstPerson",
      "description": "toggles the player's POV to first or third person. Passing 1 enables first person view, 0 enables third person.",
      "example": {
        "raw": "ToggleFirstPerson - toggles the player's POV to first or third person. Passing 1 enables first person view, 0 enables third person.\n\n(nothing) ToggleFirstPerson toFirstPerson:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastCreatedSpell",
      "description": "returns the spell most recently created by the player during the current game session",
      "example": {
        "raw": "GetLastCreatedSpell - returns the spell most recently created by the player during the current game session\n\n(spell:ref) GetLastCreatedSpell",
        "return": [
          "spell",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastEnchantedItem",
      "description": "returns the enchanted item most recently created by the player during the current game session",
      "example": {
        "raw": "GetLastEnchantedItem - returns the enchanted item most recently created by the player during the current game session\n\n(item:ref) GetLastEnchantedItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastCreatedPotion",
      "description": "returns the potion most recently created by the player during the current game session",
      "example": {
        "raw": "GetLastCreatedPotion - returns the potion most recently created by the player during the current game session\n\n(potion:ref) GetLastCreatedPotion",
        "return": [
          "potion",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastUniqueCreatedPotion",
      "description": "returns the last ",
      "example": {
        "raw": "GetLastUniqueCreatedPotion - returns the last unique potion created by the player. The game remembers which potions the player has created in the past. The first time the player creates apotion of a given magnitude and effects, that potion will be returned by GetLastUniqueCreatedPotion. Subsequently, creating a potion of the same effects and magnitude will not create a unique potion and so the potion will not be returned by this command.\n\n(potion:ref) GetLastUniqueCreatedPotion",
        "return": [
          "potion",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "IsConsoleOpen",
      "description": "returns 1 if the console is currently open",
      "example": {
        "raw": "IsConsoleOpen - returns 1 if the console is currently open\n\n(open:bool) IsConsoleOpen",
        "return": [
          "open",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "LoadGameEx",
      "description": "attempts to load the saved game with the specified name",
      "example": {
        "raw": "LoadGameEx - attempts to load the saved game with the specified name\n\n(nothing) LoadGameEx formatString:string var1 var2 ... var20",
        "return": [
          "nothing"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "ActorValueToString",
      "description": "converts an actor value to its localized name",
      "example": {
        "raw": "ActorValueToString - converts an actor value to its localized name\n\n(actorValueName:string) ActorValueToString toConvert:actorValue\n\n(actorValueName:string) AVString toConvert:actorValue",
        "return": [
          "actorValueName",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "ActorValueToStringC",
      "description": "converts an ",
      "example": {
        "raw": "ActorValueToStringC - converts an actor value code to its localized name\n\n(actorValueName:string) ActorValueToStringC toConvert:actorValueCode",
        "return": [
          "actorValueName",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "StringToActorValue",
      "description": "converts the name of an actor value into the actor value code itself",
      "example": {
        "raw": "StringToActorValue - converts the name of an actor value into the actor value code itself\n\n(actorValue:int) StringToActorValue toConvert:string\n\n(actorValue:int) StringAV toConvert:string",
        "return": [
          "actorValue",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetEditorID",
      "description": "attempts to retrieve the editorID for the specified object. EditorIDs for most forms are not loaded at run-time. Currently this function only returns editor IDs for cells and quests - for other types, returns the formID as a string. If the second argument is non-zero, however, returns an empty string instead of the formID.",
      "example": {
        "raw": "GetEditorID - attempts to retrieve the editorID for the specified object. EditorIDs for most forms are not loaded at run-time. Currently this function only returns editor IDs for cells and quests - for other types, returns the formID as a string. If the second argument is non-zero, however, returns an empty string instead of the formID.\n\n(editorID:string) GetEditorID object:ref noFormID:bool",
        "return": [
          "editorID",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetEditorID2",
      "description": "attempts to retrieve the editorID for the specified object. If REID is installed it interrogate it's Interface (TODO more plugins management).",
      "example": {
        "raw": "GetEditorID2 - attempts to retrieve the editorID for the specified object. If REID is installed it interrogate it's Interface (TODO more plugins management).\n\n(editorID:string) GetEditorID2 object:ref",
        "return": [
          "editorID",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetFormIDString",
      "description": "returns the formID of the specified object as a hexadecimal string. If the object cannot be found in memory (for example, a non-persistent reference), returns \"00000000\"",
      "example": {
        "raw": "GetFormIDString - returns the formID of the specified object as a hexadecimal string. If the object cannot be found in memory (for example, a non-persistent reference), returns \"00000000\"\n\n(formID:string) reference.GetFormIDString object:ref",
        "return": [
          "formID",
          "string"
        ],
        "params": [
          "reference.GetFormIDString"
        ]
      }
    },
    {
      "name": "GetRawFormIDString",
      "description": " (GetFormIDString2) - returns the formID stored in an array element or ref variable as a hexadecimal string. Unlike GetFormIDString, this command does not care if  the formID is valid.",
      "example": {
        "raw": "GetRawFormIDString (GetFormIDString2) - returns the formID stored in an array element or ref variable as a hexadecimal string. Unlike GetFormIDString, this command does not care if  the formID is valid.\n\n(formID:string) GetRawFormIDString object:ref",
        "return": [
          "formID",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetUserTime",
      "description": "returns a StringMap containing information about the time and date on the player's system",
      "example": {
        "raw": "GetUserTime - returns a StringMap containing information about the time and date on the player's system\n\n(userTime:StringMap) GetUserTime",
        "return": [
          "userTime",
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "ActorValueToCode",
      "description": "given an actor value name, returns the corresponding ",
      "example": {
        "raw": "ActorValueToCode - given an actor value name, returns the corresponding actor value code\n\n(code:int) ActorValueToCode toConvert:actorValue",
        "return": [
          "code",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetGameDifficulty",
      "description": "returns the current difficulty level of the game as a float from -1.0 to 1.0, with higher values corresponding to greater difficulty.",
      "example": {
        "raw": "GetGameDifficulty - returns the current difficulty level of the game as a float from -1.0 to 1.0, with higher values corresponding to greater difficulty.\n\n(difficulty:float) GetGameDifficulty",
        "return": [
          "difficulty",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetGameDifficulty",
      "description": "sets the current difficulty level of the game as a float from -1.0 to 1.0, with higher values corresponding to greater difficulty. Values outside of the valid range are ignored.",
      "example": {
        "raw": "SetGameDifficulty - sets the current difficulty level of the game as a float from -1.0 to 1.0, with higher values corresponding to greater difficulty. Values outside of the valid range are ignored.\n\n(nothing) SetGameDifficulty difficulty:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetOblivionDirectory",
      "description": "returns the full path to the user's Oblivion install",
      "example": {
        "raw": "GetOblivionDirectory - returns the full path to the user's Oblivion install\n\n(directory:string) GetOblivionDirectory",
        "return": [
          "directory",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetWaterShader",
      "description": "returns information about the current water shader given a string representing one of the water shader properties. Supports the same property names as the ModWaterShader console command: \"direction\", \"velocity\", \"frequency\", \"amplitude\", \"fresnel\", \"reflectivity\", \"opacity\", \"blend\", \"scrollx\", \"scrolly\", \"rainforce\", \"rainvelocity\", \"rainfalloff\", \"rainsize\", \"displaceforce\", \"displacevelocity\", \"displacefalloff\", and \"displacedampener\".",
      "example": {
        "raw": "GetWaterShader - returns information about the current water shader given a string representing one of the water shader properties. Supports the same property names as the ModWaterShader console command: \"direction\", \"velocity\", \"frequency\", \"amplitude\", \"fresnel\", \"reflectivity\", \"opacity\", \"blend\", \"scrollx\", \"scrolly\", \"rainforce\", \"rainvelocity\", \"rainfalloff\", \"rainsize\", \"displaceforce\", \"displacevelocity\", \"displacefalloff\", and \"displacedampener\".\n\n(shaderValue:float) GetWaterShader propertyName:string",
        "return": [
          "shaderValue",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetGridsToLoad",
      "description": "returns the effective value of the uGridsToLoad ini setting. This value is specified in Oblivion.ini but adjusted by the game during play.",
      "example": {
        "raw": "GetGridsToLoad - returns the effective value of the uGridsToLoad ini setting. This value is specified in Oblivion.ini but adjusted by the game during play.\n\n(gridsToLoad:int) GetGridsToLoad",
        "return": [
          "gridsToLoad",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetOLMPGrids",
      "description": "specifies the number of grids that a call to OutputLocalMapPicturesOverride should use when generating local map pictures. The value passed in must be smaller than the effective value of the uGridsToLoad ini setting, which can be obtained with GetGridsToLoad. All subsequent calls to OutputLocalMapPicturesOverride will use the new value.",
      "example": {
        "raw": "SetOLMPGrids - specifies the number of grids that a call to OutputLocalMapPicturesOverride should use when generating local map pictures. The value passed in must be smaller than the effective value of the uGridsToLoad ini setting, which can be obtained with GetGridsToLoad. All subsequent calls to OutputLocalMapPicturesOverride will use the new value.\n\n(valueSet:bool) SetOLMPGrids grids:int",
        "return": [
          "valueSet",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "OutputLocalMapPicturesOverride",
      "description": "this command is identical to the console command OutputLocalMapPictures, except it uses the number of grids specified by the last call to SetOLMPGrids when generating the maps.",
      "example": {
        "raw": "OutputLocalMapPicturesOverride - this command is identical to the console command OutputLocalMapPictures, except it uses the number of grids specified by the last call to SetOLMPGrids when generating the maps.\n\n(nothing) OutputLocalMapPicturesOverride\n\n(nothing) OLMPOR",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetWorldSpaceParentWorldSpace",
      "description": "returns a worldspace's parent worldspace",
      "example": {
        "raw": "GetWorldSpaceParentWorldSpace - returns a worldspace's parent worldspace\n\n(worldspace:ref) GetWorldSpaceParentWorldSpace worldspace:ref\n\n(worldspace:ref) GetWorldParentWorld worldspace:ref",
        "return": [
          "worldspace",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GlobalVariableExists",
      "description": "returns 1 if a global variable exists with the specified editorID",
      "example": {
        "raw": "GlobalVariableExists - returns 1 if a global variable exists with the specified editorID\n\n(globalVariableExists:bool) GlobalVariableExists variableEditorID:string",
        "return": [
          "globalVariableExists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetCellChanged",
      "description": "returns 1 if the player has entered a new cell since the last time the command was called from the calling script, including transitioning from one exterior cell to another.",
      "example": {
        "raw": "GetCellChanged -returns 1 if the player has entered a new cell since the last time the command was called from the calling script, including transitioning from one exterior cell to another.\n\n(cellChanged:bool) GetCellChanged",
        "return": [
          "cellChanged",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ResolveModIndex",
      "description": "Attempts to resolve a mod index which was stored during a previous game session to account for any changes to the user's load order. Given the stored mod index for a mod, returns the mod index currently associated with that same mod, or -1 if the index could not be resolved (for instance, because the mod is no longer loaded).",
      "example": {
        "raw": "ResolveModIndex - Attempts to resolve a mod index which was stored during a previous game session to account for any changes to the user's load order. Given the stored mod index for a mod, returns the mod index currently associated with that same mod, or -1 if the index could not be resolved (for instance, because the mod is no longer loaded).\n\n(resolvedModIndex:int) ResolveModIndex storedModIndex:int",
        "return": [
          "resolvedModIndex",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetCameraFOV2",
      "description": "Set Camera FOV without constraints.",
      "example": {
        "raw": "SetCameraFOV2 - Set Camera FOV without constraints.\n\n SetCameraFOV2 FOV:int\n SetFOV2 FOV:int",
        "return": "",
        "params": [
          ""
        ]
      }
    },
    {
      "name": "GetLoadedTypeArray",
      "description": "Return an array with all Loaded form of type and optionally with specific mod index.",
      "example": {
        "raw": "GetLoadedTypeArray - Return an array with all Loaded form of type and optionally with specific mod index.\n\n (forms:array) GetLoadedTypeArray formType:int  modid:int\n (forms:array) GLTA formType:int  modid:int",
        "return": "",
        "params": [
          ""
        ]
      }
    },
    {
      "name": "CloneForm",
      "description": "creates and returns a new base object that is an exact copy of the passed objectID",
      "example": {
        "raw": "CloneForm - creates and returns a new base object that is an exact copy of the passed objectID\n\n(clonedForm:ref) CloneForm objectID:ref",
        "return": [
          "clonedForm",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "IsClonedForm",
      "description": "returns whether the passed objectID is a cloned form or not. A cloned form is saved as part of the save game. Instances of cloned forms are player created potions, spells and enchanted items",
      "example": {
        "raw": "IsClonedForm - returns whether the passed objectID is a cloned form or not. A cloned form is saved as part of the save game. Instances of cloned forms are player created potions, spells and enchanted items\n\n(isCloned:bool) IsClonedForm objectID:ref",
        "return": [
          "isCloned",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "Label",
      "description": "save the location of the command following the ",
      "example": {
        "raw": "Label - save the location of the command following the SaveIP command\n\n(nothing) SaveIP slot:int\n\n(nothing) Label slot:int",
        "return": [
          "aveI"
        ],
        "params": []
      }
    },
    {
      "name": "Goto",
      "description": "jump to a previously saved location",
      "example": {
        "raw": "Goto - jump to a previously saved location\n\n(nothing) RestoreIP slot:int\n\n(nothing) Goto slot:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "While",
      "description": "evaluates an OBSE expression. If the expression is true, the statements following it will be executed until the next ",
      "example": {
        "raw": "While - evaluates an OBSE expression. If the expression is true, the statements following it will be executed until the next Loop command, at which point control returns to the top of the loop and the expression is evaluated again.\n\n(nothing) While expression",
        "return": [
          "oo"
        ],
        "params": []
      }
    },
    {
      "name": "ForEach",
      "description": "",
      "example": {
        "raw": "ForEach - ForEach is used to iterate over the elements of an array, the characters in a string, or references to objects in a container. The syntax ForEach item &lt;- collection is used to indicate the variable (&quot;item&quot;) which will hold the current element and the string, array, or container reference (&quot;collection&quot;) from which elements will be drawn. On loop entry, item is set to the first element in collection. When the next Loop command is encountered, item is set to the next element in collection and execution returns to the top of the loop. The loop terminates when all elements have been returned. The type of item varies based on the type of collection.",
        "return": [
          "orEac"
        ],
        "params": []
      }
    },
    {
      "name": "Loop",
      "description": "Returns execution to the most recent ",
      "example": {
        "raw": "Loop - Returns execution to the most recent While or ForEach command. The loop condition is evaluated and if it passes, execution continues inside the body of the loop. Otherwise, execution returns to the instruction immediately following the Loop command.\n\n(nothing) Loop",
        "return": [
          "hil"
        ],
        "params": []
      }
    },
    {
      "name": "Break",
      "description": "Must be called inside of a ",
      "example": {
        "raw": "Break - Must be called inside of a ForEach or While loop. Break causes the loop to exit immediately, forcing execution to jump to the instruction immediately following the next Loop command.\n\n(nothing) Break",
        "return": [
          "orEac"
        ],
        "params": []
      }
    },
    {
      "name": "Continue",
      "description": "Must be called inside of a ",
      "example": {
        "raw": "Continue - Must be called inside of a ForEach or While loop. Continue skips the rest of the body of a loop, returning execution to the top of the loop and evaluating the loop condition. If the condition passes, execution enters the loop body, otherwise the loop terminates and continues from the instruction following the corresponding Loop command.\n\n(nothing) Continue",
        "return": [
          "orEac"
        ],
        "params": []
      }
    },
    {
      "name": "GetFirstRef",
      "description": "returns the first reference in the current cell. A type can optionally be supplied to return only references matching that type. Additionally, you can pass 69 for actors and 70 for inventory items. This function should only be used either within a ",
      "example": {
        "raw": "GetFirstRef - returns the first reference in the current cell. A type can optionally be supplied to return only references matching that type. Additionally, you can pass 69 for actors and 70 for inventory items. This function should only be used either within a Label...Goto loop or within While loop and use GetNextRef for getting next element. An optional cell depth can be supplied to specify the number of adjacent cells to scan in exteriors: a cell depth of 0 scans only the player's current cell, a cell depth of 1 scans the player's current cell plus 8 adjacent cells, a depth of 2 scans the player's cell plus 24 adjacent cells, etc... By default, inactive references to items which were previously picked up by an actor are ignored; passing 1 for the third parameter will force those references to be included (WARNING! Some people have reported that it's not working that way).\n\n(reference:ref) GetFirstRef type:int cellDepth:int includeInactiveRefs:int",
        "return": [
          "abel...Got"
        ],
        "params": []
      }
    },
    {
      "name": "GetNextRef",
      "description": "returns the next reference in the curent cell. ",
      "example": {
        "raw": "GetNextRef - returns the next reference in the curent cell. GetFirstRef must be called first; this function uses the cell depth and type passed to GetFirstRef and returns the next reference matching that type, or zero after the last reference has been returned. This function should only be used either within a Label...Goto loop or within While loop.\n\n(reference:ref) GetNextRef",
        "return": [
          "etFirstRe"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumRefs",
      "description": "returns the number of references in the current cell which match the optionally supplied type code. Use 69 for actors and 70 for inventory items. An optional cell depth can be specified for exteriors. By default, inactive references to items which were previously picked up by an actor are ignored; passing 1 for the third parameter will force those references to be included.",
      "example": {
        "raw": "GetNumRefs - returns the number of references in the current cell which match the optionally supplied type code. Use 69 for actors and 70 for inventory items. An optional cell depth can be specified for exteriors. By default, inactive references to items which were previously picked up by an actor are ignored; passing 1 for the third parameter will force those references to be included.\n\n(numRefs:int) GetNumRefs type:int cellDepth:int includeInactiveRefs:int",
        "return": [
          "numRefs",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetFirstRefInCell",
      "description": "Works the same as ",
      "example": {
        "raw": "GetFirstRefInCell - Works the same as GetFirstRef but takes an additional parameter specifying the cell to scan. Note that if the specified is not loaded in memory, this function will only return persistent references. Use GetNextRef to iterate through the rest of the references in the cell.\n\n(reference:ref) GetFirstRefInCell cell:ref type:int cellDepth:int  includeInactiveRefs:int",
        "return": [
          "etFirstRe"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumRefsInCell",
      "description": "Works the same as ",
      "example": {
        "raw": "GetNumRefsInCell - Works the same as GetNumRefs but takes an additional parameter specifying the cell to scan. Only counts persistent references if the cell is not loaded in memory.\n\n(numRefs:int) GetNumRefsInCell cell:ref type:int cellDepth:int includeInactiveRefs:int",
        "return": [
          "etNumRef"
        ],
        "params": []
      }
    },
    {
      "name": "GetHighActors",
      "description": "returns an Array containing all actors currently in high AI processing. Generally this is equivalent to all the actors in the currently loaded interior cell or set of exterior cells adjacent to and including the player's current cell. This command is more efficient than using GetFirst/NextRef.",
      "example": {
        "raw": "GetHighActors - returns an Array containing all actors currently in high AI processing. Generally this is equivalent to all the actors in the currently loaded interior cell or set of exterior cells adjacent to and including the player's current cell. This command is more efficient than using GetFirst/NextRef.\n\n(actors:Array) GetHighActors",
        "return": [
          "actors",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetMiddleHighActors",
      "description": "returns an Array containing all actors currently in middle high AI processing. This generally includes all actors in cells that are not currently loaded but which have recently been visited by the player. This command is more efficient than using GetFirst/NextRef.",
      "example": {
        "raw": "GetMiddleHighActors - returns an Array containing all actors currently in middle high AI processing. This generally includes all actors in cells that are not currently loaded but which have recently been visited by the player. This command is more efficient than using GetFirst/NextRef.\n\n(actors:Array) GetMiddleHighActors",
        "return": [
          "actors",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetLowActors",
      "description": "returns an Array containing all actors currently in low AI processing. This generally includes actors on unloaded cells. This command is more efficient than using GetFirst/NextRef.",
      "example": {
        "raw": "GetLowActors - returns an Array containing all actors currently in low AI processing. This generally includes actors on unloaded cells. This command is more efficient than using GetFirst/NextRef.\n\n(actors:Array) GetLowActors",
        "return": [
          "actors",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "IsKeyPressed",
      "description": "returns whether the specified key is currently pressed. Uses standard windows key codes.",
      "example": {
        "raw": "IsKeyPressed - returns whether the specified key is currently pressed. Uses standard windows key codes.\n\n(isKeyPressed:bool) IsKeyPressed windowsKeyCode:int",
        "return": [
          "isKeyPressed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsKeyPressed2",
      "description": "returns whether the specified key is currently pressed. Uses DX scancodes. Detect Tapped/Hold/Hammered keys but not Disabled keys",
      "example": {
        "raw": "IsKeyPressed2 - returns whether the specified key is currently pressed. Uses DX scancodes. Detect Tapped/Hold/Hammered keys but not Disabled keys\n\n(isKeyPressed:bool) IsKeyPressed2 dxScanCode:int",
        "return": [
          "isKeyPressed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetKeyPress",
      "description": "returns the DX scan code of the key being pressed. If more than one key is pressed use whichIndex to choose which keycode to return.",
      "example": {
        "raw": "GetKeyPress - returns the DX scan code of the key being pressed. If more than one key is pressed use whichIndex to choose which keycode to return.\n\n(keyPressed:int) GetKeyPress whichIndex:int",
        "return": [
          "keyPressed",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumKeysPressed",
      "description": "returns the number of keys currently pressed",
      "example": {
        "raw": "GetNumKeysPressed - returns the number of keys currently pressed\n\n(count:int) GetNumKeysPressed",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "DisableKey",
      "description": "disables the key with the specified dx scancode",
      "example": {
        "raw": "DisableKey - disables the key with the specified dx scancode\n\n(nothing) DisableKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "EnableKey",
      "description": "enables the key with the specified dx scancode. Turns off DisableKey.",
      "example": {
        "raw": "EnableKey - enables the key with the specified dx scancode. Turns off DisableKey.\n\n(nothing) EnableKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "HoldKey",
      "description": "holds down the key with the specified dx scancode",
      "example": {
        "raw": "HoldKey - holds down the key with the specified dx scancode\n\n(nothing) HoldKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ReleaseKey",
      "description": "releases a held key with the specified dx scancode",
      "example": {
        "raw": "ReleaseKey - releases a held key with the specified dx scancode\n\n(nothing) ReleaseKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "TapKey",
      "description": "presses the key with the specidied dx scancode once",
      "example": {
        "raw": "TapKey - presses the key with the specidied dx scancode once\n\n(nothing) TapKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "HammerKey",
      "description": "fakes keypresses every other frame of the key with the specified dx scancode",
      "example": {
        "raw": "HammerKey - fakes keypresses every other frame of the key with the specified dx scancode\n\n(nothing) HammerKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "AHammerKey",
      "description": "fakes keypresses every other frame on the alternate frames from HammerKey of the key with the specified dx scancode",
      "example": {
        "raw": "AHammerKey - fakes keypresses every other frame on the alternate frames from HammerKey of the key with the specified dx scancode\n\n(nothing) AHammerKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "UnHammerKey",
      "description": "stops hammering the key with the specified dx scancode",
      "example": {
        "raw": "UnHammerKey - stops hammering the key with the specified dx scancode\n\n(nothing) UnHammerKey dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetControl",
      "description": "returns the dx scancode of the key used for the specified control",
      "example": {
        "raw": "GetControl - returns the dx scancode of the key used for the specified control\n\n(dxScanCode:int) GetControl whichControl:int",
        "return": [
          "dxScanCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetAltControl2",
      "description": "returns the dx scancode of the alternate key used for the specified control. Unlike GetAltControl, the return value of this function is a valid DX scan code which requires no further calculation for use with other input functions.",
      "example": {
        "raw": "GetAltControl2 - returns the dx scancode of the alternate key used for the specified control. Unlike GetAltControl, the return value of this function is a valid DX scan code which requires no further calculation for use with other input functions.\n\n(dxScanCode:int) GetAltControl2 whichControl:int",
        "return": [
          "dxScanCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetMouseButtonPress",
      "description": "returns the dx scancode of the mouse button being pressed. If more than one mouse button is pressed, use whichIndex to choose which code to return",
      "example": {
        "raw": "GetMouseButtonPress - returns the dx scancode of the mouse button being pressed. If more than one mouse button is pressed, use whichIndex to choose which code to return\n\n(dxScanCode:int) GetMouseButtonPress whichIndex:int",
        "return": [
          "dxScanCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetNumMouseButtonsPressed",
      "description": "returns the number of mouse buttons pressed",
      "example": {
        "raw": "GetNumMouseButtonsPressed - returns the number of mouse buttons pressed\n\n(count:int) GetNumMouseButtonsPressed",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "DisableMouse",
      "description": "prevents the mouse from moving",
      "example": {
        "raw": "DisableMouse - prevents the mouse from moving\n\n(nothing) DisableMouse",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "EnableMouse",
      "description": "turns off ",
      "example": {
        "raw": "EnableMouse - turns off DisableMouse\n\n(nothing) EnableMouse",
        "return": [
          "isableMous"
        ],
        "params": []
      }
    },
    {
      "name": "MoveMouseX",
      "description": "moves the mouse horizontally the specified number of pixels",
      "example": {
        "raw": "MoveMouseX - moves the mouse horizontally the specified number of pixels\n\n(nothing) MoveMouseX pixels:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "MoveMouseY",
      "description": "moves the mouse veritcally the specified number of pixels",
      "example": {
        "raw": "MoveMouseY - moves the mouse veritcally the specified number of pixels\n\n(nothing) MoveMouseY pixels:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetMouseSpeedX",
      "description": "moves the mouse in the horizontal axis at the specified number of pixels per second",
      "example": {
        "raw": "SetMouseSpeedX - moves the mouse in the horizontal axis at the specified number of pixels per second\n\n(nothing) SetMouseSpeedX pixels:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetMouseSpeedY",
      "description": "moves the mouse in the vertical axis at the specified number of pixels per second",
      "example": {
        "raw": "SetMouseSpeedY - moves the mouse in the vertical axis at the specified number of pixels per second\n\n(nothing) SetMouseSpeedY pixels:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "IsKeyPressed3",
      "description": "returns 1 if the key or mouse button specified is currently pressed. Just like IsKeyPressed2, but detects disabled keys.",
      "example": {
        "raw": "IsKeyPressed3 - returns 1 if the key or mouse button specified is currently pressed. Just like IsKeyPressed2, but detects disabled keys.\n\n(isPressed:bool) IsKeyPressed3 dxScanCode:int",
        "return": [
          "isPressed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsControlPressed",
      "description": "returns 1 if either the key or mouse button assigned to the specified control code is currently pressed. Detects disabled keys.",
      "example": {
        "raw": "IsControlPressed - returns 1 if either the key or mouse button assigned to the specified control code is currently pressed. Detects disabled keys.\n\n(isPressed:bool) IsControlPressed whichControl:int",
        "return": [
          "isPressed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "DisableControl",
      "description": "disables both the key and mouse buton assigned to the specified control",
      "example": {
        "raw": "DisableControl - disables both the key and mouse buton assigned to the specified control\n\n(nothing) DisableControl whichControl:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "EnableControl",
      "description": "enables the key and mouse button for a control disabled with ",
      "example": {
        "raw": "EnableControl - enables the key and mouse button for a control disabled with DisableControl\n\n(nothing) EnableControl whichControl:int",
        "return": [
          "isableContro"
        ],
        "params": []
      }
    },
    {
      "name": "OnKeyDown",
      "description": "registers a script as a listener for input events. Returns 1 for one frame when the passed key or mouse button is pressed. If used by multiple scripts, each script will be informed of the key's state. Will not return true again until the key is released and then pressed again.",
      "example": {
        "raw": "OnKeyDown - registers a script as a listener for input events. Returns 1 for one frame when the passed key or mouse button is pressed. If used by multiple scripts, each script will be informed of the key's state. Will not return true again until the key is released and then pressed again.\n\n(keyPressed:bool) OnKeyDown dxScanCode:int",
        "return": [
          "keyPressed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "OnControlDown",
      "description": "works like ",
      "example": {
        "raw": "OnControlDown - works like OnKeyDown, but takes a control code and returns 1 when the key or mouse buttonassigned to that control is pressed\n\n(controlPressed:bool) OnControlDown whichControl:int",
        "return": [
          "nKeyDow"
        ],
        "params": []
      }
    },
    {
      "name": "TapControl",
      "description": "presses the key or mouse button associated with the specified control once",
      "example": {
        "raw": "TapControl - presses the key or mouse button associated with the specified control once\n\n(nothing) TapControl whichControl:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetControl",
      "description": "assigns a new key to the specified control. If the specified control already has a key assigned, the key mappings are swapped.",
      "example": {
        "raw": "SetControl - assigns a new key to the specified control. If the specified control already has a key assigned, the key mappings are swapped.\n\n(nothing) SetControl whichControl:int dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetAltControl2",
      "description": "assigns a new mouse button to the specified control. If the specified control already has a mouse button assigned, the button mappings are swapped.",
      "example": {
        "raw": "SetAltControl2 - assigns a new mouse button to the specified control. If the specified control already has a mouse button assigned, the button mappings are swapped.\n\n(nothing) SetAltControl2 whichControl:int dxScanCode:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetCursorPos",
      "description": "returns the current X or Y coordinate of the mouse cursor in menu mode. Minumum coordinate is zero, maximum is determined by the user's screen resolution. Specify 'X' or 'Y' for the axis.",
      "example": {
        "raw": "GetCursorPos - returns the current X or Y coordinate of the mouse cursor in menu mode. Minumum coordinate is zero, maximum is determined by the user's screen resolution. Specify 'X' or 'Y' for the axis.\n\n(cursorPos:int) GetCursorPos axis:char",
        "return": [
          "cursorPos",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetIsControl",
      "description": "allows mods to register or unregister keys or mouse buttons as custom controls. Other mods can then use ",
      "example": {
        "raw": "SetIsControl - allows mods to register or unregister keys or mouse buttons as custom controls. Other mods can then use IsControl to detect conflicts between custom controls.\n\n(nothing) SetIsControl keyCode:int isControl:bool",
        "return": [
          "sContro"
        ],
        "params": []
      }
    },
    {
      "name": "IsControl",
      "description": "returns 1 if the specified key or mouse button is assigned to a game control, 2 if it has been registered as a custom control by a mod via ",
      "example": {
        "raw": "IsControl - returns 1 if the specified key or mouse button is assigned to a game control, 2 if it has been registered as a custom control by a mod via SetIsControl, or 0 otherwise.\n\n(isControl:int) IsControl keyCode:int",
        "return": [
          "etIsContro"
        ],
        "params": []
      }
    },
    {
      "name": "IsKeyDisabled",
      "description": "returns 1 if the key has been disabled using ",
      "example": {
        "raw": "IsKeyDisabled - returns 1 if the key has been disabled using DisableKey\n\n(isDisabled:bool) IsKeyDisabled keycode:int",
        "return": [
          "isableKe"
        ],
        "params": []
      }
    },
    {
      "name": "IsControlDisabled",
      "description": "returns 1 if thecontrol has been disabled by a call to ",
      "example": {
        "raw": "IsControlDisabled - returns 1 if thecontrol has been disabled by a call to DisableControl. Note that this only keeps track of calls to DisableControl and EnableControl; it does not check if the disabled state of the key or mouse button has been affected by DisableKey\n\n(isDisabled:bool) IsControlDisabled whichControl:int",
        "return": [
          "isableContro"
        ],
        "params": []
      }
    },
    {
      "name": "GetMouseButtonsSwapped",
      "description": "returns true if the user has configured his operating system to swap the left and right mouse buttons. Input functions respect the swap configuration.",
      "example": {
        "raw": "GetMouseButtonsSwapped - returns true if the user has configured his operating system to swap the left and right mouse buttons. Input functions respect the swap configuration.\n\n(swapped:bool) GetMouseButtonsSwapped",
        "return": [
          "swapped",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "Abs",
      "description": "returns the absolute value of the argument",
      "example": {
        "raw": "Abs - returns the absolute value of the argument\n\n(absoluteValue:float) abs arg:float",
        "return": [
          "absoluteValue",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Ceil",
      "description": "returns the nearest whole number above the argument",
      "example": {
        "raw": "Ceil - returns the nearest whole number above the argument\n\n(ceil:float) ceil arg:float",
        "return": [
          "ceil",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Exp",
      "description": "returns e to the power of the argument",
      "example": {
        "raw": "Exp - returns e to the power of the argument\n\n(exp:float) exp arg:float",
        "return": [
          "exp",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Floor",
      "description": "returns the nearest whole number less than the argument",
      "example": {
        "raw": "Floor - returns the nearest whole number less than the argument\n\n(floor:float) floor arg:float",
        "return": [
          "floor",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Log",
      "description": "returns the natural logarithm of the number",
      "example": {
        "raw": "Log - returns the natural logarithm of the number\n\n(log:float) log arg:float",
        "return": [
          "log",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Log10",
      "description": "returns the base 10 logarithm of the number",
      "example": {
        "raw": "Log10 - returns the base 10 logarithm of the number\n\n(log10:float) log10 arg:float",
        "return": [
          "log10",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Pow",
      "description": "returns the base raised to the exponents power",
      "example": {
        "raw": "Pow - returns the base raised to the exponents power\n\n(pow:float) pow base:float exponent:float",
        "return": [
          "pow",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Rand",
      "description": "returns a random number between min and max",
      "example": {
        "raw": "Rand - returns a random number between min and max\n\n(rand:float) rand min:float max:float",
        "return": [
          "rand",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SquareRoot",
      "description": "returns the square root of the argument",
      "example": {
        "raw": "SquareRoot - returns the square root of the argument\n\n(sqrt:float) squareroot arg:float\n\n(sqrt:float) sqrt arg:float",
        "return": [
          "sqrt",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "Fmod",
      "description": "returns the floating point modulus of dividend in the given base. This differs from ",
      "example": {
        "raw": "Fmod - returns the floating point modulus of dividend in the given base. This differs from dividend % base in the scripting language as % is a strictly integer function. When base is positive, 0 &lt;= result &lt; base. The optional offset shifts the range of the result to offset &lt;= result &lt; base+offset.",
        "return": [
          "ividen"
        ],
        "params": []
      }
    },
    {
      "name": "ACos",
      "description": "returns the arccosine of the argument. ",
      "example": {
        "raw": "ACos - returns the arccosine of the argument. ACos and DACos use degrees. RACose uses radians.\n\n(acos:float) acos arg:float\n\n(acos:float) dacos arg:float\n\n(acos:float) racos arg:float",
        "return": [
          "Co"
        ],
        "params": []
      }
    },
    {
      "name": "ASin",
      "description": "returns the arcsine of the argument. ",
      "example": {
        "raw": "ASin - returns the arcsine of the argument. ASin and DASin use degrees. RASin uses radians.\n\n(asin:float) asin arg:float\n\n(asin:float) dasin arg:float\n\n(asin:float) rasin arg:float",
        "return": [
          "Si"
        ],
        "params": []
      }
    },
    {
      "name": "ATan",
      "description": "returns the arctangent of the argument. ",
      "example": {
        "raw": "ATan - returns the arctangent of the argument. ATan and DATan use degrees. RATan uses radians.\n\n(atan:float) atan arg:float\n\n(atan:float) datan arg:float\n\n(atan:float) ratan arg:float",
        "return": [
          "Ta"
        ],
        "params": []
      }
    },
    {
      "name": "ATan2",
      "description": "returns the arctangent of the arguments. ",
      "example": {
        "raw": "ATan2 - returns the arctangent of the arguments. ATan2 and DATan2 use degrees. RATan2 uses radians.\n\n(atan2:float) atan2 arg1:float arg2:float\n\n(atan2:float) datan2 arg1:float arg2:float\n\n(atan2:float) ratan2 arg1:float arg2:float",
        "return": [
          "Tan"
        ],
        "params": []
      }
    },
    {
      "name": "Cos",
      "description": "returns the cosine of the angle. ",
      "example": {
        "raw": "Cos - returns the cosine of the angle. Cos and DCos use degrees. RCos uses radians.\n\n(cos:float) cos arg:float\n\n(cos:float) dcos arg:float\n\n(cos:float) rcos arg:float",
        "return": [
          "o"
        ],
        "params": []
      }
    },
    {
      "name": "Cosh",
      "description": "returns the hyperbolic cosine of the angle. ",
      "example": {
        "raw": "Cosh - returns the hyperbolic cosine of the angle. Cosh and DCosh use degrees. RCosh uses radians.\n\n(cosh:float) cosh arg:float\n\n(cosh:float) dcosh arg:float\n\n(cosh:float) rcosh arg:float",
        "return": [
          "os"
        ],
        "params": []
      }
    },
    {
      "name": "Sin",
      "description": "returns the sine of the angle. ",
      "example": {
        "raw": "Sin - returns the sine of the angle. Sin and DSin use degrees. RSinh uses radians.\n\n(sin:float) sin arg:float\n\n(sin:float) dsin arg:float\n\n(sin:float) rsin arg:float",
        "return": [
          "i"
        ],
        "params": []
      }
    },
    {
      "name": "Sinh",
      "description": "returns the hyperbolic sine of the angle. ",
      "example": {
        "raw": "Sinh - returns the hyperbolic sine of the angle. Sinh and DSinh use degrees. RSinh uses radians.\n\n(sinh:float) sin arg:float\n\n(sinh:float) dsin arg:float\n\n(sinh:float) rsin arg:float",
        "return": [
          "in"
        ],
        "params": []
      }
    },
    {
      "name": "Tan",
      "description": "returns the tangent of the angle. ",
      "example": {
        "raw": "Tan - returns the tangent of the angle. Tan and DTan use degrees. RTan uses radians.\n\n(tan:float) tan arg:float\n\n(tan:float) dtan arg:float\n\n(tan:float) rtan arg:float",
        "return": [
          "a"
        ],
        "params": []
      }
    },
    {
      "name": "Tanh",
      "description": "returns the hyperbolic tangent of the angle. ",
      "example": {
        "raw": "Tanh - returns the hyperbolic tangent of the angle. Tanh and DTanh use degrees. RTanh uses radians.\n\n(tanh:float) tanh arg:float\n\n(tanh:float) dtanh arg:float\n\n(tanh:float) rtanh arg:float",
        "return": [
          "an"
        ],
        "params": []
      }
    },
    {
      "name": "LeftShift",
      "description": "shifts the argument left by the specified number of bits. Returns zero if shiftAmount is >= 32.",
      "example": {
        "raw": "LeftShift - shifts the argument left by the specified number of bits. Returns zero if shiftAmount is &gt;= 32.\n\n(result:int) LeftShift value:int shiftAmount:int",
        "return": [
          "result",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "RightShift",
      "description": "shifts the argument right by the specified number of bits, inserting zeros on the left. Returns zero if shiftAmount is >= 32.",
      "example": {
        "raw": "RightShift - shifts the argument right by the specified number of bits, inserting zeros on the left. Returns zero if shiftAmount is &gt;= 32.\n\n(result:int) RightShift value:int shiftAmount:int",
        "return": [
          "result",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "LogicalAnd",
      "description": "returns the bitwise AND of the two arguments",
      "example": {
        "raw": "LogicalAnd - returns the bitwise AND of the two arguments\n\n(result:int)LogicalAnd arg1:int arg2:int",
        "return": [
          "result",
          "int)LogicalAn"
        ],
        "params": []
      }
    },
    {
      "name": "LogicalOr",
      "description": "returns the bitwise OR of the two arguments",
      "example": {
        "raw": "LogicalOr - returns the bitwise OR of the two arguments\n\n(result:int)LogicalOr arg1:int arg2:int",
        "return": [
          "result",
          "int)LogicalO"
        ],
        "params": []
      }
    },
    {
      "name": "LogicalXor",
      "description": "returns the bitwise XOR of the two arguments",
      "example": {
        "raw": "LogicalXor - returns the bitwise XOR of the two arguments\n\n(result:int)LogicalXor arg1:int arg2:int",
        "return": [
          "result",
          "int)LogicalXo"
        ],
        "params": []
      }
    },
    {
      "name": "LogicalNot",
      "description": "returns the bitwise NOT of the argument",
      "example": {
        "raw": "LogicalNot - returns the bitwise NOT of the argument\n\n(result:int)LogicalNot arg:int",
        "return": [
          "result",
          "int)LogicalNo"
        ],
        "params": []
      }
    },
    {
      "name": "GenerateZeroMatrix",
      "description": "Returns an n×m matrix with each element filled with a 0.",
      "example": {
        "raw": "GenerateZeroMatrix\n- Returns an n&times;m matrix with each element filled with a 0.\n\n\n(zeroMat:array) GenerateZeroMatrix height:int width:int\n\n(zeroMat:array) ZeroMat height:int width:int",
        "return": [
          "zeroMat",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "GenerateIdentityMatrix",
      "description": "Returns a square (n×n) matrix with each element along the diagonal (from top-left to bottom-right) filled with a 1, and every other element with 0.",
      "example": {
        "raw": "GenerateIdentityMatrix\n- Returns a square (n&times;n) matrix with each element along the diagonal (from top-left to bottom-right) filled with a 1, and every other element with 0.\n\n\n(idenMat:array) GenerateIdentityMatrix height:int\n\n(idenMat:array) IdentityMat height:int",
        "return": [
          "idenMat",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "GenerateRotationMatrix",
      "description": "Returns a 3×3 square matrix that can serve as a ",
      "example": {
        "raw": "GenerateRotationMatrix\n- Returns a 3&times;3 square matrix that can serve as a rotation matrix about the specified axis. Rotation matrices are always invertible, and their inverse is equal to their transpose.\n\n\n(rotationMat:array) GenerateRotationMatrix axis:axis angle:float\n\n(rotationMat:array) RotMat axis:axis angle:float",
        "return": [
          "rotationMat",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "VectorMagnitude",
      "description": "Returns the magnitude of a vector (square-root of the sum of the squares of its elements).",
      "example": {
        "raw": "VectorMagnitude\n- Returns the magnitude of a vector (square-root of the sum of the squares of its elements).\n\n\n(magnitude:float) VectorMagnitude vector:array\n\n(magnitude:float) VecMag vector:array",
        "return": [
          "magnitude",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "VectorNormalize",
      "description": "Returns the normalized version of a vector (each entry of the vector divided by its magnitude). A normalized vector has a magnitude of 1.",
      "example": {
        "raw": "VectorNormalize\n- Returns the normalized version of a vector (each entry of the vector divided by its magnitude). A normalized vector has a magnitude of 1.\n\n\n(norm:array) VectorNormalize vector:array\n\n(norm:array) VecNorm vector:array",
        "return": [
          "norm",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "VectorDot",
      "description": "Returns the ",
      "example": {
        "raw": "VectorDot\n- Returns the dot (scalar) product of two vectors. The vectors must have the same length.\n\n\n\nWarning: If this function fails (generally because the vectors do not have the same length), it will return zero. However, zero is also a valid value for a dot product, so it is the scripter's responsibility to ensure that the vectors have the same length.\n\n\n(dotProduct:float) VectorDot vector:array vector:array\n\n(dotProduct:float) dot vector:array vector:array",
        "return": [
          "dotProduct",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "VectorCross",
      "description": "Returns the ",
      "example": {
        "raw": "VectorCross\n- Returns the cross (vector) product of two vectors. The vectors must have the same length.\n\n\n(crossProduct:array) VectorCross vector:array vector:array\n\n(crossProduct:array) cross vector:array vector:array",
        "return": [
          "crossProduct",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "ForceRowVector",
      "description": "Takes a one-dimensional array, and returns an equivalent two-dimensional array, where the outer array's only element is the 1d array; i.e. ",
      "example": {
        "raw": "ForceRowVector\n- Takes a one-dimensional array, and returns an equivalent two-dimensional array, where the outer array's only element is the 1d array; i.e. A[0][j] == v[j]. This forces various linear algebra functions to treat the vector as a row vector, and can be necessary when using MatrixMultiply.\n\n\n\nNote that row vectors require only 2 array variables, as opposed to the n+1 (where n is the number of elements) array variables needed for column vectors; for this reason, row vectors are generally preferred.\n\n\n(rowVector:array) ForceRowVector vector1d:array\n\n(rowVector:array) RowVec vector1d:array",
        "return": [
          "rowVector",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "ForceColumnVector",
      "description": "Takes a one-dimensional array, and returns an equivalent two-dimensional array, where the outer array's elements are each arrays with only one element - each element in the 1d array. I.e., ",
      "example": {
        "raw": "ForceColumnVector\n- Takes a one-dimensional array, and returns an equivalent two-dimensional array, where the outer array's elements are each arrays with only one element - each element in the 1d array. I.e., A[i][0] == v[i]. This forces various linear algebra functions to treat the vector as a column vector, and can be necessary when using MatrixMultiply.\n\n\n\nNote that row vectors require only 2 array variables, as opposed to the n+1 (where n is the number of elements) array variables needed for column vectors; for this reason, row vectors are generally preferred.\n\n\n(colVector:array) ForceColumnVector vector1d:array\n\n(colVector:array) ColVec vector1d:array",
        "return": [
          "colVector",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixTrace",
      "description": "Returns the ",
      "example": {
        "raw": "MatrixTrace\n- Returns the trace of a square matrix, that is the sum of the elements along the diagonal (from top-left to bottom-right).\n\n\n\nWarning: If the matrix is not square, the return value will be zero, but zero is also a possible value for an actual trace; it is the scripter's responsibility to ensure that the matrix is square.\n\n\n(trace:float) MatrixTrace squareMatrix:array\n\n(trace:float) tr squareMatrix:array",
        "return": [
          "trace",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixDeterminant",
      "description": "Returns the ",
      "example": {
        "raw": "MatrixDeterminant\n- Returns the determinant of a square matrix.\n\n\n\nWarning: If the matrix is not square, the return value will be zero, but zero is also a possible value for an actual determinant; it is the scripter's responsibility to ensure that the matrix is square.\n\n\n(determinant:float) MatrixDeterminant squareMatrix:array\n\n(determinant:float) det squareMatrix:array",
        "return": [
          "determinant",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixRREF",
      "description": "Returns the ",
      "example": {
        "raw": "MatrixRREF\n- Returns the reduced row echelon form (RREF) of a matrix.\n\n\n(rref:array) MatrixRREF matrix:array\n\n(rref:array) RREF matrix:array",
        "return": [
          "rref",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixInvert",
      "description": "Returns the ",
      "example": {
        "raw": "MatrixInvert\n- Returns the inverse matrix of a given matrix. Returns 0 if the matrix is not invertible.\n\n\n(inverse:array) MatrixInvert matrix:array\n\n(inverse:array) MatInv matrix:array",
        "return": [
          "inverse",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixTranspose",
      "description": "Returns the ",
      "example": {
        "raw": "MatrixTranspose\n- Returns the transpose of a matrix. The rows of a matrix become the columns of its transpose.\n\n\n(transpose:array) MatrixTranspose matrix:array\n\n(transpose:array) Transpose matrix:array",
        "return": [
          "transpose",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixScale",
      "description": "Returns a matrix scaled by a number, that is, with every element multiplied by that number.",
      "example": {
        "raw": "MatrixScale\n- Returns a matrix scaled by a number, that is, with every element multiplied by that number.\n\n\n(scaledMatrix:array) MatrixScale scalar:float matrix:array\n\n(scaledMatrix:array) MatScale scalar:float matrix:array",
        "return": [
          "scaledMatrix",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixAdd",
      "description": "Returns the sum of two matrices, that is, a matrix where each element is the sum of the elements in the corresponding position in each of the addends. The two matrices must have the same dimensions.",
      "example": {
        "raw": "MatrixAdd\n- Returns the sum of two matrices, that is, a matrix where each element is the sum of the elements in the corresponding position in each of the addends. The two matrices must have the same dimensions.\n\n\n(sum:array) MatrixAdd addend:array addend:array\n\n(sum:array) MatAdd addend:array addend:array",
        "return": [
          "sum",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixSubtract",
      "description": "Returns the difference of two matrices, that is, a matrix where each element is the difference between the elements in the corresponding position in the terms. The two matrices must have the same dimensions.",
      "example": {
        "raw": "MatrixSubtract\n- Returns the difference of two matrices, that is, a matrix where each element is the difference between the elements in the corresponding position in the terms. The two matrices must have the same dimensions.\n\n\n(difference:array) MatrixSubtract minuend:array subtrahend:array\n\n(difference:array) MatSubtract minuend:array subtrahend:array",
        "return": [
          "difference",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MatrixMultiply",
      "description": "Returns the product of two matrices using ",
      "example": {
        "raw": "MatrixMultiply\n- Returns the product of two matrices using matrix multiplication. Matrix multiplication is not commutative, that is, order matters and AB != BA. In order to multiply two matrices, the width of the first factor must equal the height of the second.\n\n\n\nTwo one-dimensional arrays (as opposed to two-dimensional vectors) cannot be multiplied because a column vector multiplied by a row vector has a different result than if a row vector is multiplied by a column vector, even if all the values are the same. Therefore, at least one of the vectors must be represented as a two-dimensional array (usually using ForceRowVector) to remove this ambiguity (they do not both need to be two-dimensional as a column vector cannot be multiplied with another column vector, nor a row vector with another row vector, so there is no ambiguity).\n\n\n(product:array) MatrixMultiply factor:array factor:array\n\n(product:array) MatMult factor:array factor:array",
        "return": [
          "product",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "MessageEX",
      "description": "prints a formatted message using the extended ",
      "example": {
        "raw": "MessageEX - prints a formatted message using the extended format specifiers to the top-left corner of the screen.\n\nIt is recommended to pass a string_var to the vanilla function Message instead, unless you need the SetMessageSound or SetMessageIcon functions.\n\n(nothing) MessageEX formatString:string var1 var2 ... var20 duration:int",
        "return": [
          "essag"
        ],
        "params": []
      }
    },
    {
      "name": "MessageBoxEX",
      "description": "displays a formatted messagebox using the extended ",
      "example": {
        "raw": "MessageBoxEX - \ndisplays a formatted messagebox using the extended format specifiers. Format specifiers may appear within buttons. Button text should be included within the format string, separated by a pipe character when called from a script or the '@' character when called from the console.\n\n(nothing) MessageBoxEX formatString:string var1 var2 ... var20",
        "return": [
          "nothing"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "PrintToConsole",
      "description": "prints a formatted message to the console using the extended ",
      "example": {
        "raw": "PrintToConsole - prints a formatted message to the console using the extended format specifiers.\n\n(nothing) PrintToConsole formatString:string var1 var2 ... var20\n\n(nothing) PrintC formatString:string var1 var2 ... var20",
        "return": [
          "nothing"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "SetMessageSound",
      "description": "sets the sound which is to be played by the next call to ",
      "example": {
        "raw": "SetMessageSound - sets the sound which is to be played by the next call to MessageEX. The sound must be defined in the Sounds branch of the Object Window. Once MessageEX has been called the sound is cleared.\n\nNote: This function takes a string as soundID, not a ref, so it will not complain if the sound does not exist.\n\n(nothing) SetMessageSound soundID:string",
        "return": [
          "essageE"
        ],
        "params": []
      }
    },
    {
      "name": "SetMessageIcon",
      "description": "sets the icon which is to be displayed to the left of the text for the next call to ",
      "example": {
        "raw": "SetMessageIcon - sets the icon which is to be displayed to the left of the text for the next call to MessageEX. The icon is a .dds file located in the folder \"DataTexturesMenus\" or a subfolder thereof. Once MessageEX has been called the icon will be cleared.\n\nNote: The full path must be entered starting with \"Data\".\n\n(nothing) SetMessageIcon iconPath:string",
        "return": [
          "essageE"
        ],
        "params": []
      }
    },
    {
      "name": "DebugPrint",
      "description": "prints a message to the console only if debug mode has been enabled for the mod from which the calling script originates. Use ",
      "example": {
        "raw": "DebugPrint - prints a message to the console only if debug mode has been enabled for the mod from which the calling script originates. Use SetDebugMode to toggle debug messages on or off. \n\n(nothing) DebugPrint formatString:string var1 var2 ... var20",
        "return": [
          "etDebugMod"
        ],
        "params": []
      }
    },
    {
      "name": "SetDebugMode",
      "description": "toggles all debug messages on or off for the mod from which the calling script originates. Pass 1 as the argument to turn debug messages on, or 0 to turn them off. Optionally pass the modIndex of the mod for which you wish to toggle messages.",
      "example": {
        "raw": "SetDebugMode - toggles all debug messages on or off for the mod from which the calling script originates. Pass 1 as the argument to turn debug messages on, or 0 to turn them off. Optionally pass the modIndex of the mod for which you wish to toggle messages.\n\n(nothing) SetDebugMode EnableDebugMessages:bool modIndex:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "Print",
      "description": "prints a string expression to the console. This is mainly a convenience function to eliminate the need for temporary string variables when printing complex strings using ",
      "example": {
        "raw": "Print - prints a string expression to the console. This is mainly a convenience function to eliminate the need for temporary string variables when printing complex strings using PrintToConsole, as it supports string concatenation, the ToString function, etc.\n\n(nothing) Print string:expr",
        "return": [
          "rintToConsol"
        ],
        "params": []
      }
    },
    {
      "name": "PrintD",
      "description": "as ",
      "example": {
        "raw": "PrintD - as DebugPrint, but accepts any OBSE expression evaluating to a string\n\n(nothing) PrintD string:expr",
        "return": [
          "ebugPrin"
        ],
        "params": []
      }
    },
    {
      "name": "GetModIndex",
      "description": "returns the mod index of the specified plugin. This is equivalent to the first two digits of the object's formID (when represented in hexadecimal notation).",
      "example": {
        "raw": "GetModIndex - returns the mod index of the specified plugin. This is equivalent to the first two digits of the object's formID (when represented in hexadecimal notation).\n\n(index:int) GetModIndex modName:string",
        "return": [
          "index",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetSourceModIndex",
      "description": "returns the mod index of the plugin from which the specified object originates",
      "example": {
        "raw": "GetSourceModIndex - returns the mod index of the plugin from which the specified object originates\n\n(index:int) reference.GetSourceModIndex object:ref",
        "return": [
          "index",
          "int"
        ],
        "params": [
          "reference.GetSourceModIndex"
        ]
      }
    },
    {
      "name": "GetNumLoadedMods",
      "description": "returns the number of plugins currently loaded. Used in conjunction with GetModIndex, this can be used to verify load order at run-time.",
      "example": {
        "raw": "GetNumLoadedMods - returns the number of plugins currently loaded. Used in conjunction with GetModIndex, this can be used to verify load order at run-time.\n\n(loadedPluginCount:int) GetNumLoadedMods",
        "return": [
          "loadedPluginCount",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "IsModLoaded",
      "description": "returns 1 if the specified .esp or .esm is currently loaded. String is case-insensitive but must include the file extension.",
      "example": {
        "raw": "IsModLoaded - returns 1 if the specified .esp or .esm is currently loaded. String is case-insensitive but must include the file extension.\n\n(isLoaded:bool) IsModLoaded modName:string",
        "return": [
          "isLoaded",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetNthModName",
      "description": "returns the filename of the nth loaded mod",
      "example": {
        "raw": "GetNthModName - returns the filename of the nth loaded mod\n\n(name:string_var) GetNthModName modIndex:int",
        "return": [
          "name",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetModLocalData",
      "description": "sets the data value associated with the specified key for the mod to which the calling script belongs. The key must be a string; the data can be a string, number, or object. Keys are case-insensitive and unique - only one data value can be associated with a particular key. ",
      "example": {
        "raw": "SetModLocalData - sets the data value associated with the specified key for the mod to which the calling script belongs. The key must be a string; the data can be a string, number, or object. Keys are case-insensitive and unique - only one data value can be associated with a particular key. \n\n(success:bool) SetModLocalData key:string data:multi",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetModLocalData",
      "description": "gets the data value associated with the specified key for the mod to which the calling script belongs. If no data exists for the key, returns 0. ",
      "example": {
        "raw": "GetModLocalData - gets the data value associated with the specified key for the mod to which the calling script belongs. If no data exists for the key, returns 0. \n\n(data:multi) GetModLocalData key:string",
        "return": [
          "data",
          "multi"
        ],
        "params": []
      }
    },
    {
      "name": "ModLocalDataExists",
      "description": "returns true if local data exists with the specified key for the mod to which the calling script belongs. ",
      "example": {
        "raw": "ModLocalDataExists - returns true if local data exists with the specified key for the mod to which the calling script belongs. \n\n(exists:bool) ModLocalDataExists key:string",
        "return": [
          "exists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveModLocalData",
      "description": "removes the data value associated with the specified key for the mod to which the calling script belongs. If no data exists for the key, returns false, otherwise returns true. ",
      "example": {
        "raw": "RemoveModLocalData - removes the data value associated with the specified key for the mod to which the calling script belongs. If no data exists for the key, returns false, otherwise returns true. \n\n(removed:bool) RemoveModLocalData key:string",
        "return": [
          "removed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetAllModLocalData",
      "description": "returns a StringMap consisting of all of the name-value entries for the mod local data associated with the mod to which the calling script belongs. This is a copy of the local data so modifying the array contents will not modify the stored data. ",
      "example": {
        "raw": "GetAllModLocalData - returns a StringMap consisting of all of the name-value entries for the mod local data associated with the mod to which the calling script belongs. This is a copy of the local data so modifying the array contents will not modify the stored data. \n\n(data:StringMap) GetAllModLocalData",
        "return": [
          "data",
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "GetHotkeyItem",
      "description": "returns the item or spell bound to the specified hotkey (1-8)",
      "example": {
        "raw": "GetHotkeyItem - returns the item or spell bound to the specified hotkey (1-8)\n\n(itemOrSpell:ref) GetHotkeyItem whichHotkey:int",
        "return": [
          "itemOrSpell",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetHotkeyItem",
      "description": "sets a hotkey to the specified spell or item",
      "example": {
        "raw": "SetHotkeyItem - sets a hotkey to the specified spell or item\n\n(nothing) SetHotkeyItem whichHotkey:int spellOrItem:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ClearHotkey",
      "description": "removes any spell or item bound to the specified hotkey",
      "example": {
        "raw": "ClearHotkey - removes any spell or item bound to the specified hotkey\n\n(nothing) ClearHotkey whichHotkey:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "FileExists",
      "description": "returns 1 if the specified file exists in the user's installation folder or within one of the BSA archives. Path is relative to the user's install folder, which is \"Bethesda SoftworksOblivion\" by default.",
      "example": {
        "raw": "FileExists - returns 1 if the specified file exists in the user's installation folder or within one of the BSA archives. Path is relative to the user's install folder, which is \"Bethesda SoftworksOblivion\" by default.\n\n(fileExists:bool) FileExists filePath:string",
        "return": [
          "fileExists",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveMenuMode",
      "description": "returns the ",
      "example": {
        "raw": "GetActiveMenuMode - returns the menu code of the active menu. These are the same codes used by the MenuMode function.\n\n(menuCode:int) GetActiveMenuMode",
        "return": [
          "enuMod"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveMenuSelection",
      "description": "returns the item in the active menu over which the mouse is currently positioned",
      "example": {
        "raw": "GetActiveMenuSelection - returns the item in the active menu over which the mouse is currently positioned\n\n(activeItem:ref) GetActiveMenuSelection",
        "return": [
          "activeItem",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveMenuFilter",
      "description": "returns the ",
      "example": {
        "raw": "GetActiveMenuFilter - returns the code which indicates the current filteroptions for the active menu\n\n(filterCode:int) GetActiveMenuFilter menuType:int",
        "return": [
          "filterCode",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveMenuRef",
      "description": "returns the reference from which the active menu is derived",
      "example": {
        "raw": "GetActiveMenuRef - returns the reference from which the active menu is derived\n\n(menuRef:ref) GetActiveMenuRef menuType:int",
        "return": [
          "menuRef",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveMenuObject",
      "description": "returns the base object from which the active menu is derived",
      "example": {
        "raw": "GetActiveMenuObject - returns the base object from which the active menu is derived\n\n(menuObject:ref) GetActiveMenuObject menuType:int",
        "return": [
          "menuObject",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetEnchMenuSoulgem",
      "description": "returns the soulgem selected for enchantment in the enchantment menu. Only works if the enchantment menu is the active menu.",
      "example": {
        "raw": "GetEnchMenuSoulgem - returns the soulgem selected for enchantment in the enchantment menu. Only works if the enchantment menu is the active menu.\n\n(soulgem:ref) GetEnchMenuSoulgem",
        "return": [
          "soulgem",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetEnchMenuEnchItem",
      "description": "returns the enchantment which is to be applied to the item to be enchanted. Only works if the enchantment menu is the active menu.",
      "example": {
        "raw": "GetEnchMenuEnchItem - returns the enchantment which is to be applied to the item to be enchanted. Only works if the enchantment menu is the active menu.\n\n(enchantment:ref) GetEnchMenuEnchItem",
        "return": [
          "enchantment",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "IsBarterMenuActive",
      "description": "returns 1 if the player is bartering with a merchant, providing a way to distinguish between an ordinary container menu and a barter menu, which both return the same MenuMode code",
      "example": {
        "raw": "IsBarterMenuActive - returns 1 if the player is bartering with a merchant, providing a way to distinguish between an ordinary container menu and a barter menu, which both return the same MenuMode code\n\n(isBarterMode:bool) IsBarterMenuActive",
        "return": [
          "isBarterMode",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetAlchMenuIngredient",
      "description": "returns one of the four ingredients, from 0 to 3, selected for inclusion in the potion currently being brewed",
      "example": {
        "raw": "GetAlchMenuIngredient - returns one of the four ingredients, from 0 to 3, selected for inclusion in the potion currently being brewed\n\n(ingredient:ref) GetAlchMenuIngredient whichIngred:int",
        "return": [
          "ingredient",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetAlchMenuIngredientCount",
      "description": "returns the number of the specified ingredient selected for inclusion in the potion being brewed. Pass 0 for the first ingredient, 3 for the last.",
      "example": {
        "raw": "GetAlchMenuIngredientCount - returns the number of the specified ingredient selected for inclusion in the potion being brewed. Pass 0 for the first ingredient, 3 for the last.\n\n(count:int) GetAlchMenuIngredientCount whichIngred:int",
        "return": [
          "count",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetAlchMenuApparatus",
      "description": "returns the apparatus object being used in the brewing process",
      "example": {
        "raw": "GetAlchMenuApparatus - returns the apparatus object being used in the brewing process\n\n(apparatus:ref) GetAlchMenuApparatus apparatusType:int",
        "return": [
          "apparatus",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "CloseAllMenus",
      "description": "closes all currently open menus. Note: if the console is open at the time this function is called, it will be closed but the displayed console text will remain visible until the console is opened and closed again.",
      "example": {
        "raw": "CloseAllMenus - closes all currently open menus. Note: if the console is open at the time this function is called, it will be closed but the displayed console text will remain visible until the console is opened and closed again.\n\n(nothing) CloseAllMenus",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetContainerMenuView",
      "description": "when the container/barter menu is open, returns 1 if the player is viewing his own inventory, or 0 if viewing the container or merchant's inventory",
      "example": {
        "raw": "GetContainerMenuView - when the container/barter menu is open, returns 1 if the player is viewing his own inventory, or 0 if viewing the container or merchant's inventory\n\n(menuView:int) GetContainerMenuView",
        "return": [
          "menuView",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "SetButtonPressed",
      "description": "When any Message menu is displayed (game prompts such as the inventory quantity prompt as well as those created by the ",
      "example": {
        "raw": "SetButtonPressed - When any Message menu is displayed (game prompts such as the inventory quantity prompt as well as those created by the MessageBox function), forces the menu to behave as if the specified button was pressed. Button IDs range from 0 to 9.\n\n(nothing) SetButtonPressed buttonID:int",
        "return": [
          "essageBo"
        ],
        "params": []
      }
    },
    {
      "name": "IsGameMessageBox",
      "description": "returns 1 if a messagebox is currently displayed which was generated by game code (e.g., confirm item purchase) rather than a script",
      "example": {
        "raw": "IsGameMessageBox - returns 1 if a messagebox is currently displayed which was generated by game code (e.g., confirm item purchase) rather than a script\n\n(isGameMessage:bool) IsGameMessageBox",
        "return": [
          "isGameMessage",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetMessageBoxType",
      "description": "returns a code indicating the origin of the currently-displayed messagebox"
    },
    {
      "name": "GetMenuFloatValue",
      "description": "returns the value of a float or boolean trait of the specified menu",
      "example": {
        "raw": "GetMenuFloatValue - returns the value of a float or boolean trait of the specified menu\n\n(value:float) GetMenuFloatValue trait:formatString menuType:int",
        "return": [
          "value",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "GetMenuStringValue",
      "description": "returns the value of a string trait of the specified menu",
      "example": {
        "raw": "GetMenuStringValue - returns the value of a string trait of the specified menu\n\n(value:string_var) GetMenuStringValue trait:formatString menuType:int",
        "return": [
          "value",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "SetMenuFloatValue",
      "description": "sets the value of a float or boolean trait of the specified menu",
      "example": {
        "raw": "SetMenuFloatValue - sets the value of a float or boolean trait of the specified menu\n\n(nothing) SetMenuFloatValue trait:formatString menuType:intnewValue:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetMenuStringValue",
      "description": "sets the value of a string trait of the specified menu. The new value follows the trait name, separated from it by a pipe character. i.e. \"elementName\traitName|newValue\". (If calling from the console, replace the pipe character with the '@' character).",
      "example": {
        "raw": "SetMenuStringValue - sets the value of a string trait of the specified menu. The new value follows the trait name, separated from it by a pipe character. i.e. \"elementName\traitName|newValue\". (If calling from the console, replace the pipe character with the '@' character).\n\n(nothing) SetMenuStringValue traitAndNewValue:formatString menuType:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveUIComponentID",
      "description": "returns the integer ID of the menu elemented currently highlighted by the mouse cursor as defined by that element's <id> trait in the menu XML file.",
      "example": {
        "raw": "GetActiveUIComponentID - returns the integer ID of the menu elemented currently highlighted by the mouse cursor as defined by that element's &lt;id&gt; trait in the menu XML file.\n\n(id:int) GetActiveMenuComponentID",
        "return": [
          "id",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveUIComponentName",
      "description": "returns the name of the menu element currently highlighted by the mouse cursor as defined in the menu XML file.",
      "example": {
        "raw": "GetActiveUIComponentName - returns the name of the menu element currently highlighted by the mouse cursor as defined in the menu XML file.\n\n(name:string_var) GetActiveUIComponentName",
        "return": [
          "name",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "GetActiveUIComponentFullName",
      "description": "like GetActiveUIComponentName, returns the name of the menu element currently highlighted by the mouse cursor, if any. However the returned name is fully qualified with the names of the element's parents in a form suitable to pass to commands like GetMenuFloatValue. i.e., if button_1 is highlighted in the MessageMenu, this command returns \"background\button_1\".",
      "example": {
        "raw": "GetActiveUIComponentFullName - like GetActiveUIComponentName, returns the name of the menu element currently highlighted by the mouse cursor, if any. However the returned name is fully qualified with the names of the element's parents in a form suitable to pass to commands like GetMenuFloatValue. i.e., if button_1 is highlighted in the MessageMenu, this command returns \"background\button_1\".\n\n(name:string_var) GetActiveUIComponentFullName",
        "return": [
          "name",
          "string_var"
        ],
        "params": []
      }
    },
    {
      "name": "ClickMenuButton",
      "description": "simulates the user clicking on the specified UI component. Pass the fully qualified component name as described above, or pass the <id> trait of the desired component as specified in the XML, preceded by a '#'; i.e. \"",
      "example": {
        "raw": "ClickMenuButton - simulates the user clicking on the specified UI component. Pass the fully qualified component name as described above, or pass the &lt;id&gt; trait of the desired component as specified in the XML, preceded by a '#'; i.e. \"#32\" to click the button with ID 32. Note that specifying the name results in much better performance than specifying an ID.\n\n(nothing) ClickMenuButton componentName:formatString menuType:int",
        "return": [
          "3"
        ],
        "params": []
      }
    },
    {
      "name": "GetMenuHasTrait",
      "description": "returns 1 if the menu has the trait specified. The trait name may be qualified with component names to access traits of subcomponents.",
      "example": {
        "raw": "GetMenuHasTrait - returns 1 if the menu has the trait specified. The trait name may be qualified with component names to access traits of subcomponents.\n\n(hasTrait:bool) GetMenuHasTrait traitName:formatString menuType:int",
        "return": [
          "hasTrait",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetTileChildren",
      "description": "given a UI component (referred to by the game as a \"Tile\"), returns an Array containing the names of all of the direct subcomponents of that component. Using this command is more efficient than accessing children individually if you need to inspect more than one subcomponent.",
      "example": {
        "raw": "GetTileChildren - given a UI component (referred to by the game as a \"Tile\"), returns an Array containing the names of all of the direct subcomponents of that component. Using this command is more efficient than accessing children individually if you need to inspect more than one subcomponent.\n\n(children:Array) GetTileChildren parentTile:string menuType:int",
        "return": [
          "children",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "GetTileTraits",
      "description": "given a UI component, returns a StringMap representing all of that component's traits and their values. The keys of the returned StringMap's elements are the names of the traits; their values are the string or numeric values of the traits. This command is more efficient for accessing multiple traits of the same component than the commands which access traits individually.",
      "example": {
        "raw": "GetTileTraits - given a UI component, returns a StringMap representing all of that component's traits and their values. The keys of the returned StringMap's elements are the names of the traits; their values are the string or numeric values of the traits. This command is more efficient for accessing multiple traits of the same component than the commands which access traits individually.\n\n(traits:StringMap) GetTileTraits componentName:string menuType:int",
        "return": [
          "traits",
          "StringMap"
        ],
        "params": []
      }
    },
    {
      "name": "PrintTileInfo",
      "description": "a debugging command which outputs all of the children of a UI component as well as the names and values of all of its traits. Output is sent to the console and to obse.log. Avoid using this function in released mods; it is intended for testing and debugging only.",
      "example": {
        "raw": "PrintTileInfo - a debugging command which outputs all of the children of a UI component as well as the names and values of all of its traits. Output is sent to the console and to obse.log. Avoid using this function in released mods; it is intended for testing and debugging only.\n\n(nothing) PrintTileInfo componentName:string menuType:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "PrintActiveTileInfo",
      "description": "a debugging command which outputs all of the children of the UI component currently under the mouse cursor as well as the names and values of all of its traits. Output is sent to the console and to obse.log. Avoid using this function in released mods; it is intended for testing and debugging only.",
      "example": {
        "raw": "PrintActiveTileInfo - a debugging command which outputs all of the children of the UI component currently under the mouse cursor as well as the names and values of all of its traits. Output is sent to the console and to obse.log. Avoid using this function in released mods; it is intended for testing and debugging only.\n\n(nothing) PrintActiveTileInfo",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetMapMenuMarkerName",
      "description": "when the world map menu is visible and a location icon is highlighted by the mouse, this command returns the name of the highlighted icon. At all other times it returns an empty string.",
      "example": {
        "raw": "GetMapMenuMarkerName - when the world map menu is visible and a location icon is highlighted by the mouse, this command returns the name of the highlighted icon. At all other times it returns an empty string.\n\n(markerName:string) GetMapMenuMarkerName",
        "return": [
          "markerName",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "GetMapMenuMarkerRef",
      "description": "when the world map menu is visible and a location icon is highlighted by the mouse, this command returns a reference to the MapMarker reference associated with the highlighted icon. This is a slow function, so avoid calling it repeatedly. If you want to detect changes in the currently highlighted map icon, it is best to check GetMapMenuMarkerName over the course of several frames, and only call GetMapMenuMarkerRef if the name changes and is not an empty string.",
      "example": {
        "raw": "GetMapMenuMarkerRef - when the world map menu is visible and a location icon is highlighted by the mouse, this command returns a reference to the MapMarker reference associated with the highlighted icon. This is a slow function, so avoid calling it repeatedly. If you want to detect changes in the currently highlighted map icon, it is best to check GetMapMenuMarkerName over the course of several frames, and only call GetMapMenuMarkerRef if the name changes and is not an empty string.\n\n(markerRef:ref) GetMapMenuMarkerRef",
        "return": [
          "markerRef",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetBarterItem",
      "description": "returns the active item in a container menu",
      "example": {
        "raw": "GetBarterItem - returns the active item in a container menu\n\n(item:ref) GetBarterItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetBarterItemQuantity",
      "description": "returns the selected quantity of the active item in a container menu",
      "example": {
        "raw": "GetBarterItemQuantity - returns the selected quantity of the active item in a container menu\n\n() GetBarterItemQuantity",
        "return": [
          ""
        ],
        "params": []
      }
    },
    {
      "name": "GetLastTransactionItem",
      "description": "returns the item most recently confirmed for buying or selling by the player. Note that this transaction may not have been completed due to the purchaser having insufficient gold or attempting to sell a quest item. Use ",
      "example": {
        "raw": "GetLastTransactionItem - returns the item most recently confirmed for buying or selling by the player. Note that this transaction may not have been completed due to the purchaser having insufficient gold or attempting to sell a quest item. Use GetTransactionInfo for more accurate information.\n\n(item:ref) GetLastTransactionItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetLastTransactionQuantity",
      "description": "returns the quantity of the most recent buy/sell transaction confirmed by the player. Note that the transaction may not have been completed due to the purchaser having insufficient gold or attempting to sell a quest item. Use ",
      "example": {
        "raw": "GetLastTransactionQuantity - returns the quantity of the most recent buy/sell transaction confirmed by the player. Note that the transaction may not have been completed due to the purchaser having insufficient gold or attempting to sell a quest item. Use GetTransactionInfo for more accurate information.\n\n(quantity:short) GetLastTransactionQuantity",
        "return": [
          "quantity",
          "short"
        ],
        "params": []
      }
    },
    {
      "name": "GetTransactionInfo",
      "description": "returns information about the most recent barter transaction completed by the player as a Stringmap. Specify \"buy\" for information about the player's most recent purchase, or \"sell\" for his most recent sale to a merchant. Once a transaction has been returned to a particular script, subsequent calls to this function requesting the same type of transaction (\"buy\" or \"sell\") will return zero until a new transaction of that type takes place. The returned Stringmap contains the following information:",
      "example": {
        "raw": "GetTransactionInfo - returns information about the most recent barter transaction completed by the player as a Stringmap. Specify \"buy\" for information about the player's most recent purchase, or \"sell\" for his most recent sale to a merchant. Once a transaction has been returned to a particular script, subsequent calls to this function requesting the same type of transaction (\"buy\" or \"sell\") will return zero until a new transaction of that type takes place. The returned Stringmap contains the following information:\n\n\t\"seller\" (ref): The actor who sold the item\n\t\"buyer\" (ref): The actor who purchased the item\n\t\"item\" (base object): The item purchased or sold\n\t\"quantity\" (short): The number of items purchased or sold\n\t\"price\" (short): The total cost of the transaction\n\n(transactionInfo:Stringmap) GetTransactionInfo transactionType:string",
        "return": [
          "transactionInfo",
          "Stringmap"
        ],
        "params": []
      }
    },
    {
      "name": "GetQMCurrent (GetQuantityMenuCurrentQuantity)",
      "description": "returns the current quantity in the quantity menu",
      "example": {
        "raw": "GetQMCurrent (GetQuantityMenuCurrentQuantity) - returns the current quantity in the quantity menu\n\n(quantity:int) GetQMCurrent",
        "return": [
          "quantity",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetQMMaximum (GetQuantityMenuMaximumQuantity)",
      "description": "returns the maximum quantity in the quantity menu",
      "example": {
        "raw": "GetQMMaximum (GetQuantityMenuMaximumQuantity) - returns the maximum quantity in the quantity menu\n\n(maxQuantity:int) GetQMMaximum",
        "return": [
          "maxQuantity",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "GetQMItem (GetQuantityMenuItem)",
      "description": "returns the active item in the quantity menu",
      "example": {
        "raw": "GetQMItem (GetQuantityMenuItem) - returns the active item in the quantity menu\n\n(item:ref) GetQMItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetClassMenuSelectedClass",
      "description": "while the class selection menu is visible, returns the class which would be selected by the player if he were to click 'Done'.",
      "example": {
        "raw": "GetClassMenuSelectedClass - while the class selection menu is visible, returns the class which would be selected by the player if he were to click 'Done'.\n\n(class:ref) GetClassMenuSelectedClass",
        "return": [
          "class",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetClassMenuHighlightedClass",
      "description": "while the class selection menu is visible, returns the class over which the cursor is currently positioned, if any.",
      "example": {
        "raw": "GetClassMenuHighlightedClass - while the class selection menu is visible, returns the class over which the cursor is currently positioned, if any.\n\n(class:ref) GetClassMenuHighlightedClass",
        "return": [
          "class",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetEnchMenuBaseItem",
      "description": "while the enchantment menu is visible, returns the unenchanted item selected by the player as the target of the enchantment.",
      "example": {
        "raw": "GetEnchMenuBaseItem - while the enchantment menu is visible, returns the unenchanted item selected by the player as the target of the enchantment.\n\n(item:ref) GetEnchMenuBaseItem",
        "return": [
          "item",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "UpdateContainerMenu",
      "description": "if called while a container or barter menu is displayed, updates the contents of the menu. In barter mode this recalculates prices and quantities of available items.",
      "example": {
        "raw": "UpdateContainerMenu - if called while a container or barter menu is displayed, updates the contents of the menu. In barter mode this recalculates prices and quantities of available items.\n\n(nothing) UpdateContainerMenu",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "UpdateSpellPurchaseMenu",
      "description": "when called while the spell purchase menu is visible, updates the contents of the menu to reflect changes in prices",
      "example": {
        "raw": "UpdateSpellPurchaseMenu - when called while the spell purchase menu is visible, updates the contents of the menu to reflect changes in prices\n\n(nothing) UpdateSpellPurchaseMenu",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "OpenTextInput",
      "description": "opens a text input menu if one is not currently in use. MenuType is 0 for a messagebox, 1 for a book, or 2 for a scroll. The MaxLength parameter specifies how many characters to allow the user to enter. For messageboxes, the prompt string will be displayed before the cursor and cannot be erased. It may also contain buttons, with the button text separated from the prompt text with pipe '|' characters as in ",
      "example": {
        "raw": "OpenTextInput - opens a text input menu if one is not currently in use. MenuType is 0 for a messagebox, 1 for a book, or 2 for a scroll. The MaxLength parameter specifies how many characters to allow the user to enter. For messageboxes, the prompt string will be displayed before the cursor and cannot be erased. It may also contain buttons, with the button text separated from the prompt text with pipe '|' characters as in MessageBoxEX. For books and scrolls, the prompt string serves as the default text visible as soon as the menu is opened and may be edited by the user.\n\n(nothing) OpenTextInput promptString:string var1 var2 ... var20 menuType:int maxLength:int",
        "return": [
          "essageBoxE"
        ],
        "params": []
      }
    },
    {
      "name": "IsTextInputInUse",
      "description": "returns 1 if a script is currently using a text input menu, regardless of whether or not the menu is visible. Only one script may request text input at a time.",
      "example": {
        "raw": "IsTextInputInUse - returns 1 if a script is currently using a text input menu, regardless of whether or not the menu is visible. Only one script may request text input at a time.\n\n(isInUse:bool) IsTextInputInUse",
        "return": [
          "isInUse",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetInputText",
      "description": "returns the text entered by the user. You may call this function at any point before calling ",
      "example": {
        "raw": "GetInputText - returns the text entered by the user. You may call this function at any point before calling CloseTextInput. Note that the returned string includes any html formatting inserted by the user. It also includes an html prefix along the lines of &lt;FONT face=\"#\"&gt;&lt;div align=\"align\"&gt;.\n\n(inputText:string_var) GetInputText",
        "return": [
          "loseTextInpu"
        ],
        "params": []
      }
    },
    {
      "name": "UpdateTextInput",
      "description": "tells the text input menu to check for user input and refresh the displayed text if necessary. In general, unless you want to temporarily disallow input, this command should be called every frame while the text input menu is open.",
      "example": {
        "raw": "UpdateTextInput - tells the text input menu to check for user input and refresh the displayed text if necessary. In general, unless you want to temporarily disallow input, this command should be called every frame while the text input menu is open.\n\n(nothing) UpdateTextInput",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "CloseTextInput",
      "description": "closes the text input menu, releasing it for use by other scripts. Be sure to call this command when you are done getting input.",
      "example": {
        "raw": "CloseTextInput - closes the text input menu, releasing it for use by other scripts. Be sure to call this command when you are done getting input.\n\n(nothing) CloseTextInput",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "InsertInInputText",
      "description": "inserts formatted text at the current cursor position in the text input menu, as long as doing so would not increase the length of the text beyond its maximum length.",
      "example": {
        "raw": "InsertInInputText - inserts formatted text at the current cursor position in the text input menu, as long as doing so would not increase the length of the text beyond its maximum length.\n\n(nothing) InsertInInputText formatString:string var1 var2 ... var20",
        "return": [
          "nothing"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "GetTextInputControlPressed",
      "description": "allows scripters to define custom controls for text input. Returns the scan code of the last key pressed in conjunction with the CTRL key, excluding those keys reserved for use by the text input menu. Once the code has been retrieved, subsequent calls to this command will return -1; it will also return -1 if no control has been pressed (similar to ",
      "example": {
        "raw": "GetTextInputControlPressed - allows scripters to define custom controls for text input. Returns the scan code of the last key pressed in conjunction with the CTRL key, excluding those keys reserved for use by the text input menu. Once the code has been retrieved, subsequent calls to this command will return -1; it will also return -1 if no control has been pressed (similar to GetButtonPressed).\n\n(scanCode:int) GetTextInputControlPressed",
        "return": [
          "etButtonPresse"
        ],
        "params": []
      }
    },
    {
      "name": "DeleteFromInputText",
      "description": "deletes a number of characters or words from the input text in the direction specified, beginning from the current cursor position. Note that an html tag is treated as both a word and a character (it is not possible to delete only part of a tag). Both optional parameters are false by default.",
      "example": {
        "raw": "DeleteFromInputText - deletes a number of characters or words from the input text in the direction specified, beginning from the current cursor position. Note that an html tag is treated as both a word and a character (it is not possible to delete only part of a tag). Both optional parameters are false by default.\n\n(nothing) DeleteFromInputText numToDelete:int bBackwards:bool bDeleteWholeWords:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetTextInputCursorPos",
      "description": "returns the current position of the cursor as an index into the input string",
      "example": {
        "raw": "GetTextInputCursorPos - returns the current position of the cursor as an index into the input string\n\n(cursorPos:int) GetTextInputCursorPos",
        "return": [
          "cursorPos",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "MoveTextInputCursor",
      "description": "moves the cursor a specified number of characters in the specified direction from its current position. Note that each html tag is treated as a single character.",
      "example": {
        "raw": "MoveTextInputCursor - moves the cursor a specified number of characters in the specified direction from its current position. Note that each html tag is treated as a single character.\n\n(nothing) MoveTextInputCursor numChars:int moveBackwards:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetInputText",
      "description": "replaces any text which has been input by the user with the specified text and repositions the cursor to the specified position. If the specified position is invalid (e.g. greater than the length of the text, or inside an html tag), returns false without modifying the input text; otherwise returns true. For books, the text must be in an appropriate format - no invalid html tags should be present and the text must be prefixed with html of the format ",
      "example": {
        "raw": "SetInputText - replaces any text which has been input by the user with the specified text and repositions the cursor to the specified position. If the specified position is invalid (e.g. greater than the length of the text, or inside an html tag), returns false without modifying the input text; otherwise returns true. For books, the text must be in an appropriate format - no invalid html tags should be present and the text must be prefixed with html of the format &lt;FONT face=\"#\"&gt;&lt;div align=\"align\"&gt;\n\n(textSet:bool) SetInputText text:string newCursorPos:int",
        "return": [
          "lt;FON"
        ],
        "params": []
      }
    },
    {
      "name": "SetTextInputHandler",
      "description": "registers a function script to handle control-key combos pressed while the current text input menu is active. The function script should accept a single integer argument; when a key is pressed in conjunction with the Control key, that key's scan code will be passed to the function script. The script will not be informed of control-key combos which are handled by OBSE (for instance, ctrl+5 to change to font #5) unless the default controls have been disabled with SetTextInputDefaultControlsDisabled. The function script is unregistered when the text input menu is closed.",
      "example": {
        "raw": "SetTextInputHandler - registers a function script to handle control-key combos pressed while the current text input menu is active. The function script should accept a single integer argument; when a key is pressed in conjunction with the Control key, that key's scan code will be passed to the function script. The script will not be informed of control-key combos which are handled by OBSE (for instance, ctrl+5 to change to font #5) unless the default controls have been disabled with SetTextInputDefaultControlsDisabled. The function script is unregistered when the text input menu is closed.\n\n(nothing) SetTextInputHandler functionScript:ref",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetTextInputDefaultControlsDisabled",
      "description": "sets whether or not OBSE responds to control-key combos it recognizes, such as ctrl+(number) for changing the font. While default controls are disabled, they will be passed to the function script registered with SetTextInputHandler or stored for retrieval using GetTextInputControlPressed. This setting is reset when the text input menu is closed.",
      "example": {
        "raw": "SetTextInputDefaultControlsDisabled - sets whether or not OBSE responds to control-key combos it recognizes, such as ctrl+(number) for changing the font. While default controls are disabled, they will be passed to the function script registered with SetTextInputHandler or stored for retrieval using GetTextInputControlPressed. This setting is reset when the text input menu is closed.\n\n(nothing) SetTextInputDefaultControlsDisabled disableDefaultControls:bool",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Construct",
      "description": "constructs a string from a format string and set of variables and assigns the result to a string variable.",
      "example": {
        "raw": "sv_Construct - constructs a string from a format string and set of variables and assigns the result to a string variable.\n\nWhile mostly no longer needed due to OBSE expressions being able to handle string operations, there are some uses for this still. Most noteably when OBSE expressions can't be used, like in custom ini files, or when certain format specifiers are needed.\n\n(nothing) sv_Construct formatString:string var1 var2 ... var20 variableToSet:string_var",
        "return": [
          "nothing"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "sv_Destruct",
      "description": "destroys a string variable, setting its value to zero and preventing its contents from being saved in the savegame. Two different syntaxes are supported: the first should be used in an assignment with no parameters, using the ",
      "example": {
        "raw": "sv_Destruct - destroys a string variable, setting its value to zero and preventing its contents from being saved in the savegame. Two different syntaxes are supported: the first should be used in an assignment with no parameters, using the Set keyword: set stringVar to sv_Destruct. The second is used without assignment and accepts up to ten string variables as arguments, destroying them all: sv_Destruct var1 var2 ... var10.\n\n(string_var) sv_Destruct\n\n(nothing) sv_Destruct var1:string_var var2:string_var ... var10:string_var",
        "return": [
          "e"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Length",
      "description": "returns the number of characters in a string variable",
      "example": {
        "raw": "sv_Length - returns the number of characters in a string variable\n\n(length:int) sv_Length variable:string_var",
        "return": [
          "length",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Compare",
      "description": "compares a string to a formatted string. Performs a case-insensitive comparison by default. Returns 0 if the strings are equal, 1 if the string variable occurs alphabetically before the formatted string, -1 if the string variable occurs alphabetically after the formatted string, or -2 if the comparison fails.",
      "example": {
        "raw": "sv_Compare - compares a string to a formatted string. Performs a case-insensitive comparison by default. Returns 0 if the strings are equal, 1 if the string variable occurs alphabetically before the formatted string, -1 if the string variable occurs alphabetically after the formatted string, or -2 if the comparison fails.\n\n(comparison:int) sv_Compare formatString:string var1 var2 ... var20 variable:string_var caseSensitive:bool",
        "return": [
          "comparison",
          "int"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "sv_Erase",
      "description": "erases the specified number of characters from a string starting at the specified position. If omitted, ",
      "example": {
        "raw": "sv_Erase - erases the specified number of characters from a string starting at the specified position. If omitted, startPos = 0. Omitting numToErase erases all characters from startPos to the end of the string.\n\n(nothing) sv_Erase variable:string_var startPos:int numToErase:int",
        "return": [
          "tartPo"
        ],
        "params": []
      }
    },
    {
      "name": "sv_ToNumeric",
      "description": "attempts to convert the contents of a string variable to a number. Valid characters include digits, a leading sign, and an e to indicate scientific notation. Conversion halts at the first invalid character.",
      "example": {
        "raw": "sv_ToNumeric - attempts to convert the contents of a string variable to a number. Valid characters include digits, a leading sign, and an e to indicate scientific notation. Conversion halts at the first invalid character.\n\n(float) sv_ToNumeric sourceString:string_var",
        "return": [
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Find",
      "description": "returns the index of the first occurrence of a substring within a string variable, starting at the specified position and only including occurrences contained completely within the range [",
      "example": {
        "raw": "sv_Find - returns the index of the first occurrence of a substring within a string variable, starting at the specified position and only including occurrences contained completely within the range [startPos, startPos + searchLen]. Omit the arguments to search the entire string without regard to case.\n\n(index:int) sv_Find subString:formatString formatVars source:string_var startPos:int searchLen:int caseSensitive:bool",
        "return": [
          "index",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Count",
      "description": "returns the number of occurrences of a substring within a string variable, using the same arguments as ",
      "example": {
        "raw": "sv_Count - returns the number of occurrences of a substring within a string variable, using the same arguments as sv_Find.\n\n(count:int) sv_Count subString:formatString formatVars source:string_var startPos:int searchLen:int",
        "return": [
          "v_Fin"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Replace",
      "description": "replaces occurrences of a string1 with string2 within a string variable. Both the text to replace and that with which to replace it are passed in a single format string separated by a pipe character as in \"toReplace|replaceWith\" (when calling from the console, use '@' in place of the pipe character). You can specify a range to search and case-sensitivity as in ",
      "example": {
        "raw": "sv_Replace - replaces occurrences of a string1 with string2 within a string variable. Both the text to replace and that with which to replace it are passed in a single format string separated by a pipe character as in \"toReplace|replaceWith\" (when calling from the console, use '@' in place of the pipe character). You can specify a range to search and case-sensitivity as in sv_Find, plus an additional final argument specify how many occurrences to replace. By default, the command replaces all occurrences.\n\n(numReplaced:int) sv_Replace subString:formatString formatVars source:string_var startPos:int searchLen:int caseSensitive:bool numToReplace:int",
        "return": [
          "v_Fin"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Insert",
      "description": "inserts a substring into a string at the specified position, provided the position is less than the length of the string, or prepends it if no position is specified.",
      "example": {
        "raw": "sv_Insert - inserts a substring into a string at the specified position, provided the position is less than the length of the string, or prepends it if no position is specified.\n\n(nothing) sv_Insert subString:formatString formatVars targetString:string_var insertPos:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Split",
      "description": "given a string and a set of delimiters, returns an Array containing all the substrings separated by one or more of the delimiting characters. For example, ",
      "example": {
        "raw": "sv_Split - given a string and a set of delimiters, returns an Array containing all the substrings separated by one or more of the delimiting characters. For example, sv_Split \"#This is.a##. string.\" \".# \" returns { \"This\", \"is\", \"a\", \"string\" }. The '.', '#', and space characters are removed.\n\n(substrings:Array) sv_Split toSplit:string delimiters:string",
        "return": [
          "v_Spli"
        ],
        "params": [
          "is.a##.",
          "string.\"",
          "\".#"
        ]
      }
    },
    {
      "name": "GetKeyName",
      "description": "returns the name of a key given its DirectInput scan code",
      "example": {
        "raw": "GetKeyName - returns the name of a key given its DirectInput scan code\n\n(keyName:string) GetKeyName keycode:int",
        "return": [
          "keyName",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "AsciiToChar",
      "description": "returns the character associated with an ASCII code as a string",
      "example": {
        "raw": "AsciiToChar - returns the character associated with an ASCII code as a string\n\n(character:string) AsciiToChar asciiCode:int",
        "return": [
          "character",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "NumToHex",
      "description": "returns a string representation of an integer in hexadecimal format. An optional ",
      "example": {
        "raw": "NumToHex - returns a string representation of an integer in hexadecimal format. An optional width parameter ranging from 0 to 8 specifies the minimum number of digits toinclude; unused digits are padded with zeroes. By default, 8 digits are included.\n\n(hex:string) NumToHex num:int width:int",
        "return": [
          "hex",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "sv_Percentify",
      "description": "Takes an input string and returns it with each '%' character replaced by two '%' characters. For instance, \"100% gold\" becomes \"100%% gold\" and \"99.99%%\" becomes \"99.99%%%%\". The argument can be any expression evaluating to a string value.",
      "example": {
        "raw": "sv_Percentify - Takes an input string and returns it with each '%' character replaced by two '%' characters. For instance, \"100% gold\" becomes \"100%% gold\" and \"99.99%%\" becomes \"99.99%%%%\". The argument can be any expression evaluating to a string value.\n\n(percentified:string) sv_Percentify source:string",
        "return": [
          "percentified",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "sv_ToLower",
      "description": "returns the passed string with all characters converted to lowercase.",
      "example": {
        "raw": "sv_ToLower - returns the passed string with all characters converted to lowercase.\n\n(lower:string) sv_ToLower source:string ",
        "return": [
          "lower",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "sv_ToUpper",
      "description": "returns the passed string with all characters converted to uppercase.",
      "example": {
        "raw": "sv_ToUpper - returns the passed string with all characters converted to uppercase.\n\n(upper:string) sv_ToUpper source:string ",
        "return": [
          "upper",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "IsDigit",
      "description": "returns 1 if the character is a digit",
      "example": {
        "raw": "IsDigit - returns 1 if the character is a digit\n\n(isDigit:bool) IsDigit character:int",
        "return": [
          "isDigit",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsPunctuation",
      "description": "returns 1 if the character is punctuation",
      "example": {
        "raw": "IsPunctuation - returns 1 if the character is punctuation\n\n(isPunctuation:bool) IsPunctuation character:int",
        "return": [
          "isPunctuation",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsUppercase",
      "description": "returns 1 if the character is an uppercase letter",
      "example": {
        "raw": "IsUppercase - returns 1 if the character is an uppercase letter\n\n(isUpper:bool) IsUppercase character:int",
        "return": [
          "isUpper",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsPrintable",
      "description": "returns 1 if the character is printable (not a non-printable control character)",
      "example": {
        "raw": "IsPrintable - returns 1 if the character is printable (not a non-printable control character)\n\n(isPrint:bool) IsPrintable character:int",
        "return": [
          "isPrint",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "IsLetter",
      "description": "returns 1 if the character is alphabetic",
      "example": {
        "raw": "IsLetter - returns 1 if the character is alphabetic\n\n(isLetter:bool) IsLetter character:int",
        "return": [
          "isLetter",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "CharToASCII",
      "description": "returns the ASCII code of a character passed as a string. Additional characters in the string are ignored.",
      "example": {
        "raw": "CharToASCII - returns the ASCII code of a character passed as a string. Additional characters in the string are ignored.\n\n(character:int) CharToASCII character:string",
        "return": [
          "character",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ToUpper",
      "description": "returns the ASCII code of a character converted to uppercase",
      "example": {
        "raw": "ToUpper - returns the ASCII code of a character converted to uppercase\n\n(upperCharacter:int) ToUpper character:int",
        "return": [
          "upperCharacter",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ToLower",
      "description": "returns the ASCII code of a character converted to lowercase",
      "example": {
        "raw": "ToLower - returns the ASCII code of a character converted to lowercase\n\n(lowerCharacter:int) ToLower character:int",
        "return": [
          "lowerCharacter",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ToNumber",
      "description": "takes a string expression and attempts to convert it to a numeric value. By default the string is assumed to be in decimal notation containing digits, at most one decimal point, and an optional leading sign. If the string is prefixed with \"0x\" or the optional argument is non-zero, the string is interpreted in hexadecimal notation instead, with valid characters consisting of digits and the letters 'A' through 'F'. Returns 0 if the conversion fails.",
      "example": {
        "raw": "ToNumber - takes a string expression and attempts to convert it to a numeric value. By default the string is assumed to be in decimal notation containing digits, at most one decimal point, and an optional leading sign. If the string is prefixed with \"0x\" or the optional argument is non-zero, the string is interpreted in hexadecimal notation instead, with valid characters consisting of digits and the letters 'A' through 'F'. Returns 0 if the conversion fails.\n\n(number:float) ToNumber expression:string bIsHex:bool",
        "return": [
          "number",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Construct",
      "description": "creates a new array_var and assigns it to an array variable. Must be called within the context of an OBSE expression such as ",
      "example": {
        "raw": "ar_Construct - creates a new array_var and assigns it to an array variable. Must be called within the context of an OBSE expression such as Let. The parameter specifies the type of array to create: StringMap, Map, or Array. See the above section for more information on the different types of array variables.\n\n(array_var) ar_Construct arrayType:string",
        "return": [
          "e"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Size",
      "description": "returns the number of elements in an array, or -1 if the array is not initialized. For Array-type variables the highest key in the array is equal to one less than the array's size. Must be called within the context of an OBSE expression. The array can be an array variable or an array element which contains an array.",
      "example": {
        "raw": "ar_Size - returns the number of elements in an array, or -1 if the array is not initialized. For Array-type variables the highest key in the array is equal to one less than the array's size. Must be called within the context of an OBSE expression. The array can be an array variable or an array element which contains an array.\n\n(size:int) ar_Size array:array_var",
        "return": [
          "size",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Dump",
      "description": "for debugging purposes, prints the key and value of every element in an array to the console. Must be called within an OBSE expression.",
      "example": {
        "raw": "ar_Dump - for debugging purposes, prints the key and value of every element in an array to the console. Must be called within an OBSE expression.\n\n(nothing) ar_Dump array:array_var",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ar_DumpID",
      "description": "does the same as ar_Dump but accepts an array ID instead of an array_var. Provided as a convenience for debugging in the console.",
      "example": {
        "raw": "ar_DumpID - does the same as ar_Dump but accepts an array ID instead of an array_var. Provided as a convenience for debugging in the console.\n\n(nothing) ar_DumpID arrayID:int",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Find",
      "description": "locates the first occurrence of the specified value within an array and returns the key associated with it. A range may optionally be specified using range notation, i.e. ",
      "example": {
        "raw": "ar_Find - locates the first occurrence of the specified value within an array and returns the key associated with it. A range may optionally be specified using range notation, i.e. let key := ar_Find \"tofind\" arrayVar lowerBound:upperBound. If the value is not found, the function returns an empty string (for string-indexed arrays) or the value -99999.0 (for numeric-index arrays).\n\n(key:stringOrNumber) ar_Find value:stringOrNumberOrForm arrayToSearch:array inRange:range",
        "return": [
          "e"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Sort",
      "description": "attempts to sort the elements of an array in ascending or descending order and returns a new Array containing the elements in sorted order (keys associated with the elements are lost). In order to be sorted all elements of an array must be of the same type (strings, numbers, or objects). If this condition is not met an empty Array is returned. Strings are sorted alphabetically and case-insensitively, numbers are sorted numerically, and objects are sorted by formID. By default the elements are sorted in ascending order.",
      "example": {
        "raw": "ar_Sort - attempts to sort the elements of an array in ascending or descending order and returns a new Array containing the elements in sorted order (keys associated with the elements are lost). In order to be sorted all elements of an array must be of the same type (strings, numbers, or objects). If this condition is not met an empty Array is returned. Strings are sorted alphabetically and case-insensitively, numbers are sorted numerically, and objects are sorted by formID. By default the elements are sorted in ascending order.\n\n(sortedArray:Array) ar_Sort toSort:array sortDescending:bool",
        "return": [
          "sortedArray",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "ar_SortAlpha",
      "description": "sorts the elements of an array alphabetically in ascending or descending order and returns a new Array containing the elements in sorted order. Ordering is case-insensitive. Unlike ",
      "example": {
        "raw": "ar_SortAlpha - sorts the elements of an array alphabetically in ascending or descending order and returns a new Array containing the elements in sorted order. Ordering is case-insensitive. Unlike ar_Sort, does not require elements to be of the same type - numeric elements are converted to a string representation, and forms are sorted by their names (if named) or the string representation of their formIDs. Omitting the optional parameter causes elements to be sorted in ascending order.\n\n(sortedArray:Array) ar_SortAlpha toSort:array sortDescending:bool",
        "return": [
          "r_Sor"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Copy",
      "description": "creates a copy of the keys and elements of the specified array. The resulting array is identical to the source array. If the source array contains other arrays, the copy will contain ",
      "example": {
        "raw": "ar_Copy - creates a copy of the keys and elements of the specified array. The resulting array is identical to the source array. If the source array contains other arrays, the copy will contain references to those same arrays.\n\n(copy:array) ar_Copy src:array",
        "return": [
          "copy",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "ar_DeepCopy",
      "description": "performs the same function as ",
      "example": {
        "raw": "ar_DeepCopy - performs the same function as ar_Copy, except any arrays contained within the source array are also copied (and any arrays within those arrays are copied as well, and so on).\n\n(copy:array) ar_DeepCopy src:array",
        "return": [
          "r_Cop"
        ],
        "params": []
      }
    },
    {
      "name": "ar_First",
      "description": "returns the key of the first element in an array",
      "example": {
        "raw": "ar_First - returns the key of the first element in an array\n\n(key:arrayKey) ar_First src:array",
        "return": [
          "key",
          "arrayKey"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Last",
      "description": "returns the key of the last element in an array",
      "example": {
        "raw": "ar_Last - returns the key of the last element in an array\n\n(key:arrayKey) ar_Last src:array",
        "return": [
          "key",
          "arrayKey"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Next",
      "description": "returns the key of the element immediately following the passed key, or ",
      "example": {
        "raw": "ar_Next - returns the key of the element immediately following the passed key, or BadIndex if no key follows it\n\n(key:arrayKey) ar_Next src:array precedingKey:arrayKey",
        "return": [
          "adInde"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Prev",
      "description": "returns the key of the element immediately preceding the passed key, or ",
      "example": {
        "raw": "ar_Prev - returns the key of the element immediately preceding the passed key, or BadIndex if no key precedes it\n\n(key:arrayKey) ar_Prev src:array prevKey:arrayKey",
        "return": [
          "adInde"
        ],
        "params": []
      }
    },
    {
      "name": "ar_BadNumericIndex",
      "description": "returns a constant representing an invalid numeric array index. Compare to the return value of commands returning an array key to determine if a valid key was returned.",
      "example": {
        "raw": "ar_BadNumericIndex - returns a constant representing an invalid numeric array index. Compare to the return value of commands returning an array key to determine if a valid key was returned.\n\n(badKey:int) ar_BadNumericIndex",
        "return": [
          "badKey",
          "int"
        ],
        "params": []
      }
    },
    {
      "name": "ar_BadStringIndex",
      "description": "as above, but for string array keys",
      "example": {
        "raw": "ar_BadStringIndex - as above, but for string array keys\n\n(badKey:string) ar_BadStringIndex",
        "return": [
          "badKey",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Keys",
      "description": "returns an Array containing all of the keys of the source array",
      "example": {
        "raw": "ar_Keys - returns an Array containing all of the keys of the source array\n\n(keys:Array) ar_Keys src:array",
        "return": [
          "keys",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "ar_HasKey",
      "description": "returns true if the array has an element with the specified key",
      "example": {
        "raw": "ar_HasKey - returns true if the array has an element with the specified key\n\n(hasKey:bool) ar_HasKey src:array key:arrayKey",
        "return": [
          "hasKey",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Null",
      "description": "returns an invalid array. This is useful if you wish to specify that a variable which previously referred to an array should no longer refer to any array.",
      "example": {
        "raw": "ar_Null - returns an invalid array. This is useful if you wish to specify that a variable which previously referred to an array should no longer refer to any array.\n\n(nullArray:array) ar_Null",
        "return": [
          "nullArray",
          "array"
        ],
        "params": []
      }
    },
    {
      "name": "ar_List",
      "description": "Takes up to twenty arguments of any type and returns an Array containing those elements in the order in which they were passed. We recommend separating the values with commas (starting after the first argument).",
      "example": {
        "raw": "ar_List - Takes up to twenty arguments of any type and returns an Array containing those elements in the order in which they were passed. We recommend separating the values with commas (starting after the first argument).\n\n(list:Array) ar_List element0:multi element1:multi ... element19:multi",
        "return": [
          "list",
          "Array"
        ],
        "params": [
          "..."
        ]
      }
    },
    {
      "name": "ar_Resize",
      "description": "resizes an Array-type array to be of the specified size. If the new size is smaller than the current size, elements at the end of the array are discarded. If the new size is larger, additional elements are appended to the array. By default these elements have the numeric value zero, but an optional argument can be used to specify the value with which to pad the array. Returns 1 if successful, 0 otherwise.",
      "example": {
        "raw": "ar_Resize - resizes an Array-type array to be of the specified size. If the new size is smaller than the current size, elements at the end of the array are discarded. If the new size is larger, additional elements are appended to the array. By default these elements have the numeric value zero, but an optional argument can be used to specify the value with which to pad the array. Returns 1 if successful, 0 otherwise.\n\n(bResized:bool) ar_Resize array:Array newSize:int paddingValue:multi",
        "return": [
          "bResized",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Insert",
      "description": "inserts a single element into an Array-type array at the specified index provided the index is not greater than the current size of the array. Elements above the index are shifted up by one index.",
      "example": {
        "raw": "ar_Insert - inserts a single element into an Array-type array at the specified index provided the index is not greater than the current size of the array. Elements above the index are shifted up by one index.\n\n(bInserted:bool) ar_Insert array:Array index:int valueToInsert:multi",
        "return": [
          "bInserted",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ar_InsertRange",
      "description": "inserts a range of elements into an Array-type array at the specified index provided the index is not greater than the current size of the array. The range is passed as an Array. Each element of the range is inserted into the target Array in order. Elements above the insertion index are shifted up by the number of elements inserted.",
      "example": {
        "raw": "ar_InsertRange - inserts a range of elements into an Array-type array at the specified index provided the index is not greater than the current size of the array. The range is passed as an Array. Each element of the range is inserted into the target Array in order. Elements above the insertion index are shifted up by the number of elements inserted.\n\n(bInserted:bool) ar_Insert target:Array index:int rangeToInsert:Array",
        "return": [
          "bInserted",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "ar_Range",
      "description": "returns an Array of zero or more numbers ranging from ",
      "example": {
        "raw": "ar_Range - returns an Array of zero or more numbers ranging from start up to and including end spaced in intervals of step. For example, ar_Range (5,10,2) returns (5,7,9) and ar_Range (5,3,-1) returns (5,4,3). This is useful for performing a traditional for loop within a foreach expression. The optional step argument defaults to 1.\n\n(range:Array) ar_Range start:int end:int step:int",
        "return": [
          "r_Rang"
        ],
        "params": []
      }
    },
    {
      "name": "ar_CustomSort",
      "description": "returns an Array sorted by calling the provided function script to perform comparison of elements. The function should be defined to take two array_var arguments. When it is called, the arguments will contain exactly one element each - the elements to be compared. It should return true if the first argument is less than the second argument, and true if it is greater than or equal to the second argument. You can define 'less', 'greater', and 'equal' in whatever way makes sense for you provided your definitions provide a definitive ordering of any set of values; otherwise the sort may never terminate. The optional third argument sorts the elements in reverse order. ",
      "example": {
        "raw": "ar_CustomSort - returns an Array sorted by calling the provided function script to perform comparison of elements. The function should be defined to take two array_var arguments. When it is called, the arguments will contain exactly one element each - the elements to be compared. It should return true if the first argument is less than the second argument, and true if it is greater than or equal to the second argument. You can define 'less', 'greater', and 'equal' in whatever way makes sense for you provided your definitions provide a definitive ordering of any set of values; otherwise the sort may never terminate. The optional third argument sorts the elements in reverse order. \n\n(sorted:Array) ar_CustomSort toSort:Array comparisonFunction:ref reverse:bool",
        "return": [
          "sorted",
          "Array"
        ],
        "params": []
      }
    },
    {
      "name": "Let",
      "description": "The Let statement is OBSE's version of Oblivion's ",
      "example": {
        "raw": "Let - The Let statement is OBSE's version of Oblivion's Set statement. It takes the form let expr1 := expr2 where expr1 evaluates to something which can hold a value, such as a variable or array element, and expr2 is an expression of a type which can be stored in expr1. Values within expressions can include arithmetic expressions, function calls, etc. The assignment operator checks the types of its operands, so it will allow assigning a number to a short variable but not to a string_var.\n\n(nothing) Let expr := expr",
        "return": [
          "e"
        ],
        "params": []
      }
    },
    {
      "name": "Eval",
      "description": "",
      "example": {
        "raw": "Eval - Eval is used within if statements to test the value of an expression. This allows OBSE expressions to be used as conditions. The expression must evaluate to a boolean value.\n\n(bool) Eval expr",
        "return": [
          "va"
        ],
        "params": []
      }
    },
    {
      "name": "TestExpr",
      "description": "attempts to evaluate an expression, returning false if an error occurs during evaluation and true otherwise. This can be useful when checking if an array index is out of bounds or if an element exists with a given key, among other things. ",
      "example": {
        "raw": "TestExpr - attempts to evaluate an expression, returning false if an error occurs during evaluation and true otherwise. This can be useful when checking if an array index is out of bounds or if an element exists with a given key, among other things. TestExpr suppresses the output of error messages to the console and log file.\n\n(bool) TestExpr expr",
        "return": [
          "estExp"
        ],
        "params": []
      }
    },
    {
      "name": "ToString",
      "description": "attempts to convert an expression to a string. For numeric expressions, the result is a string representation of the numeric value. For objects, it is the name of the object if available; otherwise it is the formID expressed in hexadecimal notation. For string expressions no conversion is necessary.",
      "example": {
        "raw": "ToString - attempts to convert an expression to a string. For numeric expressions, the result is a string representation of the numeric value. For objects, it is the name of the object if available; otherwise it is the formID expressed in hexadecimal notation. For string expressions no conversion is necessary.\n\n(string) ToString expr",
        "return": [
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "TypeOf",
      "description": "returns a string representing the type of an expression. This is mainly useful for determining the type of an array element at run-time. Possible return values: \"String\", \"Number\", \"Form\", \"Array\", \"StringMap\", \"Map\".",
      "example": {
        "raw": "TypeOf - returns a string representing the type of an expression. This is mainly useful for determining the type of an array element at run-time. Possible return values: \"String\", \"Number\", \"Form\", \"Array\", \"StringMap\", \"Map\".\n\n(type:string) TypeOf expr",
        "return": [
          "type",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "Function",
      "description": "a blocktype which precedes the body of a function. This blocktype is only valid within function scripts. A parameter list consisting of up to ten local variables used to hold arguments passed to the function must follow this keyword enclosed in curly braces; if the function takes no arguments the braces should be empty."
    },
    {
      "name": "SetFunctionValue",
      "description": "specifies the value to be returned from a function. Valid only within a ",
      "example": {
        "raw": "SetFunctionValue - specifies the value to be returned from a function. Valid only within a Function block. If a function does not specify a return value, the return value is assumed to be numeric zero. If multiple calls to SetFunctionValue are processed within a single Function block, the most recent value specified will be returned.\n\n(nothing) SetFunctionValue returnValue:expr",
        "return": [
          "unctio"
        ],
        "params": []
      }
    },
    {
      "name": "Call",
      "description": "calls a user-defined function. Should be followed by a list of arguments matching the types expected by the function. If a calling reference is specified, commands within the function body will operate on that reference. Call returns whatever value is returned by the function.",
      "example": {
        "raw": "Call - calls a user-defined function. Should be followed by a list of arguments matching the types expected by the function. If a calling reference is specified, commands within the function body will operate on that reference. Call returns whatever value is returned by the function.\n\n(returnValue:multi) ref.Call function:ref arg1:multi arg2:multi ... arg10:multi",
        "return": [
          "returnValue",
          "multi"
        ],
        "params": [
          "ref.Call",
          "..."
        ]
      }
    },
    {
      "name": "GetCallingScript",
      "description": "returns the script that called the currently executing function script. Returns nothing if the function script was not invoked by a ",
      "example": {
        "raw": "GetCallingScript - returns the script that called the currently executing function script. Returns nothing if the function script was not invoked by a Call statement from another script (e.g., will return nothing if the function was invoked as an event handler by OBSE).\n\n(callingScript:ref) GetCallingScript",
        "return": [
          "callingScript",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "SetEventHandler",
      "description": "registers a user-defined function as a handler for the specified event. If the function script returns a value, it will be ignored. Two optional arguments can be supplied as key::value pairs to filter events according to the target and/or object.",
      "example": {
        "raw": "SetEventHandler - registers a user-defined function as a handler for the specified event. If the function script returns a value, it will be ignored. Two optional arguments can be supplied as key::value pairs to filter events according to the target and/or object.\n\n(success:bool) SetEventHandler eventID:string functionScript:ref filter1:pair filter2:pair",
        "return": [
          "success",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveEventHandler",
      "description": "removes the specified script as an event handler for the specified event. Two optional arguments can be supplied as key::value pairs to filter events according to the target and/or object. If both filters are omitted, all event handlers matching the script and event will be removed. If only one filter is omitted, all handlers matching the script, event, and the other filter will be removed. Returns true if at least one matching event handler was found and removed, false otherwise.",
      "example": {
        "raw": "RemoveEventHandler - removes the specified script as an event handler for the specified event. Two optional arguments can be supplied as key::value pairs to filter events according to the target and/or object. If both filters are omitted, all event handlers matching the script and event will be removed. If only one filter is omitted, all handlers matching the script, event, and the other filter will be removed. Returns true if at least one matching event handler was found and removed, false otherwise.\n\n(removed:bool) RemoveEventHandler eventID:string functionScript:ref filter1:pair filter2:pair",
        "return": [
          "removed",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "GetCurrentEventName",
      "description": "When called from within an event handler, returns the name of the event currently being handled, as defined ",
      "example": {
        "raw": "GetCurrentEventName - When called from within an event handler, returns the name of the event currently being handled, as defined above.\n\n(eventName:string) GetCurrentEventName",
        "return": [
          "eventName",
          "string"
        ],
        "params": []
      }
    },
    {
      "name": "DispatchEvent",
      "description": "dispatches a user-defined event to any registered listeners. The eventName parameter specifies the event that occurred; this should be fairly unique to prevent event name clashes between different mods, but the event handler can also disambiguate name clashes by checking the name of the event sender if necessary. The optional second parameter is a StringMap containing any additional information about the event. When the event is dispatched, the array will also include the event name and the name of the sender. If omitted, the name of the sender is the filename from which the event originated; otherwise it matches the supplied third argument.",
      "example": {
        "raw": "DispatchEvent - dispatches a user-defined event to any registered listeners. The eventName parameter specifies the event that occurred; this should be fairly unique to prevent event name clashes between different mods, but the event handler can also disambiguate name clashes by checking the name of the event sender if necessary. The optional second parameter is a StringMap containing any additional information about the event. When the event is dispatched, the array will also include the event name and the name of the sender. If omitted, the name of the sender is the filename from which the event originated; otherwise it matches the supplied third argument.\n\n(dispatched:bool) DispatchEvent eventName:string args:StringMap senderName:string",
        "return": [
          "dispatched",
          "bool"
        ],
        "params": []
      }
    },
    {
      "name": "RemoveMeIR",
      "description": "removes an inventory reference from its container, optionally transferring it to a different container, in much the same way as the vanilla RemoveMe command. The inventory reference becomes invalid once this command is called and should no longer be used. This command will not remove ",
      "example": {
        "raw": "RemoveMeIR - removes an inventory reference from its container, optionally transferring it to a different container, in much the same way as the vanilla RemoveMe command. The inventory reference becomes invalid once this command is called and should no longer be used. This command will not remove equipped items until the end of the loop.\n\n(success:bool) reference.RemoveMeIR containerRef:ref",
        "return": [
          "success",
          "bool"
        ],
        "params": [
          "reference.RemoveMeIR"
        ]
      }
    },
    {
      "name": "CopyIR",
      "description": "copies an inventory reference to the specified container. The calling object needn't be in a container and remains valid after the command is called. If the calling object is equipped, the copy will not be equipped.",
      "example": {
        "raw": "CopyIR - copies an inventory reference to the specified container. The calling object needn't be in a container and remains valid after the command is called. If the calling object is equipped, the copy will not be equipped.\n\n(success:bool) reference.CopyIR container:ref",
        "return": [
          "success",
          "bool"
        ],
        "params": [
          "reference.CopyIR"
        ]
      }
    },
    {
      "name": "CreateTempRef",
      "description": "creates a temporary reference to the specified form. This reference does not exist in the gameworld or in a container, and remains valid for only one frame. It is mostly useful for creating a stack of one or more items to be added to a container with CopyIR",
      "example": {
        "raw": "CreateTempRef - creates a temporary reference to the specified form. This reference does not exist in the gameworld or in a container, and remains valid for only one frame. It is mostly useful for creating a stack of one or more items to be added to a container with CopyIR\n\n(tempRef:ref) CreateTempRef baseObject:ref",
        "return": [
          "tempRef",
          "ref"
        ],
        "params": []
      }
    },
    {
      "name": "GetInvRefsForItem",
      "description": "given a base inventory item, returns an Array of temporary references to stacks of that item inside the calling container.",
      "example": {
        "raw": "GetInvRefsForItem - given a base inventory item, returns an Array of temporary references to stacks of that item inside the calling container.\n\n(refs:Array) ref.GetInvRefsForItem baseObject:ref",
        "return": [
          "refs",
          "Array"
        ],
        "params": [
          "ref.GetInvRefsForItem"
        ]
      }
    },
    {
      "name": "IsEquipped",
      "description": "returns true if the calling object is currently being worn",
      "example": {
        "raw": "IsEquipped - returns true if the calling object is currently being worn\n\n(bool) reference.IsEquipped",
        "return": [
          "bool"
        ],
        "params": [
          "reference.IsEquipped"
        ]
      }
    },
    {
      "name": "GetLocalGravity",
      "description": "returns the acceleration due to gravity in the specified axis for the current cell. Unless SetLocalGravityVector has been used, the x and y components will always be zero.",
      "example": {
        "raw": "GetLocalGravity - returns the acceleration due to gravity in the specified axis for the current cell. Unless SetLocalGravityVector has been used, the x and y components will always be zero.\n\n(gravity:float) GetLocalGravity axis:axis",
        "return": [
          "gravity",
          "float"
        ],
        "params": []
      }
    },
    {
      "name": "SetLocalGravity",
      "description": "sets the vertical acceleration due to gravity for the current cell. Negative values are the norm, causing objects to accelerate downward, but positive values are also acceptable. Changing the gravity for an exterior cell changes it for ",
      "example": {
        "raw": "SetLocalGravity - sets the vertical acceleration due to gravity for the current cell. Negative values are the norm, causing objects to accelerate downward, but positive values are also acceptable. Changing the gravity for an exterior cell changes it for all exterior cells until it is reset by another call to this function. Changes to gravity in an interior cell affect only that cell, and the change will be reset once the cell is reloaded.\n\n(nothing) SetLocalGravity gravity:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "SetLocalGravityVector",
      "description": "sets the x, y, and z components of local acceleration due to gravity. This can be used to cause gravity to act in a non-vertical direction, which might be useful for simulating water currents.",
      "example": {
        "raw": "SetLocalGravityVector - sets the x, y, and z components of local acceleration due to gravity. This can be used to cause gravity to act in a non-vertical direction, which might be useful for simulating water currents.\n\n(nothing) SetLocalGravityVector xAccel:float yAccel:float zAccel:float",
        "return": [
          "nothing"
        ],
        "params": []
      }
    },
    {
      "name": "GetVelocity",
      "description": "returns the actor's current velocity in the specified axis.",
      "example": {
        "raw": "GetVelocity - returns the actor's current velocity in the specified axis.\n\n(velocity:float) reference.GetVelocity axis:axis",
        "return": [
          "velocity",
          "float"
        ],
        "params": [
          "reference.GetVelocity"
        ]
      }
    },
    {
      "name": "GetVerticalVelocity",
      "description": "returns the z component of the actor's current velocity.",
      "example": {
        "raw": "GetVerticalVelocity - returns the z component of the actor's current velocity.\n\n(velocity:float) reference.GetVerticalVelocity",
        "return": [
          "velocity",
          "float"
        ],
        "params": [
          "reference.GetVerticalVelocity"
        ]
      }
    },
    {
      "name": "SetVelocity",
      "description": "sets the x, y, and z components of the actor's velocity. The change applies only to the current frame.",
      "example": {
        "raw": "SetVelocity - sets the x, y, and z components of the actor's velocity. The change applies only to the current frame.\n\n(nothing) reference.SetVelocity xVelocity:float yVelocity:float zVelocity:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetVelocity"
        ]
      }
    },
    {
      "name": "SetVerticalVelocity",
      "description": "Sets the vertical velocity for an actor. This is primarily useful for actors who are jumping or falling. Positive values will cause the actor to move upwards, negative values will cause him to move downwards, and zero will prevent him from moving vertically for the current frame. On the subsequent frame, acceleration due to gravity will be applied to the new velocity. This means that if you set a falling actor's velocity to zero, on the next frame he will appear to accelerate as if he had just begun falling.",
      "example": {
        "raw": "SetVerticalVelocity - Sets the vertical velocity for an actor. This is primarily useful for actors who are jumping or falling. Positive values will cause the actor to move upwards, negative values will cause him to move downwards, and zero will prevent him from moving vertically for the current frame. On the subsequent frame, acceleration due to gravity will be applied to the new velocity. This means that if you set a falling actor's velocity to zero, on the next frame he will appear to accelerate as if he had just begun falling.\n\n(nothing) reference.SetVerticalVelocity velocity:float",
        "return": [
          "nothing"
        ],
        "params": [
          "reference.SetVerticalVelocity"
        ]
      }
    }
  ]
}